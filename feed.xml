<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Schemescape</title>
<id>https://log.schemescape.com/</id>
<link rel="self" href="https://log.schemescape.com/feed.xml"/>
<link rel="alternate" href="https://log.schemescape.com/"/>
<author>
<name>Schemescape</name>
</author>
<updated>2022-08-17T02:44:16.502Z</updated>

<entry>
<title>Testing out Zig... for C/C++ code... on Windows</title>
<id>https://log.schemescape.com/posts/programming-languages/compiling-cpp-for-windows-using-zig.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/programming-languages/compiling-cpp-for-windows-using-zig.html"/>
<updated>2022-08-13T00:00:00.000Z</updated>
<summary type="text">Can Zig save me from downloading multi-gigabyte SDKs just to build Windows programs?</summary>
<content type="html">&lt;p&gt;I briefly played around with Zig&amp;#39;s C/C++ compiler in the past. It&amp;#39;s a tidy ~60 MB download that can magically even cross-compile. I haven&amp;#39;t worked up the nerve to investigate the Zig &lt;em&gt;programming language&lt;/em&gt;, but its built-in C/C++ compiler impressed me.&lt;/p&gt;
&lt;p&gt;Now how far can I push it?&lt;/p&gt;
&lt;h2 id=&quot;aside-toolchain-bloat&quot;&gt;Aside: toolchain bloat&lt;/h2&gt;
&lt;p&gt;A good way to discourage me from testing out your software is to require a gigabyte (or more) download (and no, providing an installer that obscures the massive download is not a solution).&lt;/p&gt;
&lt;p&gt;The chief offender of inexplicably enormous downloads is, unfortunately, anything related to compiling software for Windows. Want to use the free edition of Microsoft Visual C? That will be at least 3 GB. How about a more modern language like C#? That&amp;#39;s 5 GB. Even non-Visual Studio C/C++ compilers tend to be hundreds of megabytes.&lt;/p&gt;
&lt;h1 id=&quot;hello-zig-c&quot;&gt;Hello, &lt;del&gt;Zig&lt;/del&gt; C!&lt;/h1&gt;
&lt;p&gt;First, here&amp;#39;s a trivial &amp;quot;hello world&amp;quot; program:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;** argv)&lt;/span&gt; {
    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;Hello, C!&amp;quot;&lt;/span&gt;);
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;#39;s the result:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;&amp;gt; zig cc hello-c.c -o hello-c.exe

&amp;gt; hello-c.exe
Hello, C!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Success!&lt;/p&gt;
&lt;h2 id=&quot;making-the-binary-more-portable&quot;&gt;Making the binary more portable&lt;/h2&gt;
&lt;p&gt;According to ziglearn.org, &lt;a href=&quot;https://ziglearn.org/chapter-3/#cross-compilation&quot;&gt;Zig targets the host&amp;#39;s specific CPU by default&lt;/a&gt;. If you plan to distribute programs built with Zig, you&amp;#39;ll probably want to choose a more generic architecture, e.g. &lt;code&gt;i386&lt;/code&gt; or &lt;code&gt;x86_64&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;&amp;gt; zig cc -target i386-windows-gnu hello-c.c -o hello-c.exe 
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;hello-win32&quot;&gt;Hello, Win32!&lt;/h1&gt;
&lt;p&gt;That last exercise was somewhat trivial, although I&amp;#39;m still impressed at how easy it was to get started with Zig&amp;#39;s compiler (just unzip--no installation or SDK required).&lt;/p&gt;
&lt;p&gt;But I want to be able to call Win32 APIs from my programs. Is Zig up to that task?&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s a trivial program to pop up a message box:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;windows.h&amp;gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {
    MessageBox(&lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;Hello there!&amp;quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;From Zig land!&amp;quot;&lt;/span&gt;, MB_OK);
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Build command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;&amp;gt; zig cc -target i386-windows-gnu hello-win32.c -o hello-win32.exe 

&amp;gt; hello-win32.exe
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sure enough, a message box appeared!&lt;/p&gt;
&lt;p&gt;At this point, I&amp;#39;m impressed, but it remains to be seen if Zig&amp;#39;s magic will work beyond trivial examples like this.&lt;/p&gt;
&lt;h1 id=&quot;hello-c-and-winmain&quot;&gt;Hello, C++ and WinMain!&lt;/h1&gt;
&lt;p&gt;Time to throw in some C++ and create an actual Window:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;windows.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;tchar.h&amp;gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; TCHAR szWindowClass[] = _T(&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;DesktopApp&amp;quot;&lt;/span&gt;);
&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; TCHAR szTitle[] = _T(&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;Hello, Windows!&amp;quot;&lt;/span&gt;);

&lt;span class=&quot;hljs-function&quot;&gt;LRESULT CALLBACK &lt;span class=&quot;hljs-title&quot;&gt;WndProc&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(HWND, UINT, WPARAM, LPARAM)&lt;/span&gt;&lt;/span&gt;;

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; CALLBACK &lt;span class=&quot;hljs-title&quot;&gt;WinMain&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; nCmdShow)&lt;/span&gt; &lt;/span&gt;{
    WNDCLASSEX wcex;

    wcex.cbSize = &lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(WNDCLASSEX);
    wcex.style = CS_HREDRAW | CS_VREDRAW;
    wcex.lpfnWndProc = WndProc;
    wcex.cbClsExtra = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;
    wcex.cbWndExtra = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;
    wcex.hInstance = hInstance;
    wcex.hIcon = &lt;span class=&quot;hljs-built_in&quot;&gt;LoadIcon&lt;/span&gt;(hInstance, IDI_APPLICATION);
    wcex.hCursor = &lt;span class=&quot;hljs-built_in&quot;&gt;LoadCursor&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;, IDC_ARROW);
    wcex.hbrBackground = (HBRUSH)(COLOR_WINDOW + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);
    wcex.lpszMenuName = &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;;
    wcex.lpszClassName = szWindowClass;
    wcex.hIconSm = &lt;span class=&quot;hljs-built_in&quot;&gt;LoadIcon&lt;/span&gt;(wcex.hInstance, IDI_APPLICATION);

    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-built_in&quot;&gt;RegisterClassEx&lt;/span&gt;(&amp;amp;wcex)) {
        &lt;span class=&quot;hljs-built_in&quot;&gt;MessageBox&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;, _T(&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;Call to RegisterClassEx failed!&amp;quot;&lt;/span&gt;), _T(&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;Test app&amp;quot;&lt;/span&gt;), &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;);
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;
    }

    HWND hWnd = &lt;span class=&quot;hljs-built_in&quot;&gt;CreateWindow&lt;/span&gt;(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT, &lt;span class=&quot;hljs-number&quot;&gt;1200&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;900&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;, hInstance, &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;);
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!hWnd) {
        &lt;span class=&quot;hljs-built_in&quot;&gt;MessageBox&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;,
            _T(&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;Call to CreateWindow failed!&amp;quot;&lt;/span&gt;),
            _T(&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;Test app&amp;quot;&lt;/span&gt;),
            &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;);

        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;
    }

    &lt;span class=&quot;hljs-built_in&quot;&gt;ShowWindow&lt;/span&gt;(hWnd, nCmdShow);
    &lt;span class=&quot;hljs-built_in&quot;&gt;UpdateWindow&lt;/span&gt;(hWnd);

    MSG msg;
    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;GetMessage&lt;/span&gt;(&amp;amp;msg, &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)) {
        &lt;span class=&quot;hljs-built_in&quot;&gt;TranslateMessage&lt;/span&gt;(&amp;amp;msg);
        &lt;span class=&quot;hljs-built_in&quot;&gt;DispatchMessage&lt;/span&gt;(&amp;amp;msg);
    }

    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)msg.wParam;
}

&lt;span class=&quot;hljs-function&quot;&gt;LRESULT CALLBACK &lt;span class=&quot;hljs-title&quot;&gt;WndProc&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (message) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; WM_DESTROY:
        &lt;span class=&quot;hljs-built_in&quot;&gt;PostQuitMessage&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);
        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;

    &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;:
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;DefWindowProc&lt;/span&gt;(hWnd, message, wParam, lParam);
        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;
    }

    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now to build and test:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;&amp;gt; zig c++ -target i386-windows-gnu hello-window.cpp -o hello-window.exe

&amp;gt; hello-window.exe
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This popped up a window that I could close.&lt;/p&gt;
&lt;p&gt;Based on functionality, this is a fairly trivial example, but based on the number of lines of code in the included header files, I actually wasn&amp;#39;t expecting this to work on the first try.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s not yet clear to me how much of the Windows SDK Zig ships with, but it&amp;#39;s at least enough to create a real window.&lt;/p&gt;
&lt;h1 id=&quot;hello-webview2&quot;&gt;Hello, WebView2?&lt;/h1&gt;
&lt;p&gt;Given that &lt;a href=&quot;https://docs.microsoft.com/en-us/microsoft-edge/webview2/&quot;&gt;WebView2&lt;/a&gt; isn&amp;#39;t a part of the standard Windows SDK, I&amp;#39;m almost certain that this won&amp;#39;t work out of the box, but I&amp;#39;m going to give it a try anyway.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m going to work off of the &lt;a href=&quot;https://docs.microsoft.com/en-us/microsoft-edge/webview2/get-started/win32&quot;&gt;WebView2 for Win32 tutorial&lt;/a&gt;. The code is fairly lengthy, so I&amp;#39;m not going to duplicate it here.&lt;/p&gt;
&lt;p&gt;After trying to compile the sample, I finally managed to stump Zig:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;&amp;gt; zig c++ -target i386-windows-gnu hello-webview2.cpp -o hello-webview2.exe
hello-webview2.cpp:5:10: fatal error: &amp;#x27;wil/com.h&amp;#x27; file not found
#include &amp;lt;wil/com.h&amp;gt;
         ^~~~~~~~~~~
1 error generated.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The sample code uses &lt;a href=&quot;https://github.com/microsoft/wil&quot;&gt;WIL&lt;/a&gt;, and regardless of whether that&amp;#39;s part of the Windows SDK, Zig doesn&amp;#39;t ship with it. I&amp;#39;ll try cloning the repository, but you could also download the NuGet package and unzip it (&lt;code&gt;.nupkg&lt;/code&gt; files are just Zip files).&lt;/p&gt;
&lt;p&gt;Second attempt, this time with WIL:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;&amp;gt; zig c++ -target i386-windows-gnu hello-webview2.cpp -I..\wil\include -o hello-webview2.exe
In file included from hello-webview2.cpp:5:
..\wil\include\wil/com.h:14:10: fatal error: &amp;#x27;WeakReference.h&amp;#x27; file not found
#include &amp;lt;WeakReference.h&amp;gt;
         ^~~~~~~~~~~~~~~~~
1 error generated.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alright, &lt;code&gt;WeakReference.h&lt;/code&gt; is part of &lt;a href=&quot;https://docs.microsoft.com/en-us/cpp/cppcx/wrl/windows-runtime-cpp-template-library-wrl?view=msvc-170&quot;&gt;WRL&lt;/a&gt;, which is actually part of the Windows SDK. Zig doesn&amp;#39;t appear to ship with WRL (and I&amp;#39;m not even sure that it &lt;em&gt;should&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;I suspect I don&amp;#39;t actually &lt;em&gt;need&lt;/em&gt; WIL or WRL, but proceeding without them might not be the best use of time, because instantiating WebView2 appears to be an COM-based asynchronous operation, and I don&amp;#39;t want to reimplement a large chunk of WIL, WRL, or even COM just to avoid using the Windows SDK and Visual Studio.&lt;/p&gt;
&lt;p&gt;Ok, fine, Visual Studio Installer. You win this round.&lt;/p&gt;
</content>
</entry>
<entry>
<title>Porting a browser-based game to Steam</title>
<id>https://log.schemescape.com/posts/game-development/browser-based-game-on-steam.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/game-development/browser-based-game-on-steam.html"/>
<updated>2022-08-10T00:00:00.000Z</updated>
<summary type="text">I&apos;m researching options for porting a browser-based game to Steam.</summary>
<content type="html">&lt;p&gt;Browser-based games are great because players can pick them up and start playing without having to install anything (assuming reasonable cross-browser compatibility). HTML can also be convenient for UI, especially for laying out text (although handling CSS and rendering quirks can be frustrating).&lt;/p&gt;
&lt;p&gt;Despite the benefits, I&amp;#39;d like to port my most popular browser-based game to Steam, for the following reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I want players to be able to sync their data across devices, without forcing them to create a new account (and without me having to host everything)&lt;/li&gt;
&lt;li&gt;I want Steam&amp;#39;s huge user base to be able to access my game (more for convenience than for exposure)&lt;/li&gt;
&lt;li&gt;I might want to build on this experience in the future, for example, if I&amp;#39;d like to sell a game&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;open-questions&quot;&gt;Open questions&lt;/h1&gt;
&lt;p&gt;I have no experience developing for or publishing on Steam, so I have a lot of questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Which browser-to-native framework should I use (Electron, Tauri, WebView2, etc.)?&lt;/li&gt;
&lt;li&gt;Does Steam have built-in support for browser-based titles? Are any of the above frameworks in the Steamworks Common Redistributables package?&lt;/li&gt;
&lt;li&gt;Which platforms should I support?&lt;/li&gt;
&lt;li&gt;What&amp;#39;s required to take advantage of Steam&amp;#39;s support for cloud saves/syncing?&lt;/li&gt;
&lt;li&gt;How do I test Steam Cloud saves?&lt;/li&gt;
&lt;li&gt;Is there any way to transition user information from the current web site to the Steam release?&lt;/li&gt;
&lt;li&gt;Will it end up costing more than the advertised $100? Is there any way to bring that cost down?&lt;/li&gt;
&lt;li&gt;Is it permissible to promote the Steam version of the game from its current web-based host?&lt;/li&gt;
&lt;li&gt;What sort of analytics does Steam provide for game publishers?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Answering these questions will take some time, but honestly I think I&amp;#39;d regret not ever trying to port my game to Steam.&lt;/p&gt;
&lt;h1 id=&quot;first-steps&quot;&gt;First steps&lt;/h1&gt;
&lt;p&gt;Steam publishes documentation for Steamworks here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://partner.steamgames.com/doc/home&quot;&gt;https://partner.steamgames.com/doc/home&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;common-redistributables&quot;&gt;Common redistributables&lt;/h2&gt;
&lt;p&gt;There is &lt;a href=&quot;https://partner.steamgames.com/doc/features/common_redist&quot;&gt;a page about common redistributables&lt;/a&gt; that says it includes Microsoft Visual C++, .NET, DirectX 9, OpenAL, XNA, and PhysX. This appears to be a comprehensive list.&lt;/p&gt;
&lt;h2 id=&quot;platforms&quot;&gt;Platforms&lt;/h2&gt;
&lt;p&gt;It&amp;#39;s now possible to download the Steamworks SDK &lt;em&gt;before&lt;/em&gt; paying the Steam Direct fee, which is helpful. Within that zip file, it has binaries for 32- and 64-bit Linux and Windows, and macOS. I&amp;#39;m interpreting that list to be the definitive list of supported platforms.&lt;/p&gt;
&lt;p&gt;Note that GPL-licensed libraries can&amp;#39;t be linked with the Steamworks SDK (or probably distributed via Steam period).&lt;/p&gt;
&lt;h2 id=&quot;cloud-saves&quot;&gt;Cloud saves&lt;/h2&gt;
&lt;p&gt;The Steam SDK &lt;a href=&quot;https://partner.steamgames.com/doc/sdk/api&quot;&gt;provides a C++ interface&lt;/a&gt; for enumerating/reading/writing files to the Steam Cloud. There is also an &lt;a href=&quot;https://partner.steamgames.com/doc/features/cloud#steam_auto-cloud&quot;&gt;auto-cloud&lt;/a&gt; feature that just synchronizes files based on path.&lt;/p&gt;
&lt;p&gt;As far as transitioning data from the browser version to the Steam version, I doubt there is a reliable and automatic way to do so.&lt;/p&gt;
&lt;h3 id=&quot;one-note-on-itch&quot;&gt;One note on Itch&lt;/h3&gt;
&lt;p&gt;Note: in the past, I investigated using &lt;a href=&quot;https://itch.io/&quot;&gt;Itch&lt;/a&gt;&amp;#39;s launcher to sync user data, but there were many issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Obtaining the user identity isn&amp;#39;t possible due to known bugs&lt;/li&gt;
&lt;li&gt;Storing data is up to the game developer, because Itch (reasonably, in my opinion) does not offer cloud storage for games&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;cost&quot;&gt;Cost&lt;/h2&gt;
&lt;p&gt;As far as I can tell, Steam&amp;#39;s $100 fee (plus tax) is a one-time fee. Obviously, I&amp;#39;d prefer not to have to shell out this much money, but, luckily, $100 is not going to make or break my financial situation.&lt;/p&gt;
&lt;h2 id=&quot;advertising-steam-release-within-browser-based-version&quot;&gt;Advertising Steam release within browser-based version&lt;/h2&gt;
&lt;p&gt;It seems that there is precedent (e.g. &lt;a href=&quot;https://anuke.itch.io/mindustry&quot;&gt;Mindustry on Itch&lt;/a&gt;) for advertising that the same game is available on Steam, when the Steam version has additional features. I didn&amp;#39;t see anything Itch&amp;#39;s terms of service that prohibit this (nor do I think it &lt;em&gt;should&lt;/em&gt; be prohibited).&lt;/p&gt;
&lt;h1 id=&quot;marketing-and-analytics&quot;&gt;Marketing and analytics&lt;/h1&gt;
&lt;p&gt;Steam has &lt;a href=&quot;https://partner.steamgames.com/doc/marketing&quot;&gt;guidance for marketing games on the platform&lt;/a&gt;. It looks like there is support for Google Analytics and some link tracking. For now, I&amp;#39;m just going to put off thinking about marketing because my goal is to share my game, not to get rich off of it.&lt;/p&gt;
</content>
</entry>
<entry>
<title>May 16th, 2022</title>
<id>https://log.schemescape.com/posts/misc/2022-05-16.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/misc/2022-05-16.html"/>
<updated>2022-05-16T00:00:00.000Z</updated>
<summary type="text">A memory, for my own reference.</summary>
<content type="html">&lt;p&gt;I had just been there the previous day, but after receiving an inevitable update, I was returning once again. Inevitable or not, I was never able to imagine it actually happening.&lt;/p&gt;
&lt;p&gt;It was one of the few sunny days of an unusually cold spring. I was driving down a mostly empty freeway in the evening. I&amp;#39;d made this drive many times before, but this time was different.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m still not sure how to feel about it, and I&amp;#39;m not convinced that there even &lt;em&gt;is&lt;/em&gt; a way one should feel about it.&lt;/p&gt;
&lt;p&gt;Regardless, it puts things into perspective.&lt;/p&gt;
</content>
</entry>
<entry>
<title>Generating music using machine learning (part 2)</title>
<id>https://log.schemescape.com/posts/machine-learning/generating-music-2.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/machine-learning/generating-music-2.html"/>
<updated>2022-05-02T00:00:00.000Z</updated>
<summary type="text">An unsuccessful (but less unsuccessful than last time) attempt to generate ragtime music.</summary>
<content type="html">&lt;p&gt;In &lt;a href=&quot;https://log.schemescape.com/posts/machine-learning/generating-music.html&quot;&gt;part 1&lt;/a&gt;, I played around with pre-trained &lt;a href=&quot;https://magenta.tensorflow.org/music-transformer&quot;&gt;Music Transformer&lt;/a&gt; models, in an attempt to generate a piece of ragtime piano music. The results were interesting, but the musical styles were random (and internally inconsistent).&lt;/p&gt;
&lt;p&gt;In this part, I attempt to train my own Music Transformer model, using a ragtime-focused corpus.&lt;/p&gt;
&lt;h1 id=&quot;first-attempt&quot;&gt;First attempt&lt;/h1&gt;
&lt;p&gt;Initially, I tried to generate music using the official Music Transformer environment, &lt;a href=&quot;https://magenta.tensorflow.org/&quot;&gt;Magenta&lt;/a&gt;, following instructions in &lt;a href=&quot;https://groups.google.com/a/tensorflow.org/g/magenta-discuss/c/tRrth7wXF6U&quot;&gt;an email thread about using transfer learning with Music Transformer&amp;#39;s pre-trained checkpoints&lt;/a&gt;. I hit several issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/magenta/magenta/issues/1962&quot;&gt;Magenta install fails for Python &amp;gt;= 3.8 &lt;/a&gt; (worked around via &lt;a href=&quot;https://www.anaconda.com/&quot;&gt;Anaconda&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The default optimizer (&lt;code&gt;AdafactorOptimizer&lt;/code&gt;) appeared to be incompatible with the version of Tensorflow Magenta installed (worked around via &lt;code&gt;--hparams=optimizer=Adam,...&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;I couldn&amp;#39;t use my GPU to train because it didn&amp;#39;t have enough memory&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/magenta/magenta/issues/1862&quot;&gt;Tensor2Tensor terminated on &amp;quot;key not found&amp;quot; errors&lt;/a&gt; (worked around with a newer version, as noted in the linked GitHub issue)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;
&lt;p&gt;After training for roughly a day (2,500 steps), the &lt;a href=&quot;https://log.schemescape.com/posts/machine-learning/../../assets/music-generation/mt-train-2500.mid&quot;&gt;resulting MIDI&lt;/a&gt; sounds mostly like random noise. It&amp;#39;s not clear to me if this was due to a bug in my pipeline or if I just needed to spend a lot more time training.&lt;/p&gt;
&lt;p&gt;Ultimately, I decided I didn&amp;#39;t understand the Magenta and Tensor2Tensor libraries well enough to make much progress (without investing an excessive amount of time), and I&amp;#39;d spent enough time troubleshooting issues already. &lt;a href=&quot;https://github.com/jaredkrinke/music-transformer-fine-tuning&quot;&gt;My training scripts are here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;second-attempt&quot;&gt;Second attempt&lt;/h1&gt;
&lt;p&gt;Rather than give up on transformer-based music generation entirely, I searched around for a simpler codebase that I might be able to more easily understand and/or adapt. Here are a few I ran across:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/davidsvy/transformer-xl&quot;&gt;transformer-xl&lt;/a&gt; by &lt;a href=&quot;https://github.com/davidsvy&quot;&gt;davidsvy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/COMP6248-Reproducability-Challenge/music-transformer-comp6248&quot;&gt;music-transformer-comp6248
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bearpelican/musicautobot&quot;&gt;MusicAutobot&lt;/a&gt; by &lt;a href=&quot;https://github.com/bearpelican&quot;&gt;Andrew Shaw&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first one is a noted as a re-implementation from scratch of the ideas from the transformer/attention research papers (mostly the same ones I&amp;#39;d been looking at) using Tensorflow/Keras. The codebase seemed small enough that I could probably understand it all without too much trouble.&lt;/p&gt;
&lt;p&gt;I decided to move forward with the transformer-xl repository. I didn&amp;#39;t hit any issues with setup, which was a welcome development.&lt;/p&gt;
&lt;h2 id=&quot;training&quot;&gt;Training&lt;/h2&gt;
&lt;p&gt;As an initial test, I tried training on a fairly small corpus of 58 Scott Joplin MIDIs. I was able to decrease the batch size slightly to support training on my roughly 7 year old GPU. Training for 100 epochs only took about 7 hours.&lt;/p&gt;
&lt;p&gt;Note: although there was a preprocessing step to convert the MIDI files to another format, I didn&amp;#39;t notice any data generation/augmentation, as in the Magenta codebase.&lt;/p&gt;
&lt;h2 id=&quot;initial-results&quot;&gt;Initial results&lt;/h2&gt;
&lt;p&gt;Generating results was surprisingly slow (compared to using Magenta), but I haven&amp;#39;t investigated the reason for that yet.&lt;/p&gt;
&lt;p&gt;Regardless, the results sounded a (little) bit like music--a huge improvement from my previous attempt (which was just noise). Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://log.schemescape.com/posts/machine-learning/../../assets/music-generation/train-100-1.midi&quot;&gt;Example 1&lt;/a&gt;: occasional glimpses of music&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://log.schemescape.com/posts/machine-learning/../../assets/music-generation/train-100-2.midi&quot;&gt;Example 2&lt;/a&gt;: pleasant notes with essentially no rhythm&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://log.schemescape.com/posts/machine-learning/../../assets/music-generation/train-100-3.midi&quot;&gt;Example 3&lt;/a&gt;: repetitive, again with inconsistent rhythm&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unfortunately, the results after 250 epochs weren&amp;#39;t noticeably any better. It&amp;#39;s possible that the small corpus isn&amp;#39;t sufficient for training this model.&lt;/p&gt;
&lt;h1 id=&quot;next-steps&quot;&gt;Next steps&lt;/h1&gt;
&lt;p&gt;I started this project for fun, but after struggling with Python environments and coming to the realization that I have insufficient compute resources available, I&amp;#39;m reconsidering whether or not this is a good use of my time.&lt;/p&gt;
</content>
</entry>
<entry>
<title>Generating music using machine learning</title>
<id>https://log.schemescape.com/posts/machine-learning/generating-music.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/machine-learning/generating-music.html"/>
<updated>2022-04-26T00:00:00.000Z</updated>
<summary type="text">Let&apos;s see if I can use Google Brain&apos;s Music Transformer to generate ragtime music.</summary>
<content type="html">&lt;p&gt;Recent music generation results (e.g. &lt;a href=&quot;https://magenta.tensorflow.org/music-transformer&quot;&gt;Music Transformer: Generating Music with Long-Term Structure&lt;/a&gt;) are part of what piqued my interest in machine learning. After &lt;a href=&quot;https://log.schemescape.com/posts/machine-learning/mitx-6.036.html&quot;&gt;following an introduction to machine learning&lt;/a&gt;, it&amp;#39;s time for some experimentation.&lt;/p&gt;
&lt;p&gt;First up: generating a &lt;a href=&quot;https://en.wikipedia.org/wiki/Ragtime&quot;&gt;ragtime&lt;/a&gt; piano piece.&lt;/p&gt;
&lt;h1 id=&quot;approaches&quot;&gt;Approaches&lt;/h1&gt;
&lt;p&gt;The most compelling generated music I&amp;#39;ve seen thus far comes from Google Brain, namely their &lt;a href=&quot;https://magenta.tensorflow.org/performance-rnn&quot;&gt;Performance RNN&lt;/a&gt; and &lt;a href=&quot;https://magenta.tensorflow.org/music-transformer&quot;&gt;Music Transformer&lt;/a&gt; papers. The associated GitHub repositories appear to contain models that have been pre-trained on various corpora (e.g. a &lt;a href=&quot;https://www.piano-e-competition.com/&quot;&gt;piano competition&amp;#39;s MIDI recordings&lt;/a&gt;). It&amp;#39;s also possible to train using a new corpus. The trained models can generate continuations based on a primer or generate unconditioned music &amp;quot;from scratch&amp;quot;.&lt;/p&gt;
&lt;p&gt;Here are several approaches I&amp;#39;m investigating for generating a ragtime piece:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Condition pre-trained Performance RNN and Music Transformer models with existing ragtime music (either an intro or the first few measures) and generate a continuation&lt;/li&gt;
&lt;li&gt;Train a new model on a corpus of ragtime music, and then do unconditioned generation&lt;/li&gt;
&lt;li&gt;Train a new model on a ragtime corpus and generate a continuation from a ragtime primer&lt;/li&gt;
&lt;li&gt;Train a new model on a ragtime corpus and generate a continuation from an arbitrary primer&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I don&amp;#39;t have any intuition for how large of a corpus is required to generate a decent model, so it&amp;#39;s possible that options 2 - 4 won&amp;#39;t be feasible for me (either because finding/generating such a training corpus is too difficult or the compute required to train the model is beyond what my computer can handle).&lt;/p&gt;
&lt;h1 id=&quot;using-pre-trained-models&quot;&gt;Using pre-trained models&lt;/h1&gt;
&lt;p&gt;Without installing anything locally, you can use the &lt;a href=&quot;https://colab.research.google.com/notebooks/magenta/piano_transformer/piano_transformer.ipynb&quot;&gt;Music Transformer notebook&lt;/a&gt; to generate music. There are several options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Generate music &amp;quot;from scratch&amp;quot; (unconditional)&lt;/li&gt;
&lt;li&gt;Generate a continuation based on a primer&lt;/li&gt;
&lt;li&gt;Generate accompaniment for a (monophonic) melody&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;unconditional-generation&quot;&gt;Unconditional generation&lt;/h2&gt;
&lt;p&gt;Without providing a primer, I don&amp;#39;t think it&amp;#39;s possible to indicate what genre of music you&amp;#39;d like to generate. For example, the clip I got sounds like some sort of &lt;a href=&quot;https://log.schemescape.com/posts/machine-learning/../../assets/music-generation/mt-unconditioned.mid&quot;&gt;boogie-woogie folk march&lt;/a&gt;. Obviously this isn&amp;#39;t the genre that I was looking for (or, really, than anyone was looking for). Rather than continuing on randomly like this, I&amp;#39;ll investigate primed generation.&lt;/p&gt;
&lt;h2 id=&quot;continuations&quot;&gt;Continuations&lt;/h2&gt;
&lt;p&gt;The notebook linked above also supports providing a primer, either from a provided list or by uploading a MIDI file directly in the UI.&lt;/p&gt;
&lt;h3 id=&quot;cropping-midi-primers&quot;&gt;Cropping MIDI primers&lt;/h3&gt;
&lt;p&gt;The primer is included in the output, so I assume it should be reasonably short. My original plan was to edit down an existing ragtime MIDI using &lt;a href=&quot;https://musescore.org/en&quot;&gt;MuseScore&lt;/a&gt;, but MuseScore&amp;#39;s output appears to be incompatible with the &lt;a href=&quot;http://craffel.github.io/pretty-midi/&quot;&gt;pretty_midi&lt;/a&gt; module that the notebook uses, resulting in the following error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pretty_midi\pretty_midi.py:&lt;span class=&quot;hljs-number&quot;&gt;97&lt;/span&gt;: RuntimeWarning: Tempo, Key &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Time&lt;/span&gt; signature change events &lt;span class=&quot;hljs-built_in&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; non-zero tracks. This &lt;span class=&quot;hljs-keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt; a &lt;span class=&quot;hljs-keyword&quot;&gt;valid&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; MIDI file. Tempo, Key &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Time&lt;/span&gt; Signature may be wrong.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;My workaround was to switch to using &lt;a href=&quot;https://www.audacityteam.org/&quot;&gt;Audacity&lt;/a&gt; to crop my MIDI primer (and this worked without issue).&lt;/p&gt;
&lt;h3 id=&quot;example-continuations&quot;&gt;Example continuations&lt;/h3&gt;
&lt;p&gt;First, I tried using just the intro bars of some Scott Joplin rags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://log.schemescape.com/posts/machine-learning/../../assets/music-generation/mt-continuation-intro-wall-street.mid&quot;&gt;Wall Street Rag intro&lt;/a&gt;: this generated an interesting continuation that sounded vaguely like a cross between ragtime and new age piano&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://log.schemescape.com/posts/machine-learning/../../assets/music-generation/mt-continuation-intro-magnetic.mid&quot;&gt;Magnetic Rag intro&lt;/a&gt;: this generated a continuation with a halting style that keeps repeating notes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Overall, the results are impressive, but also somewhat alien. And definitely not ragtime.&lt;/p&gt;
&lt;p&gt;Next, I tried supplying the beginning of a few sections of Joplin rags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wall Street Rag&lt;ul&gt;
&lt;li&gt;The &lt;a href=&quot;https://log.schemescape.com/posts/machine-learning/../../assets/music-generation/mt-continuation-wall-street-1.mid&quot;&gt;first continuation&lt;/a&gt; gets a bit stuck on the primer, but then recovers nicely into a very short still-not-quite-ragtime section&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;https://log.schemescape.com/posts/machine-learning/../../assets/music-generation/mt-continuation-wall-street-2.mid&quot;&gt;second continuation&lt;/a&gt; strays quickly and widely from ragtime (continuing the trend of &amp;quot;impressive, but not what I wanted&amp;quot;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Maple Leaf Rag&lt;ul&gt;
&lt;li&gt;This &lt;a href=&quot;https://log.schemescape.com/posts/machine-learning/../../assets/music-generation/mt-continuation-maple-leaf.mid&quot;&gt;continuation&lt;/a&gt; seemed to ignore the primer and just started cycling through music I can only describe as &amp;quot;movie soundtrack&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Magnetic Rag&lt;ul&gt;
&lt;li&gt;The &lt;a href=&quot;https://log.schemescape.com/posts/machine-learning/../../assets/music-generation/mt-continuation-magnetic-1.mid&quot;&gt;first continuation&lt;/a&gt; was short, but rag-like!&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;https://log.schemescape.com/posts/machine-learning/../../assets/music-generation/mt-continuation-magnetic-2.mid&quot;&gt;second continuation&lt;/a&gt; was similarly short, but promising&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;https://log.schemescape.com/posts/machine-learning/../../assets/music-generation/mt-continuation-magnetic-3.mid&quot;&gt;third continuation&lt;/a&gt; was much longer, but... bad&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;accompaniment&quot;&gt;Accompaniment&lt;/h2&gt;
&lt;p&gt;Out of curiosity, I also tried generating an accompaniment (based on a monophonic melody that consists of the highest non-overlapping notes in the cropped MIDIs from the last section):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://log.schemescape.com/posts/machine-learning/../../assets/music-generation/mt-accompaniment-magnetic.mid&quot;&gt;Magnetic Rag accompaniment&lt;/a&gt;: this was a baroquely ornamented mix of classical and blues&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;reflecting-on-pre-trained-models&quot;&gt;Reflecting on pre-trained models&lt;/h2&gt;
&lt;p&gt;Unsurprisingly, the generic pre-trained models I used, while undoubtedly impressive, seem best suited for exploration and amusement, rather than producing something focused on a particular genre.&lt;/p&gt;
&lt;p&gt;I suspect that the best path forward for this experiment is to train a new ragtime-focused model on a corpus of typical ragtime MIDIs. As noted earlier, it&amp;#39;s possible I won&amp;#39;t be able to find either a large enough corpus or enough compute power to produce a reasonable model, but if I &lt;em&gt;do&lt;/em&gt; succeed, I think the results will be more consistently rag-like.&lt;/p&gt;
</content>
</entry>
</feed>
