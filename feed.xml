<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Schemescape</title>
<id>https://log.schemescape.com/</id>
<link rel="self" href="https://log.schemescape.com/feed.xml"/>
<link rel="alternate" href="https://log.schemescape.com/"/>
<author>
<name>Schemescape</name>
</author>
<updated>2024-06-25T05:06:36.885Z</updated>

<entry>
<title>100 programming languages in... more than 100 days</title>
<id>https://log.schemescape.com/posts/programming-languages/100-languages-10.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/programming-languages/100-languages-10.html"/>
<updated>2024-06-24T00:00:00.000Z</updated>
<summary type="text">I made it about half of the way to my goal of writing code in 100 different programming languages in 100 days.</summary>
<content type="html">&lt;p&gt;In March, I set a lofty goal to &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/100-languages.html&quot;&gt;solve 100 Project Euler problems using 100 different programming languages, all within 100 days&lt;/a&gt;. Slightly over 100 days later, I&amp;#39;ll admit that &lt;strong&gt;I only made it &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/100-languages-9.html&quot;&gt;slightly beyond&lt;/a&gt; &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/50-different-languages.html&quot;&gt;50&lt;/a&gt;&lt;/strong&gt;, although that&amp;#39;s not too bad considering that I quietly set this project aside a few weeks ago.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I&amp;#39;m not abandoning this effort, but I am definitely taking a break from it.&lt;/strong&gt; And I&amp;#39;m not setting it aside because it isn&amp;#39;t fun (though I do wonder if it&amp;#39;s &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/../misc/my-hobby-is-bikeshedding.html&quot;&gt;a good use of my time&lt;/a&gt;). At the moment, I just have more important and interesting things to attend to.&lt;/p&gt;
&lt;h1 id=&quot;conquests&quot;&gt;Conquests&lt;/h1&gt;
&lt;p&gt;For the record, I&amp;#39;d like to state that, so far, &lt;strong&gt;I&amp;#39;m most proud of the following solutions&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jaredkrinke/100-languages/blob/main/src/p1.sic1&quot;&gt;SIC-1 Assembly Language&lt;/a&gt;, because it was hard to cram into 253 bytes&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jaredkrinke/100-languages/blob/main/src/p2.lisp&quot;&gt;SectorLISP&lt;/a&gt;, because I had to implement arithmetic &lt;em&gt;twice&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jaredkrinke/100-languages/blob/main/src/p17.v&quot;&gt;Verilog&lt;/a&gt;, because hardware&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jaredkrinke/100-languages/blob/main/src/p19.exa&quot;&gt;EXA&lt;/a&gt;, because &lt;a href=&quot;https://www.zachtronics.com/exapunks/&quot;&gt;Exapunks&lt;/a&gt; is a great game&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jaredkrinke/100-languages/blob/main/src/p26.asm&quot;&gt;x86 boot sector&lt;/a&gt;, because I didn&amp;#39;t want SectorLISP and SectorForth to have all the fun&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jaredkrinke/100-languages/blob/main/src/p34-scaled.png&quot;&gt;Piet&lt;/a&gt;, because coding in 2D, using pixels, was hard&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jaredkrinke/100-languages/blob/main/src/p54.ts&quot;&gt;TypeScript&amp;#39;s type system&lt;/a&gt;, because I wanted to see if it was possible (see &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/extreme-typing-in-typescript.html&quot;&gt;blog post&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;and-a-few-stragglers&quot;&gt;And a few stragglers&lt;/h1&gt;
&lt;p&gt;With all that said, there are a couple of languages I haven&amp;#39;t yet mentioned on here:&lt;/p&gt;
&lt;h2 id=&quot;haxe&quot;&gt;Haxe&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I like the idea of a portable language&lt;/li&gt;
&lt;li&gt;But I didn&amp;#39;t like the Java-like levels of ceremonial keywords/classes&lt;/li&gt;
&lt;li&gt;Having said that, I prefer Haxe&amp;#39;s familiar syntax and conveniences over something mroe minimal, like &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/100-languages-9.html#wax&quot;&gt;wax&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;k&quot;&gt;K&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/JohnEarnest/ok&quot;&gt;oK&lt;/a&gt; is literally the only version of K I could even find&lt;/li&gt;
&lt;li&gt;oK also only had the only detailed documentation of K that I could find&lt;/li&gt;
&lt;li&gt;I&amp;#39;m compelled to contrast this with &lt;a href=&quot;https://en.wikipedia.org/wiki/J_(programming_language)&quot;&gt;J&lt;/a&gt; (another array language), which is open source and has plenty of documentation&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;thats-all&quot;&gt;That&amp;#39;s all&lt;/h1&gt;
&lt;p&gt;That was a short update, but it feels good to tie up those loose ends.&lt;/p&gt;
</content>
</entry>
<entry>
<title>Extreme Typing in TypeScript</title>
<id>https://log.schemescape.com/posts/programming-languages/extreme-typing-in-typescript.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/programming-languages/extreme-typing-in-typescript.html"/>
<updated>2024-06-05T00:00:00.000Z</updated>
<summary type="text">Solving a Project Euler problem entirely within TypeScript&apos;s type system. Because I couldn&apos;t not do it!</summary>
<content type="html">&lt;p&gt;&lt;strong&gt;TypeScript brought sanity to the JavaScript world&lt;/strong&gt;, standardizing how JavaScript APIs are documented. TypeScript&amp;#39;s gradual typing system has shown that &lt;strong&gt;a little bit of typing can go a long way&lt;/strong&gt; towards increasing productivity.&lt;/p&gt;
&lt;p&gt;So if &lt;em&gt;a little bit&lt;/em&gt; of typing is a good thing, then &lt;em&gt;more&lt;/em&gt; must be better, right?&lt;/p&gt;
&lt;p&gt;Welcome to &lt;strong&gt;Extreme Typing&lt;/strong&gt;.&lt;/p&gt;
&lt;h1 id=&quot;extreme-typing&quot;&gt;Extreme Typing&lt;/h1&gt;
&lt;p&gt;Extreme Typing is about &lt;strong&gt;using the type system available to you &lt;em&gt;to the fullest extent permitted by law&lt;/em&gt;&lt;/strong&gt;. In fact, it&amp;#39;s about &lt;em&gt;only&lt;/em&gt; using the type system. For everything.&lt;/p&gt;
&lt;p&gt;In the context of TypeScript, this means that you can finally enjoy the modern wonder of TypeScript &lt;strong&gt;without ever having to deal with that crusty, clumsy, old language called JavaScript&lt;/strong&gt;. Yes, today in TypeScript, it is possible to do the following &lt;em&gt;without ever having to touch JavaScript&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Perform arithmetic&lt;/li&gt;
&lt;li&gt;Apply logic&lt;/li&gt;
&lt;li&gt;Parse strings&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;extremely-typed-poker&quot;&gt;Extremely typed poker&lt;/h1&gt;
&lt;p&gt;For my most recent &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/100-languages.html&quot;&gt;programming language experiment&lt;/a&gt;, I tackled &lt;a href=&quot;https://projecteuler.net/problem=54&quot;&gt;Project Euler problem 54&lt;/a&gt; (&amp;quot;Poker Hands&amp;quot;), entirely from the comfort of TypeScript&amp;#39;s type system.&lt;/p&gt;
&lt;p&gt;The problem encodes 1,000 rounds of Poker and the goal is to determine how many hands the first player wins (following the rules of Poker). Here&amp;#39;s a line of sample input:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;2D 9C AS AH AC 3D 6D 7D TD QD
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Separating the two hands and moving the cards around, this yields &lt;code&gt;AS AH AC 9C 2D&lt;/code&gt; vs. &lt;code&gt;QD TD 7D 6D 3D&lt;/code&gt;, i.e. the first player has 3 aces and the second player has a flush. The second player wins.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So how can we decode and evaluate 1,000 rounds of Poker using only types?&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;I settled on the following process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Split text into lines&lt;/li&gt;
&lt;li&gt;Parse all 10 cards on each line&lt;/li&gt;
&lt;li&gt;Group cards by rank and suit&lt;/li&gt;
&lt;li&gt;Determine the (ahem) type (and tie-breakers) of each poker hand&lt;/li&gt;
&lt;li&gt;Compare the two hands to identify the winner&lt;/li&gt;
&lt;li&gt;Count the number of first player wins&lt;/li&gt;
&lt;li&gt;Finally, batch the input to avoid tripping TypeScript&amp;#39;s recursion depth limits&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Details follow.&lt;/p&gt;
&lt;h2 id=&quot;splitting-lines&quot;&gt;Splitting lines&lt;/h2&gt;
&lt;p&gt;Apparently, &lt;strong&gt;it is now possible to parse strings within TypeScript&amp;#39;s type system&lt;/strong&gt;. Given that it&amp;#39;s &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-5.html#tail-recursion-elimination-on-conditional-types&quot;&gt;mentioned in the official docs&lt;/a&gt;, I assume it&amp;#39;s supported. Note that I don&amp;#39;t fully understand the limitations of this approach. It&amp;#39;s certainly not magic.&lt;/p&gt;
&lt;p&gt;In my case, I knew ahead of time the set of all possible characters in the input file, so I was able to define a type that is the union of all possible characters:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RanksDescending&lt;/span&gt; = [&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;A&amp;quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;K&amp;quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;Q&amp;quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;J&amp;quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;T&amp;quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;9&amp;quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;8&amp;quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;7&amp;quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;6&amp;quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;5&amp;quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;4&amp;quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;];
&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Rank&lt;/span&gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;RanksDescending&lt;/span&gt;[&lt;span class=&quot;hljs-built_in&quot;&gt;number&lt;/span&gt;];
&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Suit&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;C&amp;quot;&lt;/span&gt; | &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;D&amp;quot;&lt;/span&gt; | &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;H&amp;quot;&lt;/span&gt; | &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;S&amp;quot;&lt;/span&gt;;

&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;NonNewline&lt;/span&gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;Rank&lt;/span&gt; | &lt;span class=&quot;hljs-title class_&quot;&gt;Suit&lt;/span&gt; | &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Character&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt; | &lt;span class=&quot;hljs-title class_&quot;&gt;NonNewline&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Armed with these types, it&amp;#39;s possible to &lt;strong&gt;accumulate strings character-by-character, breaking on &lt;code&gt;\n&lt;/code&gt;&lt;/strong&gt; (and using tail calls, as described in the previous link):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SplitLines&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;Input&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;Line&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;Output&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;[]&amp;gt; =
    &lt;span class=&quot;hljs-title class_&quot;&gt;Input&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
        ? [...&lt;span class=&quot;hljs-title class_&quot;&gt;Output&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;Line&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;// Done reading input; add final line&lt;/span&gt;
        : &lt;span class=&quot;hljs-title class_&quot;&gt;Input&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;`&lt;span class=&quot;hljs-subst&quot;&gt;${infer C &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; Character}&lt;/span&gt;&lt;span class=&quot;hljs-subst&quot;&gt;${infer Rest}&lt;/span&gt;`&lt;/span&gt;
            ? C &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;NonNewline&lt;/span&gt;
                ? &lt;span class=&quot;hljs-title class_&quot;&gt;SplitLines&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;Rest&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;`&lt;span class=&quot;hljs-subst&quot;&gt;${Line}&lt;/span&gt;&lt;span class=&quot;hljs-subst&quot;&gt;${C}&lt;/span&gt;`&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;Output&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-comment&quot;&gt;// Not a newline: accumulate into Line&lt;/span&gt;
                : &lt;span class=&quot;hljs-title class_&quot;&gt;SplitLines&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;Rest&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, [...&lt;span class=&quot;hljs-title class_&quot;&gt;Output&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;Line&lt;/span&gt;]&amp;gt; &lt;span class=&quot;hljs-comment&quot;&gt;// Newline: reset accumulator; add Line to Output&lt;/span&gt;
            : &lt;span class=&quot;hljs-built_in&quot;&gt;never&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each line can then be processed individually.&lt;/p&gt;
&lt;h2 id=&quot;parsing-cards&quot;&gt;Parsing cards&lt;/h2&gt;
&lt;p&gt;Parsing cards &lt;strong&gt;arguably uses TypeScript features as intended&lt;/strong&gt; (to read in two characters):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Card&lt;/span&gt; = { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Rank&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;suit&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Suit&lt;/span&gt; };
...
&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ParseCard&lt;/span&gt;&amp;lt;S &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;&amp;gt; =
    S &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;`&lt;span class=&quot;hljs-subst&quot;&gt;${infer CardRank &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; Rank}&lt;/span&gt;&lt;span class=&quot;hljs-subst&quot;&gt;${infer CardSuit &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; Suit}&lt;/span&gt;`&lt;/span&gt;
        ? { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;CardRank&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;suit&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;CardSuit&lt;/span&gt; }
        : &lt;span class=&quot;hljs-built_in&quot;&gt;never&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I let the next two steps leak into my &amp;quot;parse lines&amp;quot; code, so ignore &lt;code&gt;DataFromHand&lt;/code&gt; and &lt;code&gt;EvaluationFromData&lt;/code&gt; in this code to read 10 cards (5 for each hand):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ProcessLine&lt;/span&gt;&amp;lt;L &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;&amp;gt; =
    L &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;`&lt;span class=&quot;hljs-subst&quot;&gt;${infer A1}&lt;/span&gt; &lt;span class=&quot;hljs-subst&quot;&gt;${infer A2}&lt;/span&gt; &lt;span class=&quot;hljs-subst&quot;&gt;${infer A3}&lt;/span&gt; &lt;span class=&quot;hljs-subst&quot;&gt;${infer A4}&lt;/span&gt; &lt;span class=&quot;hljs-subst&quot;&gt;${infer A5}&lt;/span&gt; &lt;span class=&quot;hljs-subst&quot;&gt;${infer B1}&lt;/span&gt; &lt;span class=&quot;hljs-subst&quot;&gt;${infer B2}&lt;/span&gt; &lt;span class=&quot;hljs-subst&quot;&gt;${infer B3}&lt;/span&gt; &lt;span class=&quot;hljs-subst&quot;&gt;${infer B4}&lt;/span&gt; &lt;span class=&quot;hljs-subst&quot;&gt;${infer B5}&lt;/span&gt;`&lt;/span&gt;
        ? [
            &lt;span class=&quot;hljs-title class_&quot;&gt;EvaluationFromData&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;DataFromHand&lt;/span&gt;&amp;lt;[&lt;span class=&quot;hljs-title class_&quot;&gt;ParseCard&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-variable constant_&quot;&gt;A1&lt;/span&gt;&amp;gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;ParseCard&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-variable constant_&quot;&gt;A2&lt;/span&gt;&amp;gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;ParseCard&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-variable constant_&quot;&gt;A3&lt;/span&gt;&amp;gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;ParseCard&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-variable constant_&quot;&gt;A4&lt;/span&gt;&amp;gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;ParseCard&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-variable constant_&quot;&gt;A5&lt;/span&gt;&amp;gt;]&amp;gt;&amp;gt;,
            &lt;span class=&quot;hljs-title class_&quot;&gt;EvaluationFromData&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;DataFromHand&lt;/span&gt;&amp;lt;[&lt;span class=&quot;hljs-title class_&quot;&gt;ParseCard&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-variable constant_&quot;&gt;B1&lt;/span&gt;&amp;gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;ParseCard&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-variable constant_&quot;&gt;B2&lt;/span&gt;&amp;gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;ParseCard&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-variable constant_&quot;&gt;B3&lt;/span&gt;&amp;gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;ParseCard&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-variable constant_&quot;&gt;B4&lt;/span&gt;&amp;gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;ParseCard&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-variable constant_&quot;&gt;B5&lt;/span&gt;&amp;gt;]&amp;gt;&amp;gt;,
        ]
        : &lt;span class=&quot;hljs-built_in&quot;&gt;never&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With that, parsing is complete: each line is now two hands of five cards.&lt;/p&gt;
&lt;h2 id=&quot;grouping-cards&quot;&gt;Grouping cards&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Grouping cards by rank and suit got a bit hairy&lt;/strong&gt;. In fact, I had to rewrite the &amp;quot;is this a flush?&amp;quot; check a few times because certain approaches would silently fail when referenced from other types (it&amp;#39;s possible these are bugs in the TypeScript compiler, but opening an &amp;quot;I can&amp;#39;t run poker in the type system&amp;quot; bug would likely be a waste of everyone&amp;#39;s time).&lt;/p&gt;
&lt;p&gt;Regardless, my approach was to &lt;strong&gt;walk an ordered array of ranks and then count cards matching that rank&lt;/strong&gt;, removing &amp;quot;empty&amp;quot; (count of zero) ranks at the end. This involved a few utility types for selecting (&amp;quot;keeping&amp;quot;) items from an array and counting the number of items in an array (ignore the unary number part--I&amp;#39;ll get to that in due time).&lt;/p&gt;
&lt;p&gt;Using the examples hands from earlier, the result is something like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First player: 3 aces, 1 nine, 1 two&lt;/li&gt;
&lt;li&gt;Second player: 1 queen, 1 ten, 1 seven, 1 six, 1 three&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Relevant code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Equal&lt;/span&gt;&amp;lt;A, B&amp;gt; = A &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; B ? B &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; A ? &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; : &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; : &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;
...
&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayLength&lt;/span&gt;&amp;lt;A &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;[]&amp;gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;UnaryToNumber&lt;/span&gt;&amp;lt;A&amp;gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayKeep&lt;/span&gt;&amp;lt;A &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;[], &lt;span class=&quot;hljs-title class_&quot;&gt;Item&lt;/span&gt;&amp;gt; =
    A &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; [infer &lt;span class=&quot;hljs-title class_&quot;&gt;First&lt;/span&gt;, ...infer &lt;span class=&quot;hljs-title class_&quot;&gt;Rest&lt;/span&gt;]
        ? &lt;span class=&quot;hljs-title class_&quot;&gt;First&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Item&lt;/span&gt;
            ? [&lt;span class=&quot;hljs-title class_&quot;&gt;First&lt;/span&gt;, ...&lt;span class=&quot;hljs-title class_&quot;&gt;ArrayKeep&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;Rest&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;Item&lt;/span&gt;&amp;gt;]
            : &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayKeep&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;Rest&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;Item&lt;/span&gt;&amp;gt;
        : [];
...
&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Hand&lt;/span&gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;Card&lt;/span&gt;[];
&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RankCount&lt;/span&gt; = { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Rank&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;count&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;number&lt;/span&gt; };
&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Data&lt;/span&gt; = { &lt;span class=&quot;hljs-attr&quot;&gt;counts&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;RankCount&lt;/span&gt;[], &lt;span class=&quot;hljs-attr&quot;&gt;flush&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;boolean&lt;/span&gt; };

&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;CountRank&lt;/span&gt;&amp;lt;H &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Hand&lt;/span&gt;, R &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Rank&lt;/span&gt;&amp;gt; = { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: R, &lt;span class=&quot;hljs-attr&quot;&gt;count&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayLength&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;ArrayKeep&lt;/span&gt;&amp;lt;H, &lt;span class=&quot;hljs-title class_&quot;&gt;CardOfRank&lt;/span&gt;&amp;lt;R&amp;gt;&amp;gt;&amp;gt; };
&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;CountRanksRecursive&lt;/span&gt;&amp;lt;H &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Hand&lt;/span&gt;, R &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Rank&lt;/span&gt;[], &lt;span class=&quot;hljs-title class_&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RankCount&lt;/span&gt;[]&amp;gt; = R &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; [infer &lt;span class=&quot;hljs-title class_&quot;&gt;First&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Rank&lt;/span&gt;, ...infer &lt;span class=&quot;hljs-title class_&quot;&gt;Rest&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Rank&lt;/span&gt;[]] ? &lt;span class=&quot;hljs-title class_&quot;&gt;CountRanksRecursive&lt;/span&gt;&amp;lt;H, &lt;span class=&quot;hljs-title class_&quot;&gt;Rest&lt;/span&gt;, [...&lt;span class=&quot;hljs-title class_&quot;&gt;Result&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;CountRank&lt;/span&gt;&amp;lt;H, &lt;span class=&quot;hljs-title class_&quot;&gt;First&lt;/span&gt;&amp;gt;]&amp;gt; : &lt;span class=&quot;hljs-title class_&quot;&gt;Result&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;CountRanks&lt;/span&gt;&amp;lt;H &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Hand&lt;/span&gt;&amp;gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;CountRanksRecursive&lt;/span&gt;&amp;lt;H, &lt;span class=&quot;hljs-title class_&quot;&gt;RanksDescending&lt;/span&gt;, []&amp;gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;SortedRankCounts&lt;/span&gt;&amp;lt;H &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Hand&lt;/span&gt;&amp;gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayKeep&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;CountRanks&lt;/span&gt;&amp;lt;H&amp;gt;, { &lt;span class=&quot;hljs-attr&quot;&gt;count&lt;/span&gt;: (&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; | &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; | &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; | &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;) }&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Why &amp;quot;keep&amp;quot; counts of 1 through 4 instead of removing counts of 0? Because this approach worked and removing zeroes didn&amp;#39;t. &lt;strong&gt;I don&amp;#39;t know why&lt;/strong&gt; (especially since it worked when used directly--just not when referenced transitively).&lt;/p&gt;
&lt;p&gt;Next, I also needed to track whether a hand was a flush or not (N.B. checking all five cards&amp;#39; suits for equality also didn&amp;#39;t work unless directly referenced--still no idea why):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Or&lt;/span&gt;&amp;lt;A, B&amp;gt; = A &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; ? &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; : B &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; ? &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; : &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Or4&lt;/span&gt;&amp;lt;A, B, C, D&amp;gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;Or&lt;/span&gt;&amp;lt;A, &lt;span class=&quot;hljs-title class_&quot;&gt;Or&lt;/span&gt;&amp;lt;B, &lt;span class=&quot;hljs-title class_&quot;&gt;Or&lt;/span&gt;&amp;lt;C, D&amp;gt;&amp;gt;&amp;gt;;
...
&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;FlushOfSuit&lt;/span&gt;&amp;lt;H &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Hand&lt;/span&gt;, S &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Suit&lt;/span&gt;&amp;gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;Equal&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayLength&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;ArrayKeep&lt;/span&gt;&amp;lt;H, { &lt;span class=&quot;hljs-attr&quot;&gt;suit&lt;/span&gt;: S }&amp;gt;&amp;gt;&amp;gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Flush&lt;/span&gt;&amp;lt;H &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Hand&lt;/span&gt;&amp;gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;Or4&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;FlushOfSuit&lt;/span&gt;&amp;lt;H, &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;C&amp;quot;&lt;/span&gt;&amp;gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;FlushOfSuit&lt;/span&gt;&amp;lt;H, &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;S&amp;quot;&lt;/span&gt;&amp;gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;FlushOfSuit&lt;/span&gt;&amp;lt;H, &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;H&amp;quot;&lt;/span&gt;&amp;gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;FlushOfSuit&lt;/span&gt;&amp;lt;H, &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;D&amp;quot;&lt;/span&gt;&amp;gt;&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Final output type for this stage:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;DataFromHand&lt;/span&gt;&amp;lt;H &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Hand&lt;/span&gt;&amp;gt; = { &lt;span class=&quot;hljs-attr&quot;&gt;counts&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;SortedRankCounts&lt;/span&gt;&amp;lt;H&amp;gt;, &lt;span class=&quot;hljs-attr&quot;&gt;flush&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;Flush&lt;/span&gt;&amp;lt;H&amp;gt; };
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;analyzing-hands&quot;&gt;Analyzing hands&lt;/h2&gt;
&lt;p&gt;Armed with the sorted ranks and counts of cards (along with a flag indicating a flush), it was possible to start identifying the &amp;quot;types&amp;quot; (pun intended) of poker hands.&lt;/p&gt;
&lt;p&gt;Here are a few simple examples that just see how many ranks have a count of N:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;And&lt;/span&gt;&amp;lt;A, B&amp;gt; = A &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; ? B &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; ? &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; : &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; : &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;
...
&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RankCountOfCount&lt;/span&gt;&amp;lt;C&amp;gt; = { &lt;span class=&quot;hljs-attr&quot;&gt;count&lt;/span&gt;: C };

&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;IsFourOf&lt;/span&gt;AKind&amp;lt;D &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Data&lt;/span&gt;&amp;gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;Equal&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayLength&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;ArrayKeep&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;RankCountsFromData&lt;/span&gt;&amp;lt;D&amp;gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;RankCountOfCount&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;IsTwoPair&lt;/span&gt;&amp;lt;D &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Data&lt;/span&gt;&amp;gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;Equal&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayLength&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;ArrayKeep&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;RankCountsFromData&lt;/span&gt;&amp;lt;D&amp;gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;RankCountOfCount&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;;

&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HasThreeOf&lt;/span&gt;AKind&amp;lt;D &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Data&lt;/span&gt;&amp;gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;Equal&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayLength&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;ArrayKeep&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;RankCountsFromData&lt;/span&gt;&amp;lt;D&amp;gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;RankCountOfCount&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HasOnePair&lt;/span&gt;&amp;lt;D &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Data&lt;/span&gt;&amp;gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;Equal&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayLength&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;ArrayKeep&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;RankCountsFromData&lt;/span&gt;&amp;lt;D&amp;gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;RankCountOfCount&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;;

&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;IsFullHouse&lt;/span&gt;&amp;lt;D &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Data&lt;/span&gt;&amp;gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;And&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;HasThreeOf&lt;/span&gt;AKind&amp;lt;D&amp;gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;HasOnePair&lt;/span&gt;&amp;lt;D&amp;gt;&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Identifying straights seemed tricky, so I just hard-coded them all:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;IsStraight&lt;/span&gt;&amp;lt;D &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Data&lt;/span&gt;&amp;gt; =
    D &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; { &lt;span class=&quot;hljs-attr&quot;&gt;counts&lt;/span&gt;: infer &lt;span class=&quot;hljs-title class_&quot;&gt;DataCounts&lt;/span&gt; }
        ? &lt;span class=&quot;hljs-title class_&quot;&gt;DataCounts&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; [{ &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;A&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;5&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;4&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt; }] ? &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
        : &lt;span class=&quot;hljs-title class_&quot;&gt;DataCounts&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; [{ &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;6&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;5&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;4&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt; }] ? &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
        : &lt;span class=&quot;hljs-title class_&quot;&gt;DataCounts&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; [{ &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;7&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;6&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;5&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;4&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt; }] ? &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
        : &lt;span class=&quot;hljs-title class_&quot;&gt;DataCounts&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; [{ &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;8&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;7&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;6&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;5&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;4&amp;quot;&lt;/span&gt; }] ? &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
        : &lt;span class=&quot;hljs-title class_&quot;&gt;DataCounts&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; [{ &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;9&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;8&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;7&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;6&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;5&amp;quot;&lt;/span&gt; }] ? &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
        : &lt;span class=&quot;hljs-title class_&quot;&gt;DataCounts&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; [{ &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;T&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;9&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;8&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;7&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;6&amp;quot;&lt;/span&gt; }] ? &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
        : &lt;span class=&quot;hljs-title class_&quot;&gt;DataCounts&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; [{ &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;J&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;T&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;9&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;8&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;7&amp;quot;&lt;/span&gt; }] ? &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
        : &lt;span class=&quot;hljs-title class_&quot;&gt;DataCounts&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; [{ &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;Q&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;J&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;T&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;9&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;8&amp;quot;&lt;/span&gt; }] ? &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
        : &lt;span class=&quot;hljs-title class_&quot;&gt;DataCounts&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; [{ &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;K&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;Q&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;J&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;T&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;9&amp;quot;&lt;/span&gt; }] ? &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
        : &lt;span class=&quot;hljs-title class_&quot;&gt;DataCounts&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; [{ &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;A&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;K&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;Q&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;J&amp;quot;&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;T&amp;quot;&lt;/span&gt; }] ? &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
        : &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;
    : &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But I also needed to supply tie-breakers, so here are some utilities for retrieving the (previously sorted) rank(s) of cardinality N:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RankFor&lt;/span&gt;NOfAKind&amp;lt;D &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Data&lt;/span&gt;, N &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;number&lt;/span&gt;&amp;gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;ArrayKeep&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;RankCountsFromData&lt;/span&gt;&amp;lt;D&amp;gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;RankCountOfCount&lt;/span&gt;&amp;lt;N&amp;gt;&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; [{ &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: infer R &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Rank&lt;/span&gt; }] ? R : &lt;span class=&quot;hljs-built_in&quot;&gt;never&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RanksForNsOf&lt;/span&gt;AKind&amp;lt;D &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Data&lt;/span&gt;, N &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;number&lt;/span&gt;&amp;gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;RanksFromRankCounts&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;ArrayKeep&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;RankCountsFromData&lt;/span&gt;&amp;lt;D&amp;gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;RankCountOfCount&lt;/span&gt;&amp;lt;N&amp;gt;&amp;gt;&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And I needed to handle the fact that aces can be low &lt;em&gt;or&lt;/em&gt; high in a straight:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;If&lt;/span&gt;&amp;lt;C, T, F&amp;gt; = C &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt; ? T : F;
...
&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RankForStraight&lt;/span&gt;&amp;lt;D &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Data&lt;/span&gt;&amp;gt; =
    D &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; { &lt;span class=&quot;hljs-attr&quot;&gt;counts&lt;/span&gt;: [{ &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: infer &lt;span class=&quot;hljs-title class_&quot;&gt;FirstRank&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Rank&lt;/span&gt; }, { &lt;span class=&quot;hljs-attr&quot;&gt;rank&lt;/span&gt;: infer &lt;span class=&quot;hljs-title class_&quot;&gt;SecondRank&lt;/span&gt; }, ...infer &lt;span class=&quot;hljs-title class_&quot;&gt;Rest&lt;/span&gt;] }
        &lt;span class=&quot;hljs-comment&quot;&gt;// Note the special case for straights that *begin* with an ace&lt;/span&gt;
        ? &lt;span class=&quot;hljs-title class_&quot;&gt;If&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;And&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;Equal&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;FirstRank&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;A&amp;quot;&lt;/span&gt;&amp;gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;Equal&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;SecondRank&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;5&amp;quot;&lt;/span&gt;&amp;gt;&amp;gt;, &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;5&amp;quot;&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;FirstRank&lt;/span&gt;&amp;gt;
        : &lt;span class=&quot;hljs-built_in&quot;&gt;never&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, here&amp;#39;s the closest to a lookup table I was able to create:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;EvaluationFromData&lt;/span&gt;&amp;lt;D &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Data&lt;/span&gt;&amp;gt; =
    &lt;span class=&quot;hljs-title class_&quot;&gt;If&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;IsStraightFlush&lt;/span&gt;&amp;lt;D&amp;gt;,  { &lt;span class=&quot;hljs-attr&quot;&gt;handType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;straightFlush&amp;quot;&lt;/span&gt;,    &lt;span class=&quot;hljs-attr&quot;&gt;tieBreakers&lt;/span&gt;: [&lt;span class=&quot;hljs-title class_&quot;&gt;RankForStraight&lt;/span&gt;&amp;lt;D&amp;gt;] },
    &lt;span class=&quot;hljs-title class_&quot;&gt;If&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;IsFourOf&lt;/span&gt;AKind&amp;lt;D&amp;gt;,    { &lt;span class=&quot;hljs-attr&quot;&gt;handType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;fourOfAKind&amp;quot;&lt;/span&gt;,      &lt;span class=&quot;hljs-attr&quot;&gt;tieBreakers&lt;/span&gt;: [&lt;span class=&quot;hljs-title class_&quot;&gt;RankFor&lt;/span&gt;NOfAKind&amp;lt;D, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&amp;gt;] },
    &lt;span class=&quot;hljs-title class_&quot;&gt;If&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;IsFullHouse&lt;/span&gt;&amp;lt;D&amp;gt;,      { &lt;span class=&quot;hljs-attr&quot;&gt;handType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;fullHouse&amp;quot;&lt;/span&gt;,        &lt;span class=&quot;hljs-attr&quot;&gt;tieBreakers&lt;/span&gt;: [&lt;span class=&quot;hljs-title class_&quot;&gt;RankFor&lt;/span&gt;NOfAKind&amp;lt;D, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&amp;gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;RankFor&lt;/span&gt;NOfAKind&amp;lt;D, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&amp;gt;] },
    &lt;span class=&quot;hljs-title class_&quot;&gt;If&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;IsFlush&lt;/span&gt;&amp;lt;D&amp;gt;,          { &lt;span class=&quot;hljs-attr&quot;&gt;handType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;flush&amp;quot;&lt;/span&gt;,            &lt;span class=&quot;hljs-attr&quot;&gt;tieBreakers&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;RanksForNsOf&lt;/span&gt;AKind&amp;lt;D, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&amp;gt; },
    &lt;span class=&quot;hljs-title class_&quot;&gt;If&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;IsStraight&lt;/span&gt;&amp;lt;D&amp;gt;,       { &lt;span class=&quot;hljs-attr&quot;&gt;handType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;straight&amp;quot;&lt;/span&gt;,         &lt;span class=&quot;hljs-attr&quot;&gt;tieBreakers&lt;/span&gt;: [&lt;span class=&quot;hljs-title class_&quot;&gt;RankForStraight&lt;/span&gt;&amp;lt;D&amp;gt;] },
    &lt;span class=&quot;hljs-title class_&quot;&gt;If&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;HasThreeOf&lt;/span&gt;AKind&amp;lt;D&amp;gt;,  { &lt;span class=&quot;hljs-attr&quot;&gt;handType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;threeOfAKind&amp;quot;&lt;/span&gt;,     &lt;span class=&quot;hljs-attr&quot;&gt;tieBreakers&lt;/span&gt;: [&lt;span class=&quot;hljs-title class_&quot;&gt;RankFor&lt;/span&gt;NOfAKind&amp;lt;D, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&amp;gt;] },
    &lt;span class=&quot;hljs-title class_&quot;&gt;If&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;IsTwoPair&lt;/span&gt;&amp;lt;D&amp;gt;,        { &lt;span class=&quot;hljs-attr&quot;&gt;handType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;twoPair&amp;quot;&lt;/span&gt;,          &lt;span class=&quot;hljs-attr&quot;&gt;tieBreakers&lt;/span&gt;: [...&lt;span class=&quot;hljs-title class_&quot;&gt;RanksForNsOf&lt;/span&gt;AKind&amp;lt;D, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&amp;gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;RankFor&lt;/span&gt;NOfAKind&amp;lt;D, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&amp;gt;] },
    &lt;span class=&quot;hljs-title class_&quot;&gt;If&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;HasOnePair&lt;/span&gt;&amp;lt;D&amp;gt;,       { &lt;span class=&quot;hljs-attr&quot;&gt;handType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;pair&amp;quot;&lt;/span&gt;,             &lt;span class=&quot;hljs-attr&quot;&gt;tieBreakers&lt;/span&gt;: [&lt;span class=&quot;hljs-title class_&quot;&gt;RankFor&lt;/span&gt;NOfAKind&amp;lt;D, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&amp;gt;, ...&lt;span class=&quot;hljs-title class_&quot;&gt;RanksForNsOf&lt;/span&gt;AKind&amp;lt;D, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&amp;gt;] },
    &lt;span class=&quot;hljs-comment&quot;&gt;/* High card */&lt;/span&gt;         { &lt;span class=&quot;hljs-attr&quot;&gt;handType&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;highCard&amp;quot;&lt;/span&gt;,         &lt;span class=&quot;hljs-attr&quot;&gt;tieBreakers&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;RanksForNsOf&lt;/span&gt;AKind&amp;lt;D, &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&amp;gt; }&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output of this stage is the &amp;quot;type&amp;quot; of the hand (two pair, flush, high card, etc.) and any tie-breakers that might be needed.&lt;/p&gt;
&lt;h2 id=&quot;comparing-hands&quot;&gt;Comparing hands&lt;/h2&gt;
&lt;p&gt;Similar to sorting ranks, both ranks and poker hand &amp;quot;types&amp;quot; are compared relatively by walking the ordered array until a &amp;quot;winner&amp;quot; is found. &lt;strong&gt;Despite sounding very simple, it took an entire page of code&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GreaterRankRecursive&lt;/span&gt;&amp;lt;A &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Rank&lt;/span&gt;, B &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Rank&lt;/span&gt;, R &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Rank&lt;/span&gt;[]&amp;gt; =
    R &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; [infer &lt;span class=&quot;hljs-title class_&quot;&gt;First&lt;/span&gt;, ...infer &lt;span class=&quot;hljs-title class_&quot;&gt;Rest&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Rank&lt;/span&gt;[]]
        ? A &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;First&lt;/span&gt;
            ? B &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;First&lt;/span&gt;
                ? &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;     &lt;span class=&quot;hljs-comment&quot;&gt;// A = B&lt;/span&gt;
                : &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;      &lt;span class=&quot;hljs-comment&quot;&gt;// A &amp;gt; B&lt;/span&gt;
            : B &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;First&lt;/span&gt;
                ? &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;     &lt;span class=&quot;hljs-comment&quot;&gt;// A &amp;lt; B&lt;/span&gt;
                : &lt;span class=&quot;hljs-title class_&quot;&gt;GreaterRankRecursive&lt;/span&gt;&amp;lt;A, B, &lt;span class=&quot;hljs-title class_&quot;&gt;Rest&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-comment&quot;&gt;// Neither A nor B match; try next lower rank&lt;/span&gt;
        : &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Probably should have used `never` here&lt;/span&gt;

&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GreaterRank&lt;/span&gt;&amp;lt;A &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Rank&lt;/span&gt;, B &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Rank&lt;/span&gt;&amp;gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;GreaterRankRecursive&lt;/span&gt;&amp;lt;A, B, &lt;span class=&quot;hljs-title class_&quot;&gt;RanksDescending&lt;/span&gt;&amp;gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;GreaterRanks&lt;/span&gt;&amp;lt;A &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Rank&lt;/span&gt;[], B &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Rank&lt;/span&gt;[]&amp;gt; =
    A &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; [infer ARank &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Rank&lt;/span&gt;, ...infer ARest &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Rank&lt;/span&gt;[]]
        ? B &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; [infer BRank &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Rank&lt;/span&gt;, ...infer BRest &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Rank&lt;/span&gt;[]]
            ? &lt;span class=&quot;hljs-title class_&quot;&gt;If&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;GreaterRank&lt;/span&gt;&amp;lt;ARank, BRank&amp;gt;,
                &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,       &lt;span class=&quot;hljs-comment&quot;&gt;// A &amp;gt; B&lt;/span&gt;
                &lt;span class=&quot;hljs-title class_&quot;&gt;If&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;GreaterRank&lt;/span&gt;&amp;lt;BRank, ARank&amp;gt;,
                    &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,  &lt;span class=&quot;hljs-comment&quot;&gt;// A &amp;lt; B&lt;/span&gt;
                    &lt;span class=&quot;hljs-title class_&quot;&gt;GreaterRanks&lt;/span&gt;&amp;lt;ARest, BRest&amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;hljs-comment&quot;&gt;// A = B&lt;/span&gt;
            : &lt;span class=&quot;hljs-built_in&quot;&gt;never&lt;/span&gt;
        : &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// No more tie-breakers; treat as &amp;quot;not a win for A&amp;quot;&lt;/span&gt;

&lt;span class=&quot;hljs-comment&quot;&gt;// Basically the same as GreaterRankRecursive&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BetterHandType&lt;/span&gt;&amp;lt;A &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HandType&lt;/span&gt;, B &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HandType&lt;/span&gt;, H &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HandType&lt;/span&gt;[]&amp;gt; =
    H &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; [infer &lt;span class=&quot;hljs-title class_&quot;&gt;First&lt;/span&gt;, ...infer &lt;span class=&quot;hljs-title class_&quot;&gt;Rest&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HandType&lt;/span&gt;[]]
        ? A &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;First&lt;/span&gt;
            ? B &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;First&lt;/span&gt;
                ? &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;
                : &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
            : B &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;First&lt;/span&gt;
                ? &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;
                : &lt;span class=&quot;hljs-title class_&quot;&gt;BetterHandType&lt;/span&gt;&amp;lt;A, B, &lt;span class=&quot;hljs-title class_&quot;&gt;Rest&lt;/span&gt;&amp;gt;
        : &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;

&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;BetterEvaluation&lt;/span&gt;&amp;lt;A &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Evaluation&lt;/span&gt;, B &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Evaluation&lt;/span&gt;&amp;gt; =
    A &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; { &lt;span class=&quot;hljs-attr&quot;&gt;handType&lt;/span&gt;: infer &lt;span class=&quot;hljs-variable constant_&quot;&gt;AH&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HandType&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;tieBreakers&lt;/span&gt;: infer &lt;span class=&quot;hljs-variable constant_&quot;&gt;AT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Rank&lt;/span&gt;[] }
        ? B &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; { &lt;span class=&quot;hljs-attr&quot;&gt;handType&lt;/span&gt;: infer &lt;span class=&quot;hljs-variable constant_&quot;&gt;BH&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;HandType&lt;/span&gt;, &lt;span class=&quot;hljs-attr&quot;&gt;tieBreakers&lt;/span&gt;: infer &lt;span class=&quot;hljs-variable constant_&quot;&gt;BT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Rank&lt;/span&gt;[] }
            ? &lt;span class=&quot;hljs-title class_&quot;&gt;If&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;BetterHandType&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-variable constant_&quot;&gt;AH&lt;/span&gt;, &lt;span class=&quot;hljs-variable constant_&quot;&gt;BH&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;HandTypesDescending&lt;/span&gt;&amp;gt;,
                &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;,       &lt;span class=&quot;hljs-comment&quot;&gt;// A has the better hand type&lt;/span&gt;
                &lt;span class=&quot;hljs-title class_&quot;&gt;If&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;BetterHandType&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-variable constant_&quot;&gt;BH&lt;/span&gt;, &lt;span class=&quot;hljs-variable constant_&quot;&gt;AH&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;HandTypesDescending&lt;/span&gt;&amp;gt;,
                    &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;,  &lt;span class=&quot;hljs-comment&quot;&gt;// B has the better hand type&lt;/span&gt;
                    &lt;span class=&quot;hljs-title class_&quot;&gt;GreaterRanks&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-variable constant_&quot;&gt;AT&lt;/span&gt;, &lt;span class=&quot;hljs-variable constant_&quot;&gt;BT&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;hljs-comment&quot;&gt;// Same hand types; compare tie-breakers&lt;/span&gt;
            : &lt;span class=&quot;hljs-built_in&quot;&gt;never&lt;/span&gt;
        : &lt;span class=&quot;hljs-built_in&quot;&gt;never&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;counting-wins&quot;&gt;Counting wins&lt;/h2&gt;
&lt;p&gt;Counting involves numbers, and &lt;strong&gt;I didn&amp;#39;t see an obvious way to perform arithmetic in TypeScript&amp;#39;s type system&lt;/strong&gt;. So I had to (&lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/100-languages-2.html&quot;&gt;once again&lt;/a&gt;) implement my own arithmetic. Fortunately, I was able to simply use a unary encoding based on array length (this works for values up to ~500):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UnaryZero&lt;/span&gt; = [];
&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UnaryNumber&lt;/span&gt; = &lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;[];
&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UnaryToNumber&lt;/span&gt;&amp;lt;T &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UnaryNumber&lt;/span&gt;&amp;gt; = T &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; { &lt;span class=&quot;hljs-attr&quot;&gt;length&lt;/span&gt;: infer L &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;number&lt;/span&gt; } ? L : &lt;span class=&quot;hljs-built_in&quot;&gt;never&lt;/span&gt;;

&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UnaryIncrement&lt;/span&gt;&amp;lt;T &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UnaryNumber&lt;/span&gt;&amp;gt; = [...T, &lt;span class=&quot;hljs-built_in&quot;&gt;any&lt;/span&gt;];
&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UnaryOne&lt;/span&gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;UnaryIncrement&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;UnaryZero&lt;/span&gt;&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I tracked wins in an array of (unary) zeroes (losses) or ones (wins):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ScoreRound&lt;/span&gt;&amp;lt;A &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Evaluation&lt;/span&gt;[]&amp;gt; =
    A &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; [infer &lt;span class=&quot;hljs-title class_&quot;&gt;First&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Evaluation&lt;/span&gt;, infer &lt;span class=&quot;hljs-title class_&quot;&gt;Second&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Evaluation&lt;/span&gt;]
        ? &lt;span class=&quot;hljs-title class_&quot;&gt;If&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;BetterEvaluation&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;First&lt;/span&gt;, &lt;span class=&quot;hljs-title class_&quot;&gt;Second&lt;/span&gt;&amp;gt;,
            &lt;span class=&quot;hljs-title class_&quot;&gt;UnaryOne&lt;/span&gt;,
            &lt;span class=&quot;hljs-title class_&quot;&gt;UnaryZero&lt;/span&gt;&amp;gt;
        : &lt;span class=&quot;hljs-built_in&quot;&gt;never&lt;/span&gt;;

&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ScoreRoundsRecursive&lt;/span&gt;&amp;lt;A &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Evaluation&lt;/span&gt;[][], S &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UnaryNumber&lt;/span&gt;[]&amp;gt; =
    A &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; [infer &lt;span class=&quot;hljs-title class_&quot;&gt;Line&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Evaluation&lt;/span&gt;[], ...infer &lt;span class=&quot;hljs-title class_&quot;&gt;Rest&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Evaluation&lt;/span&gt;[][]]
        ? &lt;span class=&quot;hljs-title class_&quot;&gt;ScoreRoundsRecursive&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;Rest&lt;/span&gt;, [...S, &lt;span class=&quot;hljs-title class_&quot;&gt;ScoreRound&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;Line&lt;/span&gt;&amp;gt;]&amp;gt;
        : S;

&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ScoreRounds&lt;/span&gt;&amp;lt;A &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Evaluation&lt;/span&gt;[][]&amp;gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;ScoreRoundsRecursive&lt;/span&gt;&amp;lt;A, []&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;batching&quot;&gt;Batching&lt;/h2&gt;
&lt;p&gt;Sadly, I wasn&amp;#39;t able to solve the entire problem in one go because &lt;strong&gt;TypeScript (even with tail call elimination) has limits on recursion depth&lt;/strong&gt;. My solution was to process batches of 25 lines at a time (40 batches in total), and then simply sum the sub-scores from each batch.&lt;/p&gt;
&lt;p&gt;N.B. I used JavaScript to split the input file into batches. Sorry! I am a fraud.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UnarySumRecursive&lt;/span&gt;&amp;lt;A &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UnaryNumber&lt;/span&gt;[], S &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UnaryNumber&lt;/span&gt;&amp;gt; =
    A &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; [infer T &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UnaryNumber&lt;/span&gt;, ...infer &lt;span class=&quot;hljs-title class_&quot;&gt;Rest&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UnaryNumber&lt;/span&gt;[]]
        ? &lt;span class=&quot;hljs-title class_&quot;&gt;UnarySumRecursive&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;Rest&lt;/span&gt;, [...T, ...S]&amp;gt;
        : S;

&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UnarySum&lt;/span&gt;&amp;lt;A &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;UnaryNumber&lt;/span&gt;[]&amp;gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;UnarySumRecursive&lt;/span&gt;&amp;lt;A, &lt;span class=&quot;hljs-title class_&quot;&gt;UnaryZero&lt;/span&gt;&amp;gt;;
...
&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;ScoreBlock&lt;/span&gt;&amp;lt;S &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt;&amp;gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;UnarySum&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;ScoreRounds&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;ProcessLines&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;SplitLines&lt;/span&gt;&amp;lt;S, &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, []&amp;gt;&amp;gt;&amp;gt;&amp;gt;;

&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; t1 = &lt;span class=&quot;hljs-title class_&quot;&gt;ScoreBlock&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;8C TS KC 9H 4S 7D 2S 5D 3S AC\n5C AD 5D AC 9C 7C 5H 8D TD KS\n ...&amp;quot;&lt;/span&gt;&amp;gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; t2 = &lt;span class=&quot;hljs-title class_&quot;&gt;ScoreBlock&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;5H 6H 2S KS 3D 5D JD 7H JS 8H\nKH 4H AS JS QS QC TC 6D 7C KS\n ...&amp;quot;&lt;/span&gt;&amp;gt;;
...
&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;CorrectAnswer&lt;/span&gt; = &lt;span class=&quot;hljs-title class_&quot;&gt;UnaryToNumber&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-title class_&quot;&gt;UnarySum&lt;/span&gt;&amp;lt;[t1, t2, ..., t40]&amp;gt;&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the end, I just needed to hover over the &lt;code&gt;CorrectAnswer&lt;/code&gt; type in my editor and (eventually), it showed me the correct answer.&lt;/p&gt;
&lt;h2 id=&quot;on-the-command-line&quot;&gt;On the command line&lt;/h2&gt;
&lt;p&gt;It&amp;#39;s also possible to have &lt;code&gt;tsc&lt;/code&gt; emit the answer by forcing a type-checking error by supplying a known-incorrect value:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;guess&lt;/span&gt;: &lt;span class=&quot;hljs-title class_&quot;&gt;CorrectAnswer&lt;/span&gt; = &lt;span class=&quot;hljs-number&quot;&gt;42&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;// Definitely not correct!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Running &lt;code&gt;tsc&lt;/code&gt; produces the following output (&lt;strong&gt;spoiler alert!&lt;/strong&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;error TS2322: Type &amp;#x27;42&amp;#x27; is not assignable to type &amp;#x27;376&amp;#x27;.
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Extreme Typing: it&amp;#39;s a thing!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jaredkrinke/100-languages/blob/main/src/p54.ts&quot;&gt;Source code for my solution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.learningtypescript.com/articles/extreme-explorations-of-typescripts-type-system&quot;&gt;Extreme Explorations of TypeScript&amp;#39;s Type System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/arielhs/ts-arithmetic&quot;&gt;Type Level Arithmetic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
</entry>
<entry>
<title>Celebrating International Amiga Day with Project Euler</title>
<id>https://log.schemescape.com/posts/retrocomputing/amiga-day-project-euler.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/retrocomputing/amiga-day-project-euler.html"/>
<updated>2024-05-31T00:00:00.000Z</updated>
<summary type="text">Programming on the ultimate retro-futuristic computer: the Amiga 500.</summary>
<content type="html">&lt;p&gt;Today is &lt;strong&gt;&lt;a href=&quot;https://www.lemonamiga.com/forum/viewtopic.php?f=9&amp;amp;t=11833&quot;&gt;International Amiga Day&lt;/a&gt;&lt;/strong&gt;, when retrocomputing enthusiasts are required to boot up the &lt;a href=&quot;https://en.wikipedia.org/wiki/Amiga&quot;&gt;fanciest multimedia computer line to ever fail&lt;/a&gt;. I&amp;#39;m not really qualified to comment on the Amiga since the closest thing I&amp;#39;d used until recently was a &lt;a href=&quot;https://en.wikipedia.org/wiki/Commodore_64&quot;&gt;Commodore 64&lt;/a&gt;, but I won&amp;#39;t let such a trivial matter as &lt;em&gt;not being qualified&lt;/em&gt; stop me from spewing uninformed opinions.&lt;/p&gt;
&lt;h1 id=&quot;amiga&quot;&gt;Amiga&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;I recently acquired an Amiga 500 and I&amp;#39;ve been having some (mostly Type II) fun retrocomputing on it&lt;/strong&gt;. For a platform that launched in the US around the same time as the original Nintendo Entertainment System, the Amiga is impressive! N.B. The Amiga &lt;em&gt;platform&lt;/em&gt; launched with the Amiga 1000, but I&amp;#39;m using a later &lt;em&gt;model&lt;/em&gt;--the Amiga 500.&lt;/p&gt;
&lt;p&gt;Unlike the earlier Commodore 64, the Amiga shipped with a bridge to the future: an &lt;a href=&quot;https://en.wikipedia.org/wiki/RS-232&quot;&gt;RS-232 serial port&lt;/a&gt;. This enables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Copying small files to/from a serial port-equipped modern computer (cf. &lt;a href=&quot;https://ohse.de/uwe/software/lrzsz.html&quot;&gt;lrzsz&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Dialing into Internet-based &lt;a href=&quot;https://en.wikipedia.org/wiki/Bulletin_board_system&quot;&gt;BBSes&lt;/a&gt;, using a modem emulator (cf. &lt;a href=&quot;https://github.com/go4retro/tcpser&quot;&gt;tcpser&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Controlling terminal-mode programs on Linux/BSD-based computers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;With a hard drive, I could theoretically even get on the web&lt;/strong&gt;. Unfortunately, my Amiga 500 only has 1 MB of RAM and no hard drive, so I haven&amp;#39;t gotten beyond single-floppy programs/games yet.&lt;/p&gt;
&lt;h2 id=&quot;amiga-basic&quot;&gt;Amiga Basic&lt;/h2&gt;
&lt;p&gt;But, of course, the most urgent task on my plate is to add another programming language to &lt;a href=&quot;https://log.schemescape.com/posts/retrocomputing/../100-languages/index.html&quot;&gt;the pile&lt;/a&gt;, and this brings me to &lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Amiga_Basic&quot;&gt;Amiga Basic&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Amiga Basic is included on the &amp;quot;extras&amp;quot; disk of Workbench 1.3 (which came with my A500). Similar to Commodore BASIC, it was written by Microsoft and, also similarly, I didn&amp;#39;t enjoy it. Here are my notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There aren&amp;#39;t functions (other than single-line &lt;code&gt;DEF FN&lt;/code&gt; statements which... didn&amp;#39;t work)&lt;/li&gt;
&lt;li&gt;It supports 32-bit arithmetic... except for &lt;code&gt;MOD&lt;/code&gt; (ask me how I know)&lt;/li&gt;
&lt;li&gt;The environment is impressively small at 80 KB&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;https://archive.org/details/Amiga_BASIC_1985_Commodore&quot;&gt;Amiga Basic manual &lt;/a&gt; feels very dated--it spends a lot of time discussing UI that feels obvious to modern users, then moves onto &amp;quot;advanced topics&amp;quot;, and only covers everything else in a reference section&lt;/li&gt;
&lt;li&gt;Thankfully, line numbers aren&amp;#39;t required (as in Commodore BASIC)&lt;/li&gt;
&lt;li&gt;The UI was fairly slow&lt;/li&gt;
&lt;li&gt;The interpreter is annoyingly slow&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Overall, I liked the older BBC BASIC better. &lt;strong&gt;And Turbo Pascal beats all BASICs handily!&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;looking-forward&quot;&gt;Looking forward&lt;/h2&gt;
&lt;p&gt;I&amp;#39;m not precisely sure how much time (and money) I&amp;#39;ll spend investigating the Amiga, but I would really like to get a hard drive so that I sample the true Amiga &lt;em&gt;computer&lt;/em&gt; experience (instead of the game console-esque experience I&amp;#39;ve had thus far).&lt;/p&gt;
&lt;p&gt;If you have any pointers to Amiga resources (or any advice on what to do with an A500), &lt;a href=&quot;mailto:log@schemescape.com&quot;&gt;send me a mail&lt;/a&gt;. Thanks!&lt;/p&gt;
</content>
</entry>
<entry>
<title>Reflections at 50 (programming languages)</title>
<id>https://log.schemescape.com/posts/programming-languages/50-different-languages.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/programming-languages/50-different-languages.html"/>
<updated>2024-05-14T00:00:00.000Z</updated>
<summary type="text">Find out if writing code in 50 different programming languages was a good idea!</summary>
<content type="html">&lt;p&gt;Over the past two months, I&amp;#39;ve &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/../100-languages/index.html&quot;&gt;written code in 50 different programming languages&lt;/a&gt; (with an eventual goal to &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/100-languages.html&quot;&gt;get to 100&lt;/a&gt;). Here are my thoughts thus far.&lt;/p&gt;
&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;
&lt;p&gt;I started this journey because I wanted to &lt;strong&gt;try new programming languages&lt;/strong&gt; in a low-stakes setting. Rather than learn a language in depth, I&amp;#39;m just writing a page of code, &lt;strong&gt;to see what either the programming paradigm or development experience is like&lt;/strong&gt;. Since I&amp;#39;m focused on new (to me) languages/paradigms, the majority of the languages aren&amp;#39;t even in the top 100 programming languages in the &lt;a href=&quot;https://www.tiobe.com/tiobe-index/&quot;&gt;TIOBE Programming Community index&lt;/a&gt;. I&amp;#39;m definitely &lt;em&gt;not&lt;/em&gt; trying to improve my job prospects!&lt;/p&gt;
&lt;h2 id=&quot;positives&quot;&gt;Positives&lt;/h2&gt;
&lt;p&gt;Overall, this experiment has been a success. Prior to starting, I thought I&amp;#39;d &lt;em&gt;already&lt;/em&gt; used a wide variety of programming languages, but &lt;strong&gt;I&amp;#39;d never &lt;em&gt;actually used&lt;/em&gt; an array-based language, and I didn&amp;#39;t even know what concatenative languages were&lt;/strong&gt; (thought I&amp;#39;d briefly heard of Forth)! I&amp;#39;d also never experienced column- or line-based input or written right-to-left text.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you&amp;#39;ve got the time and desire novel programming experiences, this is a worthwhile journey!&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;negatives&quot;&gt;Negatives&lt;/h2&gt;
&lt;p&gt;The last sentence implied it, but &lt;strong&gt;repeatedly starting over from scratch--often in new paradigms--takes time&lt;/strong&gt;. I&amp;#39;d say that on average I spent &lt;em&gt;at least&lt;/em&gt; two or three hours with each language--and often more. Frequently, it was worthwhile, but stumbling through Smalltalk-like UI and syntax felt more tedious than educational, for example.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s not obvious, but &lt;strong&gt;I also spent a fair amount of time discovering, selecting, and occasionally shelving languages&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;the-road-ahead&quot;&gt;The road ahead&lt;/h2&gt;
&lt;p&gt;Additionally, now that I&amp;#39;m 50 languages in, &lt;strong&gt;the novelty is wearing off a bit&lt;/strong&gt;. This is welcome, in that the learning process is less taxing, but I&amp;#39;ll need to ensure this doesn&amp;#39;t just become a slog to 100. If I stop learning and/or enjoying the process, I should quit. &lt;strong&gt;Fifty programming languages is no small feat&lt;/strong&gt;, anyway--though I&amp;#39;ll feel a bit silly having a repository named &amp;quot;100-languages&amp;quot; if I never quite get there.&lt;/p&gt;
&lt;p&gt;Tangentially related: I feel like &lt;strong&gt;there is a distinct possibility that I will end up creating a new programming language&lt;/strong&gt; either during or after this exercise. The world definitely needs another Lisp (or maybe Forth)!&lt;/p&gt;
&lt;h2 id=&quot;languages-by-category&quot;&gt;Languages by category&lt;/h2&gt;
&lt;p&gt;For the record, here is a rough categorization of the languages I&amp;#39;ve used so far (with categories based mostly on &lt;a href=&quot;https://madhadron.com/programming/seven_ur_languages.html&quot;&gt;this article&lt;/a&gt;). Note these classifications are subjective!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Assembly&lt;/strong&gt;: WebAssembly, x86 (&amp;quot;real&amp;quot;/16-bit), Uxntal&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Imperative&lt;/strong&gt;: Fortran, COBOL, Perl, WebGPU Shading Language, Awk, Commodore BASIC, BBC BASIC, TCL, Bash, Turbo Pascal, Hare, wax, Nim&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Homoiconic&lt;/strong&gt;: SectorLISP, fe, Rebol, Boron, Cakelisp&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Functional&lt;/strong&gt;: Standard ML, Unison, Julia, Pkl, Roc, Haskell, Idris, F#&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Object-oriented&lt;/strong&gt;: Squeak, Wren, Self&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Concatenative&lt;/strong&gt;: Gforth, PostScript, RetroForth, Uxntal, Factor, Min&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Array-based&lt;/strong&gt;: J, Lil, APL&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Declarative&lt;/strong&gt;: SQL, XSLT, Verilog&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Block/flow-based&lt;/strong&gt;: Scratch, XOD&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Esoteric&lt;/strong&gt;: SIC-1 Assembly Language, EXA, Piet, قلب (Qalb), 文言 (wenyan)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Excluding intentionally esoteric ones, &lt;strong&gt;the most mind-bending for me have been concatenative and array-based languages&lt;/strong&gt;, probably due to my inexperience with them. Dependently-typed languages would probably have been mind-bending if I&amp;#39;d spent more time and actually learned them.&lt;/p&gt;
&lt;h1 id=&quot;programming-language-observations&quot;&gt;Programming language observations&lt;/h1&gt;
&lt;p&gt;Being a newbie nearly 50 times in quick succession theoretically gives me a unique perspective on programming languages. Here are a few observations.&lt;/p&gt;
&lt;h2 id=&quot;ramping-up&quot;&gt;Ramping up&lt;/h2&gt;
&lt;p&gt;Overall, for me as an experienced programmer, &lt;strong&gt;the most helpful thing for ramping up has been, unsurprisingly, quality documentation&lt;/strong&gt;. Specifically: having &lt;strong&gt;searchable documentation that is clearly organized, using familiar language&lt;/strong&gt; (e.g. outlining basic syntax, enumerating control flow options, and diligently documenting the standard library).&lt;/p&gt;
&lt;p&gt;The languages I struggled most with seemed to focus their documentation too much on tutorials and examples (usually unrelated to what I wanted to do--which is fair) or they used long-winded prose. In one case, the &amp;quot;hello world&amp;quot; example contained a URL that wasn&amp;#39;t even explained--that just made me more confused, rather than less. Thankfully, none of the languages tried to rely on videos or chat apps for &amp;quot;documentation&amp;quot;!&lt;/p&gt;
&lt;h2 id=&quot;no-one-cares-about-footprint&quot;&gt;No one cares about footprint&lt;/h2&gt;
&lt;p&gt;It&amp;#39;s disheartening, but most programming languages don&amp;#39;t seem to care about the disk/memory footprints of their environments or, often, their resulting binaries. I don&amp;#39;t enjoy slow software, but, these days, &lt;strong&gt;my old computers are more impacted by bloat than sluggishness&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Hare and Rebol are nice counterexamples, and embeddable scripting languages are also usually pretty light. And let&amp;#39;s not forget the old, but &lt;a href=&quot;https://prog21.dadgum.com/116.html&quot;&gt;famously lightweight Turbo Pascal environment&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id=&quot;so-so-many-languages&quot;&gt;So, so many languages&lt;/h2&gt;
&lt;p&gt;Despite my frequent complaints, the quality of virtually all languages I&amp;#39;ve tried is impressive--even the hobby languages are eminently usable! The amount of work involved is staggering.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Perhaps people create new programming languages for the same reason they create art, i.e. because they can&amp;#39;t &lt;em&gt;not&lt;/em&gt; do it?&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;parting-thoughts&quot;&gt;Parting thoughts&lt;/h1&gt;
&lt;p&gt;Now that I&amp;#39;ve sampled a lot of different programming languages, I&amp;#39;m more confident about matching problems to appropriate languages. In the recent past, I&amp;#39;ve tried to &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/future-proof-languages.html&quot;&gt;find the one true language that I can use for everything&lt;/a&gt;, but that&amp;#39;s honestly misguided--most of the time, at least--and especially for hobby projects in wildly different domains.&lt;/p&gt;
&lt;p&gt;I guess the good news is that I&amp;#39;ve now convinced myself that &lt;strong&gt;I could &lt;em&gt;probably&lt;/em&gt; make do with &lt;em&gt;any&lt;/em&gt; programming language, so maybe I can finally stop &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/../misc/my-hobby-is-bikeshedding.html&quot;&gt;bike-shedding&lt;/a&gt; &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/future-proof-languages.html&quot;&gt;about&lt;/a&gt; &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/future-proof-languages-2.html&quot;&gt;programming&lt;/a&gt; &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/future-proof-languages-3.html&quot;&gt;languages&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
</content>
</entry>
<entry>
<title>50 programming languages in 58 days</title>
<id>https://log.schemescape.com/posts/programming-languages/100-languages-9.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/programming-languages/100-languages-9.html"/>
<updated>2024-05-13T00:00:00.000Z</updated>
<summary type="text">Here are my notes about a grab bag of programming languages that helped get me half way to sampling 100 programming languages.</summary>
<content type="html">&lt;p&gt;In the past two months, I&amp;#39;ve &lt;a href=&quot;https://github.com/jaredkrinke/100-languages&quot;&gt;written code in 50 different programming languages&lt;/a&gt;. &lt;strong&gt;That&amp;#39;s half way to &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/100-languages.html&quot;&gt;my goal of 100&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h1 id=&quot;weeks-6---8&quot;&gt;Weeks 6 - 8&lt;/h1&gt;
&lt;p&gt;After tediously &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/piet-for-project-euler.html&quot;&gt;painting a picture to compute digit factorials&lt;/a&gt;, &lt;strong&gt;I&amp;#39;m trying to be more strategic about pairing programming languages with suitable Project Euler problems&lt;/strong&gt;. Ideally, I can avoid writing &amp;quot;big integer&amp;quot; arithmetic and/or squeezing solutions into a 16-bit address space for the next update. And I&amp;#39;m definitely going to take a break from esoteric programming languages for a bit.&lt;/p&gt;
&lt;p&gt;Anyway, here are the languages I used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Turbo_Pascal&quot;&gt;Turbo Pascal&lt;/a&gt; (under DOSBox)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://harelang.org/&quot;&gt;Hare&lt;/a&gt; (floppy disk-sized systems language)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wren.io/&quot;&gt;Wren&lt;/a&gt; (object-oriented scripting language)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pkl-lang.org/index.html&quot;&gt;Pkl&lt;/a&gt; (meta-configuration language)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nas.sr/%D9%82%D9%84%D8%A8/&quot;&gt;قلب (Qalb)&lt;/a&gt; (Scheme using Arabic script)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.roc-lang.org/&quot;&gt;Roc&lt;/a&gt; (functional language)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/LingDong-/wax&quot;&gt;wax&lt;/a&gt; (a common subset of most imperative languages)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://urlan.sourceforge.io/boron/&quot;&gt;Boron&lt;/a&gt; (Rebol, but with a smaller scope)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wy-lang.org/&quot;&gt;文言 (wenyan)&lt;/a&gt; (imperative language using Chinese text)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Self_(programming_language)&quot;&gt;Self&lt;/a&gt; (prototype-based Smalltalk)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.haskell.org/&quot;&gt;Haskell&lt;/a&gt; (functional language)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.idris-lang.org/index.html&quot;&gt;Idris&lt;/a&gt; (dependently-typed functional language)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nim-lang.org/&quot;&gt;Nim&lt;/a&gt; (vaguely Python-esque compiled language)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://min-lang.org/&quot;&gt;Min&lt;/a&gt; (concatenative language, based on Nim)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://macoy.me/blog/programming/CakelispIntro&quot;&gt;Cakelisp&lt;/a&gt; (s-expression to C compiler)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://fsharp.org/&quot;&gt;F#&lt;/a&gt; (functional language for .NET)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A few languages surprised me (one quite pleasantly and one quite &lt;em&gt;unpleasantly&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;The rest of this post just contains notes from my (minimal) interaction with each language. I&amp;#39;m planning to write a separate post with more general observations. As always, &lt;strong&gt;my observations are from spending at most a few hours with each language, so take my opinions completely encrusted with salt.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;turbo-pascal&quot;&gt;Turbo Pascal&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;I&amp;#39;d always wanted to try Turbo Pascal since two of my heroes helped create it (Anders &amp;quot;Turbo&amp;quot; Heljsberg and Niklaus (&amp;quot;Pascal&amp;quot;) Wirth).&lt;/strong&gt; It was allegedly far ahead of its time, although my only contemporaneous experience was with QBasic, so I can neither confirm nor deny. Regardless, it&amp;#39;s an impressively complete little environment. I highly recommend it for retrocomputing!&lt;/p&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Keyboard shortcut to compile and run is Ctrl+F9... which is the default DOSBox shortcut for killing DOSBox&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Had to speed up prime test by sieving first 1000 numbers&lt;/li&gt;
&lt;li&gt;Built-in documentation is handy, but lacking detail&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The IDE is amazing, considering how tiny it is!&lt;/strong&gt; (Aside: someone &lt;a href=&quot;https://github.com/magiblot/turbo&quot;&gt;ported the UI to modern computers&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Can&amp;#39;t have local variables with same name as globals?&lt;/li&gt;
&lt;li&gt;Annoying to have to declare all variables at top, but that probably makes the language faster to compile&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;hare&quot;&gt;Hare&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Initially, I was confused by the &amp;quot;cannot ignore error here&amp;quot; error, but it turns out it was &lt;em&gt;literally telling me that I needed to handle a potential error code path&lt;/em&gt; (or tell the compiler to crash on error instead)&lt;/li&gt;
&lt;li&gt;Semicolons required at the end of &lt;code&gt;for&lt;/code&gt; loops and &lt;code&gt;if&lt;/code&gt; conditionals (though the docs say this might change)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docs claim the language fits on a 3.5&amp;quot; floppy&lt;/strong&gt; -- if true that would be impressive!&lt;/li&gt;
&lt;li&gt;Doesn&amp;#39;t officially support Windows/macOS&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;wren&quot;&gt;Wren&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Doesn&amp;#39;t tolerate semicolons&lt;/li&gt;
&lt;li&gt;Can&amp;#39;t chain methods on separate lines&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqrt&lt;/code&gt;, &lt;code&gt;floor&lt;/code&gt; are properties instead of functions&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for&lt;/code&gt; is &amp;quot;for each&amp;quot;, but there is no &amp;quot;step some value up to max&amp;quot; loop built in&lt;/li&gt;
&lt;li&gt;Fibers!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;pkl&quot;&gt;Pkl&lt;/h2&gt;
&lt;p&gt;According to its web site, Pkl provides &amp;quot;Configuration that is Programmable, Scalable, and Safe&amp;quot;. Sounds great! Let&amp;#39;s download it. &lt;strong&gt;Eighty four megabytes later&lt;/strong&gt;, you can get a taste of Pkl.&lt;/p&gt;
&lt;p&gt;Now, I &lt;em&gt;know&lt;/em&gt; I&amp;#39;m in the minority when pining for &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/minimal-dev-env.html&quot;&gt;a minimal development environment&lt;/a&gt;, but how can a &lt;em&gt;configuration language&lt;/em&gt; be 84 MB? Why does a configuration language require its own JIT compiler?&lt;/p&gt;
&lt;p&gt;I understand that INI files aren&amp;#39;t enough and that YAML doesn&amp;#39;t scale and that JSON probably wouldn&amp;#39;t exist if XML had been simpler and less verbose. But (and I apologize for this)... &lt;strong&gt;Pkl is the Electron of configuration languages&lt;/strong&gt;. That is both a compliment and an insult.&lt;/p&gt;
&lt;p&gt;End rant.&lt;/p&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Three times the size of Node.js&lt;/li&gt;
&lt;li&gt;Nice functional language&lt;/li&gt;
&lt;li&gt;Had to convert &lt;code&gt;IntSeq&lt;/code&gt; to a &lt;code&gt;List&lt;/code&gt; in order to use &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, etc.&lt;/li&gt;
&lt;li&gt;Slower startup than Python...&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;qalb&quot;&gt;Qalb&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Thought-provoking concept!&lt;/li&gt;
&lt;li&gt;VS Code doesn&amp;#39;t have an RTL mode, so it kept getting confused about where to put tokens&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;roc&quot;&gt;Roc&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Had trouble finding basic documentation (e.g. how to convert between types)&lt;/li&gt;
&lt;li&gt;Accessing lists requires dealing with Result type for error handling, even when I&amp;#39;ve already checked if the list is long enough (would Idris handle this case?)&lt;/li&gt;
&lt;li&gt;Requires downloading extra code just for &amp;quot;Hello, world!&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;wax&quot;&gt;wax&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;I like the idea of a meta-language for &amp;quot;write once, use from any language&amp;quot;&lt;/strong&gt; (and I don&amp;#39;t mind s-expressions)&lt;/li&gt;
&lt;li&gt;Was kind of hoping for AST-level macros, but I didn&amp;#39;t see them...&lt;/li&gt;
&lt;li&gt;Despite liking Lisps, I think I&amp;#39;d prefer less tedious syntax, especially since there aren&amp;#39;t macros&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;boron&quot;&gt;Boron&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Only 350 KB!&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Reminds me of TCL&lt;/li&gt;
&lt;li&gt;Didn&amp;#39;t see &amp;quot;reduce&amp;quot; and had an issue with &amp;quot;replace&amp;quot;, so I had to use lots of mutation and iteration&lt;/li&gt;
&lt;li&gt;Not much documentation&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;wenyan&quot;&gt;wenyan&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Machine translating programs back into English is entertaining&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;self&quot;&gt;Self&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Download doesn&amp;#39;t support HTTPS&lt;/li&gt;
&lt;li&gt;No Windows support&lt;/li&gt;
&lt;li&gt;32-bit only (at least on Linux)&lt;/li&gt;
&lt;li&gt;GUI-only...&lt;/li&gt;
&lt;li&gt;Similar to Smalltalk/Squeak &lt;strong&gt;I had lots of trouble navigating the UI and figuring out what to click/middle-click/right-click on to make things happen&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Excellent tutorial: &lt;a href=&quot;https://sin-ack.github.io/posts/morphic-intro/&quot;&gt;https://sin-ack.github.io/posts/morphic-intro/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Saving to/loading from text files is done via the &lt;code&gt;transporter&lt;/code&gt; object (see tutorial)&lt;/li&gt;
&lt;li&gt;Took me a long time to figure out how to supply multiple arguments to a method: &amp;quot;Methods can take arguments, and the keywords for each argument after the first must start with a capital letter.&amp;quot;&lt;/li&gt;
&lt;li&gt;Got a &amp;quot;numeric constant too large&amp;quot; error, but actual arithmetic seamlessly transitions to &amp;quot;big integer&amp;quot; arithmetic&lt;/li&gt;
&lt;li&gt;No auto-indent!?&lt;/li&gt;
&lt;li&gt;Seemed very slow&lt;/li&gt;
&lt;li&gt;Globals in method don&amp;#39;t work until setting &lt;code&gt;parent*&lt;/code&gt; slot, to enable it to search up the hierarchy to &lt;code&gt;globals&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;haskell&quot;&gt;Haskell&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Documentation for the standard library was surprisingly tricky to search for&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;idris&quot;&gt;Idris&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Originally, I wanted to try implementing a solution within the type system, but I just couldn&amp;#39;t figure it out after a few hours of flailing about&lt;/li&gt;
&lt;li&gt;Couldn&amp;#39;t find standard library functions for operations like &amp;quot;first element of a list&amp;quot; or &amp;quot;check if an item exists within a list&amp;quot;&lt;/li&gt;
&lt;li&gt;Never figured out how to test anything other than equality in the type system&lt;/li&gt;
&lt;li&gt;I still don&amp;#39;t understand how &lt;code&gt;Something&lt;/code&gt; and &lt;code&gt;MkSomething&lt;/code&gt; are related for data types&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;nim&quot;&gt;Nim&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Nim is the language that impressed me the most in this batch.&lt;/strong&gt; Everything I thought would be a problem (significant whitespace, choose-your-own-function syntax, intermediate C compliation step) didn&amp;#39;t bother me at all. The small sample of the standard library I played with was a little quirky, but Nim seems like excellent bang for your buck.&lt;/p&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Release binary was only 120 KB (linked against libc)!&lt;/li&gt;
&lt;li&gt;Thought I&amp;#39;d dislike the syntax, but it was fine&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Really easy to get started, many things &amp;quot;just worked&amp;quot; (e.g. grabbing a slice of an array)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Didn&amp;#39;t have to specify too many types, but still ran fast&lt;/li&gt;
&lt;li&gt;Fast compilation&lt;/li&gt;
&lt;li&gt;Didn&amp;#39;t like the &amp;quot;hints&amp;quot; it spews out during compilation, even for &lt;code&gt;nim r&lt;/code&gt; (build and run)&lt;/li&gt;
&lt;li&gt;Why did &lt;code&gt;all&lt;/code&gt; take an anonymous function, but &lt;code&gt;foldl&lt;/code&gt; took just an expression (with &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; seemingly picked out of thin air) -- is &lt;code&gt;foldl&lt;/code&gt; a macro?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Nim might be a good language for hobby projects because it&amp;#39;s easy, fast, and produces small binaries&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;I wonder what the debugging experience is like -- if it&amp;#39;s decent, I might be writing a lot more Nim in the future!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;min&quot;&gt;Min&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Operators&amp;#39; arguments are named, which helped me (although I think it&amp;#39;s an atypical style for concatenative languages)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;cakelisp&quot;&gt;Cakelisp&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Standard library provides convenient macros like &lt;code&gt;each-in-array&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;I kind of wish I could write my macros using Common Lisp instead of a bespoke Lisp&lt;/li&gt;
&lt;li&gt;Final binary was only 18 KB!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;f&quot;&gt;F#&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;|&amp;gt;&lt;/code&gt; (pipe operator) is nice, but I couldn&amp;#39;t find it explicitly stated where the argument goes (it appears to be last--but can I change that?)&lt;/li&gt;
&lt;li&gt;Type inference was convenient--I never had to specify &lt;code&gt;int&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;F# feels like C# without having to specify types... except I have to type &lt;code&gt;Seq&lt;/code&gt; &lt;em&gt;more&lt;/em&gt; than I would have in C#&lt;/li&gt;
&lt;li&gt;Relatively slow to compile&lt;/li&gt;
&lt;/ul&gt;
</content>
</entry>
</feed>
