<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Schemescape</title>
<id>https://log.schemescape.com/</id>
<link rel="self" href="https://log.schemescape.com/feed.xml"/>
<link rel="alternate" href="https://log.schemescape.com/"/>
<author>
<name>Schemescape</name>
</author>
<updated>2025-07-29T00:00:00.000Z</updated>

<entry>
<title>The smallest embeddable scripting language, part 1</title>
<id>https://log.schemescape.com/posts/static-site-generators/smallest-scripting-language.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/static-site-generators/smallest-scripting-language.html"/>
<updated>2025-07-29T00:00:00.000Z</updated>
<summary type="text">My search for a small, simple embeddedable scripting language.</summary>
<content type="html">&lt;h1 id=&quot;background&quot;&gt;Background&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;I like small software&lt;/strong&gt; because I hate bloat. Sadly, bloat is pervasive in this era of Chrome-powered text editors.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I also like extensible software&lt;/strong&gt; because it lets you add the features you actually use without bloating the vanilla version for everyone else.&lt;/p&gt;
&lt;p&gt;As an example, take a look at &lt;a href=&quot;https://log.schemescape.com/posts/static-site-generators/smallest-static-site-generator.html&quot;&gt;my &amp;lt; 1 MB static site generator&lt;/a&gt;. &lt;strong&gt;It&#039;s ~40 times smaller than &lt;a href=&quot;https://gohugo.io/&quot;&gt;Hugo&lt;/a&gt;&lt;/strong&gt;, yet it has features that Hugo doesn&#039;t conveniently support (e.g. preserving relative Markdown links and categorizing posts based on directory). (To be fair, it also lacks zillions of features that Hugo supports--but which I don&#039;t need.)&lt;/p&gt;
&lt;p&gt;At the heart of small and extensible software lies some sort of flexble configuration/extension scheme. In theory, something declarative would be preferable, but, &lt;strong&gt;in practice, this usually involves an embedded (and, yes, Turing-complete) scripting language&lt;/strong&gt;.&lt;/p&gt;
&lt;h1 id=&quot;goal&quot;&gt;Goal&lt;/h1&gt;
&lt;p&gt;Getting to the point, I want to find the smallest comfortable scripting language that can be easily embedded into minimal software. When I say &amp;quot;smallest&amp;quot;, I mean:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Small number of orthogonal language features (to make it easy to learn)&lt;/li&gt;
&lt;li&gt;Small implementation code size (to ensure it doesn&#039;t work against my goal of producing small software)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&#039;ll admit that optimizing for code size in this era of terabyte drives doesn&#039;t seem important on the surface. However, I find that &lt;strong&gt;a small implementation size is a convenient proxy for these more virtuous aspects&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Simpler and easier to understand implementation&lt;/li&gt;
&lt;li&gt;Few or zero third-party dependencies&lt;/li&gt;
&lt;li&gt;Smaller surface area for bugs&lt;/li&gt;
&lt;li&gt;And sometimes improved portability, especially with older/slower platforms&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Oh, and even more unreasonably, I want the scripting language&#039;s &lt;em&gt;implementation language&lt;/em&gt; to also be simple and portable, so I&#039;m only looking at C-based implementations.&lt;/p&gt;
&lt;h1 id=&quot;the-contenders&quot;&gt;The contenders&lt;/h1&gt;
&lt;p&gt;After some unscientific research, these are the languages that looked most promising to me:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.lua.org/&quot;&gt;Lua&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JavaScript (&lt;a href=&quot;https://bellard.org/quickjs/&quot;&gt;QuickJS&lt;/a&gt;, &lt;a href=&quot;https://github.com/svaarala/duktape&quot;&gt;Duktape&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Python (&lt;a href=&quot;https://micropython.org/&quot;&gt;MicroPython&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.tcl-lang.org/&quot;&gt;Tcl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lisp (&lt;a href=&quot;https://tinyscheme.sourceforge.net/home.html&quot;&gt;TinyScheme&lt;/a&gt;, &lt;a href=&quot;https://github.com/yuriy-chumak/OL&quot;&gt;Otus Lisp&lt;/a&gt;, &lt;a href=&quot;https://github.com/owl-lisp/owl&quot;&gt;Owl Lisp&lt;/a&gt;, &lt;a href=&quot;https://ccrma.stanford.edu/software/snd/snd/s7.html&quot;&gt;s7&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://janet-lang.org/&quot;&gt;Janet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wren.io/&quot;&gt;Wren&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Obviously, Python and JavaScript are the most popular languages in the list, but both languages are big--and getting bigger every day! Also, it&#039;s unclear how helpful their ecosystems would be when I&#039;m planning to pull in smaller and less broadly supported implementations like MicroPython and QuickJS.&lt;/p&gt;
&lt;p&gt;Lua is arguably the king of embedded scripting languages, but I feel like a simpler language in the vein of Lisp or Scheme could be both smaller and more capable.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: After publishing this, there were &lt;a href=&quot;https://lobste.rs/s/hzr1ke/smallest_embeddable_scripting_language&quot;&gt;some suggestions on Lobsters&lt;/a&gt; for additional languages that might fit the bill:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jim.tcl-lang.org/home/doc/www/www/index.html&quot;&gt;Jim&lt;/a&gt; (Tcl)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.compuphase.com/pawn/pawn.htm&quot;&gt;Pawn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://berry-lang.github.io/&quot;&gt;Berry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://craftinginterpreters.com/the-lox-language.html&quot;&gt;Lox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zevv/zForth&quot;&gt;zForth&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;others&quot;&gt;Others&lt;/h2&gt;
&lt;p&gt;There are also a few languages that don&#039;t quite fit what I&#039;m looking for right now:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://beyondloom.com/decker/lil.html&quot;&gt;lil&lt;/a&gt;: bonus points for sporting an awk implementation, but, without mutable data structures, I struggled to get acceptable performance&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rxi/fe&quot;&gt;fe&lt;/a&gt;: only supports ~4000 cons cells&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.squirrel-lang.org/&quot;&gt;Squirrel&lt;/a&gt;: implemented in C++ and I&#039;m only looking at languages that are implemented in C&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mruby.org/&quot;&gt;mruby&lt;/a&gt; (Ruby): uses a build system I wasn&#039;t familiar with&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;code-size-data&quot;&gt;Code size data&lt;/h1&gt;
&lt;p&gt;As a first pass, here are the sizes of size-optimized (&lt;code&gt;-Os&lt;/code&gt; and stripped) REPL executables:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;Implementation&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Language&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;Size&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;zForth&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Forth&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;25 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Lox&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Lox&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;40 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;TinyScheme&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Scheme&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;75 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Wren&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Wren&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;160 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Lua 5.2&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Lua&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;175 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Berry&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Berry&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;240 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Jim&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Tcl&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;325 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Duktape&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;JavaScript&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;350 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Pawn (&lt;code&gt;pawncc&lt;/code&gt;)&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Pawn&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;380 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Otus Lisp&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Scheme&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;500 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;QuickJS&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;JavaScript&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;700 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Owl Lisp&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Scheme&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;700 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Janet&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Janet&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;850 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;s7&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Scheme&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;1500 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Tcl&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Tcl&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;1700 KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;MicroPython&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Python&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Note: I didn&#039;t actually build MicroPython myself because its source code is &amp;gt; 100 MB (!). The homepage claims a 256 KB binary size, but I can&#039;t confirm that figure. I also didn&#039;t build mruby since it seemed to require Ruby for bootstrapping.&lt;/p&gt;
&lt;h1 id=&quot;analysis&quot;&gt;Analysis&lt;/h1&gt;
&lt;h2 id=&quot;lua&quot;&gt;Lua&lt;/h2&gt;
&lt;p&gt;An impressive showing by Lua, considering this includes the full (albeit still small) standard library! I have numerous complaints with Lua (conflating arrays with dictionaries, verbose syntax, and, yes, one-based indexing), but Lua&#039;s tiny code size is amazing! Even throwing in JIT compilation (via &lt;a href=&quot;https://luajit.org/&quot;&gt;LuaJIT&lt;/a&gt;) and parsing expression grammars (via &lt;a href=&quot;https://www.inf.puc-rio.br/~roberto/lpeg/&quot;&gt;LPeg&lt;/a&gt;), the binary is still tiny.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Honestly, Lua&#039;s &amp;quot;bang for your buck&amp;quot; is going to be hard to beat.&lt;/strong&gt; No wonder it&#039;s so popular!&lt;/p&gt;
&lt;h2 id=&quot;zforth&quot;&gt;zForth&lt;/h2&gt;
&lt;p&gt;Not surprising (given Forth&#039;s minimalist roots), but zForth is the smallest embeddable scripting language. Unfortuantely for me, despite how much I admire Forth&#039;s minimalism, I haven&#039;t to date been able to rewire my brain to comfortably read and write concatenative languages. &lt;strong&gt;If I was working on a microcontroller with only a few kilobytes of RAM (&lt;a href=&quot;https://log.schemescape.com/posts/static-site-generators/../vintage-computing/blazin-forth.html&quot;&gt;or a Commodore 64&lt;/a&gt;), I would happily use Forth&lt;/strong&gt;. But, for now, I&#039;m lucky enough to assume the presence of an operating system, text editor, and (at least) tens of megabytes of RAM, so I will ashamedly pass on zForth.&lt;/p&gt;
&lt;h2 id=&quot;lox&quot;&gt;Lox&lt;/h2&gt;
&lt;p&gt;Despite knowing about Wren, I didn&#039;t think to include Lox (by the same author) in my original research. Somehow it manages to be smaller than even the smallest Scheme! Unfortunately, as far as I can tell, the only reason it manages to be so tiny is that it has essentially no standard library--just a single &lt;code&gt;clock()&lt;/code&gt; function. Regardless, the tiny VM is impressive, so if you really need a minimal scripting language and you&#039;re comfortable building your own standard library, Lox could be promising.&lt;/p&gt;
&lt;h2 id=&quot;tinyscheme&quot;&gt;TinyScheme&lt;/h2&gt;
&lt;p&gt;The only embeddable language implementation that handily beats Lua in terms of code size is TinyScheme. Unfortunately, the ecosystem for TinyScheme is practically nonexistent--it&#039;s not even mentioned in &lt;a href=&quot;https://get.scheme.org/&quot;&gt;the big list of Scheme implementations on scheme.org&lt;/a&gt;! &lt;strong&gt;There &lt;em&gt;is&lt;/em&gt; an interesting runtime for TinyScheme named &lt;a href=&quot;http://www.geonius.com/software/tsion/&quot;&gt;TSION&lt;/a&gt; that is based on an I/O event loop that ends up around 280 KB in total&lt;/strong&gt;. Honestly, that&#039;s impressive enough that I should try building something with it.&lt;/p&gt;
&lt;h2 id=&quot;wren&quot;&gt;Wren&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;To my surprise, Wren manages to be smaller than Lua!&lt;/strong&gt; I don&#039;t enjoy the ceremony of it&#039;s strict object-oriented nature, but I suspect it might result in more orderly code than classless languages like Lua and (original) JavaScript.&lt;/p&gt;
&lt;p&gt;My main concern with Wren, however, is that the classes that make up pretty much everything are fairly rigid--you can&#039;t just add properties whenever you feel like it. This sounds like a great design for something like a game where you have neat and tidy objects and interfaces, but for extensibility, configuration, and prototyping I&#039;m drawn more towards Lua and JavaScript&#039;s more flexible data types--despite how messy they can get. Of course, if Wren&#039;s rigid types can prevent things from blowing up at run-time as frequently as happens in Lua and JavaScript, it might be a good trade-off.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I&#039;ll need to play with Wren some more to form an actual opinion.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;javascript&quot;&gt;JavaScript&lt;/h2&gt;
&lt;p&gt;As much as I like the good parts of modern JavaScript, the language as a whole has a lot of cruft that probably adds unnecessary bulk to implementations (e.g. block scoping, two-byte characters, the &lt;code&gt;arguments&lt;/code&gt; object). Ignoring old features, the language is also evolving at a feverish pace. I &lt;em&gt;do&lt;/em&gt; like object destrucuring and template literals, though. For now, I&#039;m setting aside the wild world of JavaScript.&lt;/p&gt;
&lt;h2 id=&quot;other-schemes-and-tcl&quot;&gt;Other Schemes (and Tcl)&lt;/h2&gt;
&lt;p&gt;I&#039;m surprised at how big the other Scheme implementations are. The main draw of Scheme for me is its simplicity, yet somehow most Schemes are JavaScript-sized. Same story for Tcl.&lt;/p&gt;
&lt;h2 id=&quot;janet&quot;&gt;Janet&lt;/h2&gt;
&lt;p&gt;And now we come to Janet. &lt;strong&gt;Janet feels like a more batteries-included Lua, with Lisp/Clojure-inspired syntax&lt;/strong&gt;. Sure it&#039;s a bit heftier, but it packs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Parsing expression grammars&lt;/li&gt;
&lt;li&gt;Immutable data structures&lt;/li&gt;
&lt;li&gt;Macros&lt;/li&gt;
&lt;li&gt;Destructuring&lt;/li&gt;
&lt;li&gt;Multithreading&lt;/li&gt;
&lt;li&gt;Networking&lt;/li&gt;
&lt;li&gt;An event loop&lt;/li&gt;
&lt;li&gt;And more!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I don&#039;t actually like the Clojure-inspired not-quite-as-regular-as-a-real-Lisp syntax, and I know from experience that any sort of math equations are hard to read and write in prefix notation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But Janet throws in practically everything you might want from a &amp;quot;small&amp;quot; language and is still as small as many Scheme implementations!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Obviously, Lisps aren&#039;t popular, but their regular syntax becomes soothing after a while. The consistent sytnax also supports structural editing more simply than other languages (not to mention live editing!). And sometimes it just seems like Lisps attract developers who care about clarity in written code.&lt;/p&gt;
&lt;p&gt;So I&#039;m a bit torn. Janet has a lot of what I want, but I can&#039;t shake the feeling that it has &lt;em&gt;too many&lt;/em&gt; features for someone who&#039;s claiming to be looking for the smallest comfortable embeddedable scripting language.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Similar to Wren and TinyScheme, I&#039;m going to need to spend some more time with Janet.&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;end-of-part-1&quot;&gt;End of part 1&lt;/h1&gt;
&lt;p&gt;Now I will abruptly end this post after only considering code size because I honestly haven&#039;t spent enough time with some of the languages to be able to comment on their level of &amp;quot;comfort&amp;quot; (or, rather, my level of comfort with using &lt;em&gt;them&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I suspect that the ultimate answer will be the one that is already staring me in the face: Lua.&lt;/strong&gt; Despite this, I&#039;d like to explore other options a bit more, just in case I&#039;m missing something truly special.&lt;/p&gt;
</content>
</entry>
<entry>
<title>Syntax highlighting for 150 languages in &lt; 200 KB</title>
<id>https://log.schemescape.com/posts/static-site-generators/luasmith-syntax-highlighting.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/static-site-generators/luasmith-syntax-highlighting.html"/>
<updated>2025-06-25T00:00:00.000Z</updated>
<summary type="text">It&#039;s not bloat if I actually use it, right?</summary>
<content type="html">&lt;h1 id=&quot;luasmith&quot;&gt;luasmith&lt;/h1&gt;
&lt;p&gt;After &lt;a href=&quot;https://log.schemescape.com/posts/static-site-generators/smallest-static-site-generator.html&quot;&gt;creating a 270 KB static site generator&lt;/a&gt; and &lt;a href=&quot;https://log.schemescape.com/posts/static-site-generators/extending-luasmith.html&quot;&gt;adding link-checking with minimal bloat&lt;/a&gt;, the feature creep continues: &lt;a href=&quot;https://github.com/jaredkrinke/luasmith&quot;&gt;luasmith&lt;/a&gt; now supports syntax highlighting for ~150 languages--&lt;strong&gt;and it only increased the gzipped download by about 180 KB&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;This post briefly describes my path to adding lightweight and customizable syntax highlighting.&lt;/p&gt;
&lt;h2 id=&quot;self-hosting&quot;&gt;Self-hosting&lt;/h2&gt;
&lt;p&gt;Aside: this site is now built using luasmith (instead of &lt;a href=&quot;https://github.com/jaredkrinke/md2blog&quot;&gt;md2blog&lt;/a&gt;)! Syntax highlighting was the last missing feature.&lt;/p&gt;
&lt;h1 id=&quot;research&quot;&gt;Research&lt;/h1&gt;
&lt;h2 id=&quot;initial-research&quot;&gt;Initial research&lt;/h2&gt;
&lt;p&gt;My initial research was fruitless:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://highlightjs.org/&quot;&gt;highlight.js&lt;/a&gt; is what I used in md2blog, but it requires JavaScript (or at least a JS regular expression engine) so it couldn&#039;t be simply integrated into Lua-based luasmith&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tree-sitter.github.io/tree-sitter/&quot;&gt;Tree-sitter&lt;/a&gt; is the undisputed king of high performance syntax highlighting, but it didn&#039;t appear to provide an interpreter (instead relying on code generation and a C compiler) -- and, honestly, it seems like overkill for coloring a few code samples on my tiny site&lt;/li&gt;
&lt;li&gt;Most other highlighters were implemented in JavaScript, Rust, or Go which, like highlight.js would significantly complicate luasmith&#039;s build process&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What I needed was something either Lua-native or small but easily extensible.&lt;/p&gt;
&lt;h2 id=&quot;lpeg-and-scintillua&quot;&gt;LPeg and Scintillua&lt;/h2&gt;
&lt;p&gt;The most obvious starting point for parsing in Lua is &lt;a href=&quot;https://www.inf.puc-rio.br/~roberto/lpeg/&quot;&gt;LPeg&lt;/a&gt;, by none other than the original creator of Lua. While investigating LPeg-based highlighters, I ran across &lt;a href=&quot;https://orbitalquark.github.io/scintillua/&quot;&gt;Scintillua&lt;/a&gt;, which supports an impressive number of languages with a minimalist approach--it&#039;s even apparently used in the lightweight &lt;a href=&quot;https://github.com/martanne/vis&quot;&gt;vis&lt;/a&gt; editor.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Given Scintillua uses one tenth the code of highlight.js and it&#039;s Lua-native, it was exactly what I was looking for.&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;implementation&quot;&gt;Implementation&lt;/h1&gt;
&lt;p&gt;Rather than ship a zip with 100+ Lua files from Scintillua, I decided to embed all those scripts directly into the executable (with the ability to locally override them, as needed). The only trick was that Scintillua, in its library form, implements its own file search and load system based on probing files with Lua&#039;s &lt;code&gt;loadfile&lt;/code&gt; function. I ended up wrapping &lt;code&gt;loadfile&lt;/code&gt; with some code to detect Scintillua&#039;s calls and point them at the embedded strings (which are lazily loaded into Lua).&lt;/p&gt;
&lt;p&gt;In the end, adding in LPeg, Scintillua, almost all its grammars, and glue code only added around 175 KB to the (gzip-compressed) tarball (a 67% increase--not as bad as I originally feared). Even better, syntax highlighting for my blog only increased the generation time by around 50%.&lt;/p&gt;
&lt;p&gt;Finally, I have a small, simple static site generator that does what I want!&lt;/p&gt;
&lt;h1 id=&quot;bonus-authoring-an-etlua-grammar&quot;&gt;Bonus: authoring an etlua grammar&lt;/h1&gt;
&lt;p&gt;One aspect of Scintillua that hooked me was that adding new grammars simply required writing some Lua code, using the LPeg library. I had not actually used LPeg before, but &lt;a href=&quot;https://www.inf.puc-rio.br/~roberto/lpeg/&quot;&gt;its documentation&lt;/a&gt; was easy to understand (and there&#039;s also &lt;a href=&quot;https://leafo.net/guides/parsing-expression-grammars.html&quot;&gt;a great LPeg tutorial on leafo.net&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Given that luasmith uses &lt;a href=&quot;https://github.com/leafo/etlua&quot;&gt;etlua&lt;/a&gt; for templates, I thought it would be fun to write a syntax highlighter for etlua.&lt;/p&gt;
&lt;h2 id=&quot;structure&quot;&gt;Structure&lt;/h2&gt;
&lt;p&gt;Scintillua&#039;s documentation provides &lt;a href=&quot;https://orbitalquark.github.io/scintillua/api.html#embedded-lexers&quot;&gt;information and examples for embedding one parser within another&lt;/a&gt;. In the case of etlua, I&#039;m assuming Lua code will always be embedded in HTML, so an etlua parser should simply be an HTML parser with Lua embedded between &lt;code&gt;&amp;lt;%&lt;/code&gt; ... &lt;code&gt;%&amp;gt;&lt;/code&gt; tags. The author of Scintillua even pointed out to me that there&#039;s already a very similar parser: &lt;a href=&quot;https://github.com/orbitalquark/scintillua/blob/default/lexers/rhtml.lua&quot;&gt;RHTML&lt;/a&gt; (Ruby in HTML).&lt;/p&gt;
&lt;h2 id=&quot;implementation-1&quot;&gt;Implementation&lt;/h2&gt;
&lt;p&gt;Using the RHTML parser as a starting point, it was simply a matter of including the appropriate start and end tags (note: LPeg uses Lua metatables for repurposing arithmetic operations as parsing expression grammar building blocks, e.g. &lt;code&gt;^-1&lt;/code&gt; means &amp;quot;at most one&amp;quot;, &lt;code&gt;*&lt;/code&gt; means &amp;quot;concatenation/and&amp;quot;, and &lt;code&gt;+&lt;/code&gt; means &amp;quot;alternation/or&amp;quot; -- and &lt;code&gt;lpeg.P(...)&lt;/code&gt; just matches string literals). Here&#039;s the trivial parser:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;&lt;span class=&quot;hl-keyword&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;hl-identifier&quot;&gt;lexer&lt;/span&gt; &lt;span class=&quot;hl-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hl-identifier&quot;&gt;lexer&lt;/span&gt;
&lt;span class=&quot;hl-keyword&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;hl-identifier&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hl-identifier&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;hl-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hl-identifier&quot;&gt;lpeg&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;hl-identifier&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hl-identifier&quot;&gt;lpeg&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;hl-identifier&quot;&gt;S&lt;/span&gt;

&lt;span class=&quot;hl-comment&quot;&gt;-- Base on the existing HTML parser&lt;/span&gt;
&lt;span class=&quot;hl-keyword&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;hl-identifier&quot;&gt;lex&lt;/span&gt; &lt;span class=&quot;hl-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hl-identifier&quot;&gt;lexer&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;hl-function&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hl-operator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;hl-identifier&quot;&gt;inherit&lt;/span&gt; &lt;span class=&quot;hl-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hl-identifier&quot;&gt;lexer&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;hl-function&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hl-string&quot;&gt;&amp;apos;html&amp;apos;&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;hl-comment&quot;&gt;-- Embed the existing Lua parser&lt;/span&gt;
&lt;span class=&quot;hl-keyword&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;hl-identifier&quot;&gt;lua&lt;/span&gt; &lt;span class=&quot;hl-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hl-identifier&quot;&gt;lexer&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;hl-function&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hl-string&quot;&gt;&amp;apos;lua&amp;apos;&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;hl-comment&quot;&gt;-- Specify `&amp;lt;%` and `%&amp;gt;` (and highlight the tags as &amp;quot;preprocessor directives&amp;quot;)&lt;/span&gt;
&lt;span class=&quot;hl-keyword&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;hl-identifier&quot;&gt;start_rule&lt;/span&gt; &lt;span class=&quot;hl-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hl-identifier&quot;&gt;lex&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hl-function&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hl-identifier&quot;&gt;lexer&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;hl-identifier&quot;&gt;PREPROCESSOR&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hl-string&quot;&gt;&amp;apos;&amp;lt;%&amp;apos;&lt;/span&gt; &lt;span class=&quot;hl-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hl-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hl-function&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hl-string&quot;&gt;&amp;apos;=&amp;apos;&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hl-operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;hl-function&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hl-string&quot;&gt;&amp;apos;-&amp;apos;&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;hl-number&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;hl-keyword&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;hl-identifier&quot;&gt;end_rule&lt;/span&gt; &lt;span class=&quot;hl-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hl-identifier&quot;&gt;lex&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hl-function&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hl-identifier&quot;&gt;lexer&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;hl-identifier&quot;&gt;PREPROCESSOR&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hl-function&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hl-string&quot;&gt;&amp;apos;-&amp;apos;&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;hl-number&quot;&gt;-1&lt;/span&gt; &lt;span class=&quot;hl-operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;hl-string&quot;&gt;&amp;apos;%&amp;gt;&amp;apos;&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;hl-comment&quot;&gt;-- Highlight contained code as Lua&lt;/span&gt;
&lt;span class=&quot;hl-identifier&quot;&gt;lex&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;hl-function&quot;&gt;embed&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hl-identifier&quot;&gt;lua&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hl-identifier&quot;&gt;start_rule&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hl-identifier&quot;&gt;end_rule&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;hl-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hl-identifier&quot;&gt;lex&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;result&quot;&gt;Result&lt;/h2&gt;
&lt;p&gt;Finally, here is an example of a highlighted etlua template:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-etlua&quot;&gt;&lt;span class=&quot;hl-tag&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;hl-tag&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;hl-tag&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hl-preprocessor&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;hl-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hl-identifier&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hl-identifier&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;hl-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hl-function&quot;&gt;ipairs&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hl-identifier&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;hl-function&quot;&gt;sortBy&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hl-identifier&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hl-string&quot;&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hl-keyword&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;hl-keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;hl-preprocessor&quot;&gt;-%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hl-tag&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;hl-tag&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;hl-tag&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hl-tag&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;hl-tag&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hl-attribute&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;hl-string&quot;&gt;&amp;quot;&amp;lt;%= item.path %&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;hl-tag&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hl-preprocessor&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;hl-identifier&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;hl-identifier&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;hl-preprocessor&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;hl-tag&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;hl-tag&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;hl-tag&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hl-tag&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;hl-tag&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;hl-tag&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hl-preprocessor&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;hl-keyword&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;hl-preprocessor&quot;&gt;-%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hl-tag&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;hl-tag&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;hl-tag&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Not too bad for a few lines of Lua!&lt;/p&gt;
</content>
</entry>
<entry>
<title>luasmith gets link-checking and improved Atom feeds</title>
<id>https://log.schemescape.com/posts/static-site-generators/extending-luasmith.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/static-site-generators/extending-luasmith.html"/>
<updated>2025-06-01T00:00:00.000Z</updated>
<summary type="text">Feature creep has set in for my ~270 KB static site generator, luasmith.</summary>
<content type="html">&lt;p&gt;Recently, I created &lt;a href=&quot;https://github.com/jaredkrinke/luasmith&quot;&gt;luasmith&lt;/a&gt;, &lt;a href=&quot;https://log.schemescape.com/posts/static-site-generators/smallest-static-site-generator.html&quot;&gt;a ~270 KB static site generator&lt;/a&gt;, with a focus on being small and simple. Obviously, I am now recklessly stuffing it with features.&lt;/p&gt;
&lt;h1 id=&quot;bloat&quot;&gt;&amp;quot;Bloat&amp;quot;&lt;/h1&gt;
&lt;p&gt;The initial version of luasmith lacked some functionality I valued from &lt;a href=&quot;https://jaredkrinke.github.io/md2blog/&quot;&gt;md2blog&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Checking for broken internal links (including hashes/fragments/anchors)&lt;/li&gt;
&lt;li&gt;Including post content directly within the Atom feed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, the latest release of luasmith includes these features, and there&#039;s good news from a bloat perspective:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;These additions &lt;strong&gt;only added ~3 KB to the (compressed) size of the release&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Generating my blog still takes &amp;lt; 200 ms&lt;/strong&gt;, on an old laptop (though it &lt;em&gt;is&lt;/em&gt; ~20% slower, in relative terms)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;why-now-how&quot;&gt;Why now? How?&lt;/h1&gt;
&lt;p&gt;The reason luasmith didn&#039;t originally include these features, despite their utility, is that they require &lt;strong&gt;additional parsing&lt;/strong&gt; (well... you could maybe hook into the Markdown parser, but, besides tight coupling, it wouldn&#039;t work outside of Markdown). For link-checking, it&#039;s obvious why parsing is required. For Atom feed content, the reason is that most RSS/Atom readers don&#039;t support adjusting relative links using &lt;a href=&quot;https://www.w3.org/TR/xmlbase/&quot;&gt;xml:base&lt;/a&gt;, so relative links from e.g. &lt;code&gt;posts/topic/foo.html&lt;/code&gt; won&#039;t work without modification when viewed from &lt;code&gt;posts/feed.xml&lt;/code&gt; (which is in a different directory). (My solution is to rewrite relative links.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rather than pull in some heavyweight parsing library, I decided to roll my own minimal HTML parser/transformer: &lt;a href=&quot;https://github.com/jaredkrinke/chtml&quot;&gt;chtml&lt;/a&gt;&lt;/strong&gt;. It&#039;s probably deficient and definitely poorly documented, but it seems to work.&lt;/p&gt;
&lt;h2 id=&quot;lua&quot;&gt;Lua&lt;/h2&gt;
&lt;p&gt;Once again, I&#039;ve found C and Lua to be a comfortable combination. I wasn&#039;t looking forward to writing string manipulation code in C, but I had no need to fear--I just pushed all string manipulation into the somewhat safer world of Lua. Problem &lt;del&gt;solved&lt;/del&gt; avoided!&lt;/p&gt;
&lt;p&gt;Having said that, &lt;strong&gt;I&#039;m still trying to decide how I &lt;em&gt;really&lt;/em&gt; feel about Lua&lt;/strong&gt;. On the one hand, I like that I can easily integrate C code, leading to a process where I write performance-critical code in C and everything else in Lua. This combination provides both convenience and performance. &lt;em&gt;But&lt;/em&gt; I am starting to wonder if it would make more sense to just write &lt;em&gt;everything&lt;/em&gt; in a more featureful language and then rely on a JIT to make things fast. Yes, I&#039;m talking about TypeScript/JavaScript and Node.js. &lt;strong&gt;It frustrates me to pull in such a huge engineering effort (V8), just to make my own developer life a bit more convenient&lt;/strong&gt;... but I can see why businesses are constantly making that choice. Of course, I also dislike these businesses&#039; bloated results, so I don&#039;t necessarily &lt;em&gt;agree&lt;/em&gt; with their logic. Like I said: still pondering.&lt;/p&gt;
&lt;h1 id=&quot;the-last-biggest-challenge&quot;&gt;The last, biggest challenge&lt;/h1&gt;
&lt;p&gt;Annoyingly, I&#039;m still not at the point where I can fully replace md2blog because I like build-time syntax highlighting for code blocks. md2blog uses &lt;a href=&quot;https://highlightjs.org/&quot;&gt;highlight.js&lt;/a&gt; for syntax highlighting, and it was super convenient to integrate with Node and Deno. But luasmith is built on C and Lua instead of JavaScript, so highlight.js doesn&#039;t really have a place to plug in. Embedding QuickJS just for highlight.js would contradict my simplicity goal, so I need a different solution. Sadly, most syntax highlighting solutions seem to be based on JavaScript. Or Rust, which I am also avoiding for this side project, due to complexity. It&#039;s almost certainly misguided, but, &lt;strong&gt;for hobbies, I&#039;d like to stick to a software stack that I feel like I can at least ever have a hope of understanding in its entirety&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Maybe some day I will work up the nerve to integrate &lt;a href=&quot;https://github.com/tree-sitter/tree-sitter&quot;&gt;Tree-sitter&lt;/a&gt; and a bunch of associated grammars, to add syntax highlighting (bringing luasmith into build-time featuer parity with md2blog), but I&#039;m sure that will massively increase the size and (internal) complexity of luasmith. Or perhaps I can write an optional, external tool that is purpose-built for syntax highlighting. We&#039;ll see...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Syntax highlighting &lt;a href=&quot;https://log.schemescape.com/posts/static-site-generators/luasmith-syntax-highlighting.html&quot;&gt;is now implemlented in luasmith&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;addendum-with-actual-bloat&quot;&gt;Addendum, with actual bloat&lt;/h2&gt;
&lt;p&gt;I learned that Tree-sitter &lt;a href=&quot;https://tree-sitter.github.io/tree-sitter/cli/index.html&quot;&gt;has a command line interface&lt;/a&gt;. Problem solved, right? Let&#039;s install and find out:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt install tree-sitter-cli
Reading package lists... Done
...
The following additional packages will be installed:
  binaryen clang-15 emscripten gyp libcares2 libclang-common-15-dev libclang-cpp15t64 libclang-rt-15-dev libclang1-15t64 libjs-d3 libjs-inherits libllvm15t64 libnode-dev libnode109 lld-15 llvm-15 llvm-15-dev llvm-15-linker-tools
  llvm-15-runtime llvm-15-tools node-abbrev node-acorn node-agent-base node-ansi-regex node-ansi-styles node-aproba node-are-we-there-yet node-balanced-match node-brace-expansion node-busboy node-chownr node-cjs-module-lexer node-clone
  node-color-convert node-color-name node-console-control-strings node-core-util-is node-data-uri-to-buffer node-debug node-defaults node-delegates node-encoding node-fancy-log node-fetch node-fs.realpath node-gauge node-glob
  node-graceful-fs node-gyp node-has-unicode node-https-proxy-agent node-iconv-lite node-inflight node-inherits node-isarray node-isexe node-jsonparse node-lru-cache node-minimatch node-minipass node-mkdirp node-ms node-nopt node-npmlog
  node-once node-osenv node-process-nextick-args node-readable-stream node-rimraf node-safe-buffer node-semver node-set-blocking node-signal-exit node-slice-ansi node-string-decoder node-string-width node-strip-ansi node-tar
  node-time-stamp node-undici node-util-deprecate node-wcwidth.js node-which node-wide-align node-wrappy node-xtend node-yallist nodejs nodejs-doc python3-numpy
...
0 upgraded, 91 newly installed, 0 to remove and 75 not upgraded.
Need to get 228 MB of archives.
After this operation, 1,594 MB of additional disk space will be used.
Do you want to continue? [Y/n] n
Abort.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;That&#039;s nearly 1.6 GB of disk space for a Tree-sitter CLI&lt;/strong&gt;. I&#039;m speechless. I guess it&#039;s written in JavaScript for Node.js, so that explains ~100 MB of it. But why does it need LLVM? Emscripten?? NumPy???&lt;/p&gt;
&lt;p&gt;I suspect this is mostly related to Node.js native modules (and perhaps how they&#039;re packaged on Debian, specifically), but... &lt;strong&gt;I just can&#039;t deal with this level of bloat&lt;/strong&gt;.&lt;/p&gt;
</content>
</entry>
<entry>
<title>A 270 KB static site generator based on Markdown and Lua</title>
<id>https://log.schemescape.com/posts/static-site-generators/smallest-static-site-generator.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/static-site-generators/smallest-static-site-generator.html"/>
<updated>2025-04-22T00:00:00.000Z</updated>
<summary type="text">Tired of bloat, I made a new static site generator that is 10x faster and 100x smaller than my last effort. And this one runs on NetBSD.</summary>
<content type="html">&lt;p&gt;Today, I unveil my most gratuitous static site generator yet: &lt;a href=&quot;https://github.com/jaredkrinke/luasmith&quot;&gt;luasmith&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;It&#039;s &lt;del&gt;270 KB&lt;/del&gt; 450 KB&lt;/strong&gt; (static binary + templates for this site, gzip compressed)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It builds my ~140 page site in &lt;del&gt;150 ms&lt;/del&gt; 300 ms&lt;/strong&gt; (wall clock time, on an 11-year-old old laptop)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It performs acceptably on a 28-year-old laptop, running NetBSD&lt;/strong&gt; (Pentium 166 MHz)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It&#039;s trivial to compile&lt;/strong&gt;, requiring only a C compiler, &lt;code&gt;make&lt;/code&gt;, &lt;code&gt;sed&lt;/code&gt;, and &lt;code&gt;sh&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: This site is now &lt;a href=&quot;https://github.com/jaredkrinke/luasmith/tree/main/themes/md2blog&quot;&gt;built using luasmith&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;show-me-the-code&quot;&gt;Show me the code!&lt;/h1&gt;
&lt;p&gt;It&#039;s like &lt;a href=&quot;https://metalsmith.io/&quot;&gt;Metalsmith&lt;/a&gt; in Lua. See &lt;a href=&quot;https://github.com/jaredkrinke/luasmith/blob/main/docs/tutorial.md&quot;&gt;the tutorial&lt;/a&gt; for more, but here&#039;s an example that converts Markdown to HTML and adds the page&#039;s title to the resulting HTML:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;&lt;span class=&quot;hl-comment&quot;&gt;-- Minimal HTML template (used below)&lt;/span&gt;
&lt;span class=&quot;hl-keyword&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;hl-identifier&quot;&gt;outer&lt;/span&gt; &lt;span class=&quot;hl-operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;hl-string&quot;&gt;[[
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;&amp;lt;title&amp;gt;&amp;lt;%= title %&amp;gt;&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;&amp;lt;%- content %&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
]]&lt;/span&gt;

&lt;span class=&quot;hl-comment&quot;&gt;-- Read content/*.md, convert to HTML,&lt;/span&gt;
&lt;span class=&quot;hl-comment&quot;&gt;-- apply template, write to out/*.html&lt;/span&gt;
&lt;span class=&quot;hl-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hl-operator&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;hl-function&quot;&gt;readFromSource&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hl-string&quot;&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;hl-function&quot;&gt;processMarkdown&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;hl-function&quot;&gt;applyTemplates&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;hl-operator&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;hl-string&quot;&gt;&amp;quot;%.html$&amp;quot;&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;hl-identifier&quot;&gt;outer&lt;/span&gt; &lt;span class=&quot;hl-operator&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;hl-operator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;hl-function&quot;&gt;writeToDestination&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hl-string&quot;&gt;&amp;quot;out&amp;quot;&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;hl-operator&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;motivation&quot;&gt;Motivation&lt;/h1&gt;
&lt;p&gt;Obviously, the world does not need another static site generator--and I don&#039;t expect this SSG to become popular. So how did I end up here?&lt;/p&gt;
&lt;p&gt;In a word, my motivation was: &lt;strong&gt;simplicity&lt;/strong&gt;. I wanted an SSG that was:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Simple to understand&lt;/li&gt;
&lt;li&gt;Simple to bootstrap&lt;/li&gt;
&lt;li&gt;Simple to maintain&lt;/li&gt;
&lt;li&gt;Simple to deploy&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;implementation&quot;&gt;Implementation&lt;/h1&gt;
&lt;p&gt;Here&#039;s my take on the goals above.&lt;/p&gt;
&lt;h2 id=&quot;simple-to-understand&quot;&gt;Simple to understand&lt;/h2&gt;
&lt;p&gt;First, I wanted the architecture to be simple:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The build pipeline is just a Lua script (similar to &lt;a href=&quot;https://metalsmith.io/&quot;&gt;Metalsmith&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Page templates are constructed using Lua&lt;/strong&gt; (via &lt;a href=&quot;https://github.com/leafo/etlua&quot;&gt;etlua&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Metadata on items can be specified in frontmatter using Lua (or a subset of YAML)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Relative links between Markdown files &amp;quot;just work&amp;quot;&lt;/strong&gt; and are checked at build time (including links to headings)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Instead of creating a bespoke domain-specific language for defining the structure of a generated site or its templates, you just write some Lua code that glues together a few processing nodes and then supply templates that &lt;em&gt;also&lt;/em&gt; use Lua (e.g. for iteration).&lt;/p&gt;
&lt;p&gt;Overall, I&#039;d describe the architecture as &amp;quot;&lt;strong&gt;Metalsmith in Lua, with zero runtime dependencies&lt;/strong&gt; (beyond libc)&amp;quot;.&lt;/p&gt;
&lt;h2 id=&quot;simple-to-bootstrap&quot;&gt;Simple to bootstrap&lt;/h2&gt;
&lt;p&gt;Given my &lt;a href=&quot;https://log.schemescape.com/posts/static-site-generators/../programming-languages/future-proof-languages.html&quot;&gt;musings about future-proof programming languages&lt;/a&gt;, it&#039;s obvious that I&#039;d like to be able to continue to compile and use my software in the future. That is easier said than done! The problem is that identifying languages that will stick around is hard. Twenty years ago, Perl might have been a reasonable choice for an SSG, but today I don&#039;t even remember how to setup a Perl project.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://jaredkrinke.github.io/md2blog/&quot;&gt;The best static site generator ever made&lt;/a&gt; is built on TypeScript/JavaScript and &lt;a href=&quot;https://deno.com/&quot;&gt;Deno&lt;/a&gt;. As much as I like Deno, I&#039;m not sure it will be maintained decades down the road. Given that I&#039;ll never know how to get it running on an i586 computer, I have doubts I&#039;d be able to get it running on potential future architectures either.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To avoid these headaches, I went with the lowest common denominator: C&lt;/strong&gt;. It&#039;s not convenient, it&#039;s not modern, but C works everywhere and I&#039;m certain C will persist (for better or worse).&lt;/p&gt;
&lt;p&gt;Aside: ideally, I&#039;d be writing as much native code in Rust as possible, to ensure memory safety. Unfortunately, &lt;strong&gt;Rust&#039;s modern approach is at odds with my desire for simplicity&lt;/strong&gt;. The toolchain is huge, the dependency trees are large, and the language is vast. Rust definitely looks like the future of robust low-level software, but &lt;strong&gt;for cozy side projects, I prefer being a simpleton living in the past&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;simple-to-maintain&quot;&gt;Simple to maintain&lt;/h2&gt;
&lt;p&gt;One frustration I have with the JavaScript ecosystem is that it&#039;s constantly changing. Node, Deno, and Bun do a respectable job of keeping old versions around, but I don&#039;t want to have to worry about breaking changes.&lt;/p&gt;
&lt;p&gt;On the other hand, C changes very slowly, and previous verisons of Lua are essentially set in stone. Throw in some static linking, and you&#039;ve even got an artifact that should stay usable for a long time.&lt;/p&gt;
&lt;p&gt;I&#039;ve also minimized the number of (vendored, compile-time) dependencies involved. Here&#039;s the full list:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mity/md4c&quot;&gt;md4c&lt;/a&gt; for converting Markdown to HTML&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.lua.org/&quot;&gt;Lua&lt;/a&gt; for metadata, scripting, etc.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/leafo/etlua&quot;&gt;etlua&lt;/a&gt; for templates&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Added in a few more for syntax highlighting:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.inf.puc-rio.br/~roberto/lpeg/&quot;&gt;LPeg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/orbitalquark/scintillua&quot;&gt;Scintillua&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;You&#039;ll note that these libraries are doing all of the heavy lifting&lt;/strong&gt;. I&#039;ve basically only written glue code, an entry point, and some infrastructure. And most of the code I wrote is in Lua (which is much easier to write than C--and fast enough for all but the innermost loops).&lt;/p&gt;
&lt;h2 id=&quot;simple-to-deploy&quot;&gt;Simple to deploy&lt;/h2&gt;
&lt;p&gt;Static binaries are wonderful. &lt;em&gt;Tiny&lt;/em&gt; static binaries are even wonderful-er. &lt;strong&gt;Just copy over a tiny zip file, unzip it, and you&#039;re done&lt;/strong&gt;. Need I say more?&lt;/p&gt;
&lt;h1 id=&quot;downsides&quot;&gt;Downsides&lt;/h1&gt;
&lt;p&gt;Of course, there are downsides to the approach I took:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Writing C code is fraught with peril -- fortunately, the hardest parts were mostly already done by the md4c and Lua authors&lt;/li&gt;
&lt;li&gt;Syntax highlighting is &lt;em&gt;not&lt;/em&gt; simple -- so I just cut that feature, at least for now (&lt;strong&gt;update&lt;/strong&gt;: syntax highlighting is now supported!)&lt;/li&gt;
&lt;li&gt;The security model of an SSG that uses Lua scripts for everything is... not ideal -- &lt;strong&gt;only use templates you trust!&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additionally, I haven&#039;t taken the time to setup a proper development and debugging environment for C and Lua. I need to investiage static analysis and debugging tools for Lua, as well as find a tolerable frontend for GDB. This is where I really miss Emacs+SLIME for Common Lisp or VS Code for TypeScript/Python.&lt;/p&gt;
&lt;h1 id=&quot;future-areas-of-exploration&quot;&gt;Future areas of exploration&lt;/h1&gt;
&lt;p&gt;Now that I&#039;ve got a static site generator running on a vintage laptop with NetBSD, where am I headed next? I&#039;m not exactly sure, but some ideas follow.&lt;/p&gt;
&lt;h2 id=&quot;designing-for-the-text-mode-web&quot;&gt;Designing for the text-mode web&lt;/h2&gt;
&lt;p&gt;At some point, I&#039;d like to redesign my site using an even more minimal theme. In fact, &lt;strong&gt;I&#039;d like to optimize my site for text mode browsers&lt;/strong&gt; like &lt;a href=&quot;https://lynx.browser.org/&quot;&gt;lynx&lt;/a&gt; and &lt;a href=&quot;https://w3m.sourceforge.net/&quot;&gt;w3m&lt;/a&gt;. Why? Because I like using w3m and I want my site to be easy to use within w3m. Or maybe it&#039;s because I hate how bloated modern web browsers have become.&lt;/p&gt;
&lt;h2 id=&quot;further-simplifying-distribution&quot;&gt;Further simplifying distribution&lt;/h2&gt;
&lt;p&gt;Distributing native code necessarily requires per-platform packages. Or does it? Can I package and release this minimal static site generator as a multi-OS polyglot binary using &lt;a href=&quot;https://github.com/jart/cosmopolitan&quot;&gt;Cosmopolitan libc&lt;/a&gt;? Note: sadly, I don&#039;t think 32-bit/i386 is supported for now.&lt;/p&gt;
&lt;h2 id=&quot;simplifying-the-entire-system&quot;&gt;Simplifying the entire system&lt;/h2&gt;
&lt;p&gt;I&#039;d like to see if I can bootstrap my entire web site&#039;s workflow from &lt;a href=&quot;https://github.com/oasislinux/oasis&quot;&gt;Oasis Linux&lt;/a&gt; (a small, statically linked, Linux-based operating system that is simple, but capable). &lt;strong&gt;Oasis sounds like a modern system that a single person can wrap their head around&lt;/strong&gt; (minus the Linux kernel--though perhaps a simpler kernel could be substitutded...).&lt;/p&gt;
&lt;h2 id=&quot;blogging-on-vintage-computers&quot;&gt;Blogging on vintage computers&lt;/h2&gt;
&lt;p&gt;I&#039;m curious how far back I can go as far as vintage computing and still be able to build a static site. Can I build my SSG on Windows 98? DOS? Amiga? Inquiring minds want to know!&lt;/p&gt;
&lt;h2 id=&quot;incremental-builds&quot;&gt;Incremental builds&lt;/h2&gt;
&lt;p&gt;Speaking of old, slow computers, I secretly designed this SSG to support incremental rebuilds to ensure that it runs fast even on old hardware. The only issue with this plan is that &lt;strong&gt;md4c is so fast that I&#039;m not sure it&#039;s worth optimizing the build process&lt;/strong&gt;. I can rebuild my entire site from scratch on a 166 MHz laptop in a few seconds.&lt;/p&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Creating a &lt;em&gt;non-bloated&lt;/em&gt; Markdown-based static site generator has been a bucket list item for me--and now it&#039;s done!&lt;/p&gt;
&lt;p&gt;Beyond personal goals, &lt;strong&gt;I found C+Lua to be a comfortable combination for side projects&lt;/strong&gt;. This came as a surprise! Lua isn&#039;t my favorite language to write (though it&#039;s certainly much simpler to wield than C). Having said that, it&#039;s a beautifully simple language that&#039;s easy to integrate. Despite being primarily driven to Lua by my goal of building a small (in binary size) tool, Lua&#039;s minimalist take on a mostly-normal-looking scripting language won me over because I could literally pick it up and be productive within an hour or two.&lt;/p&gt;
&lt;p&gt;With that out of the way, &lt;strong&gt;I should probably attend to hobbies other than static site generator performance art&lt;/strong&gt;. Until next time!&lt;/p&gt;
&lt;h1 id=&quot;resources&quot;&gt;Resources&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jaredkrinke/luasmith&quot;&gt;Repository for luasmith&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jaredkrinke/luasmith/blob/main/docs/tutorial.md&quot;&gt;Tutorial for luasmith&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
</entry>
<entry>
<title>Did the Google Domains sale to Squarespace open my domain up to phishers?</title>
<id>https://log.schemescape.com/posts/web-development/squarespace-phishing.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/web-development/squarespace-phishing.html"/>
<updated>2025-03-14T00:00:00.000Z</updated>
<summary type="text">That time I got phishing mail from my own domain.</summary>
<content type="html">&lt;p&gt;About 5 weeks ago, I randomly checked my spam mail folder and saw a phishing mail &lt;em&gt;sent from my own domain&lt;/em&gt;, schemescape.com. I assumed it was marked as spam because it couldn&#039;t be validated.&lt;/p&gt;
&lt;p&gt;To my surprise, &lt;strong&gt;the mail was verified (via &lt;a href=&quot;https://en.wikipedia.org/wiki/Sender_Policy_Framework&quot;&gt;SPF&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/DomainKeys_Identified_Mail&quot;&gt;DKIM&lt;/a&gt;) as being from schemescape.com.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&#039;m pretty sure I hadn&#039;t tried to phish myself, so... &lt;strong&gt;what happened?&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;background&quot;&gt;Background&lt;/h1&gt;
&lt;p&gt;I originally registered schemescape.com using Google Domains and I set up &lt;em&gt;in-bound&lt;/em&gt; email forwarding, so I could receive mail at my domain (but not send it).&lt;/p&gt;
&lt;p&gt;On June 15th, 2023, &lt;a href=&quot;https://domains.google/&quot;&gt;Google announced it was selling its Google Domains business to Squarespace&lt;/a&gt;. By July 2024, all domains had been migrated to Squarespace.&lt;/p&gt;
&lt;p&gt;With that context in mind, let&#039;s travel back (forward?) to a few weeks ago.&lt;/p&gt;
&lt;h1 id=&quot;investigation&quot;&gt;Investigation&lt;/h1&gt;
&lt;h2 id=&quot;mailgun&quot;&gt;Mailgun&lt;/h2&gt;
&lt;p&gt;To confirm that I didn&#039;t have a &amp;quot;Jekyll and Hyde&amp;quot; self-phishing situation, I checked the email headers and observed that &lt;strong&gt;the mail was sent from a sever I&#039;d never heard of&lt;/strong&gt;: &lt;code&gt;a168.a94b46b0.use4.send.mailgun.net&lt;/code&gt; (198.244.55.168). So what is Mailgun, and how are they sending mail from &lt;em&gt;my&lt;/em&gt; domain?&lt;/p&gt;
&lt;p&gt;Mailgun advertises itself as a &amp;quot;transactional email API service for developers&amp;quot;. I think it&#039;s a legitimate business, so I&#039;m assuming some bad actor is abusing their service. I reported the activity to Mailgun, but that only explains that Mailgun is involved.&lt;/p&gt;
&lt;h2 id=&quot;spfdkim&quot;&gt;SPF/DKIM&lt;/h2&gt;
&lt;p&gt;I don&#039;t know much about email security, but skimming the Wikipedia articles above indicates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SPF ensures the sending mail server is authorized to send mail for the domain&lt;/li&gt;
&lt;li&gt;DKIM is used to sign (and authenticate) each email from the domain&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Poking around my DNS records, &lt;strong&gt;there are two suspicious TXT records&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SPF (on schemescape.com): &lt;code&gt;v=spf1 include:mailgun.org ~all&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;DKIM (on k1._domainkey.schemescape.com): &lt;code&gt; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDXlrH338T643ulCW/ROaqdFhTlU332Av6qpMN69oMhKJeUgPp9RFHIMnRecVJAdLVDM3R6RpAsgNdB8EGv1Xhu3/vPA83H/KtGv8p6s03oVLhDaN3emmPZRi8WHlyDWM/W9VPE0aOvfWB/3ONXLaQrJOT2 /JUZIAnQ7ocfZl74kwIDAQAB&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Where did those come from?&lt;/strong&gt; I certainly never authored those DNS records--I didn&#039;t even know about the &lt;code&gt;_domainkey&lt;/code&gt; part of DKIM! Who created those records?&lt;/p&gt;
&lt;h2 id=&quot;mailgun-1&quot;&gt;Mailgun&lt;/h2&gt;
&lt;p&gt;Both records match &lt;a href=&quot;https://help.mailgun.com/hc/en-us/articles/32884702360603-Domain-Verification-Setup-Guide#01GCQE107VSXRWCKSVCHX0XXQQ&quot;&gt;Mailgun&#039;s Domain Verification Setup Guide&lt;/a&gt;, so my domain is setup for Mailgun. &lt;strong&gt;But who set this up?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Aside: why isn&#039;t Mailgun&#039;s setup unique to each domain?&lt;/p&gt;
&lt;h2 id=&quot;squarespace&quot;&gt;Squarespace?&lt;/h2&gt;
&lt;p&gt;At first, I wasn&#039;t sure if it was Google or Squarespace that created these records on my behalf. &lt;a href=&quot;https://forum.squarespace.com/topic/296578-squarespace-email-forwarding-defaults-for-ex-google-domains-mailgun/&quot;&gt;A thread on the Squarespace forum&lt;/a&gt; had at least one person noting that their mail forwarding records were modified during the Google Domains -&amp;gt; Squarespace transition, which suggesed it might be Squarespace&#039;s doing.&lt;/p&gt;
&lt;h2 id=&quot;squarespace-1&quot;&gt;Squarespace!&lt;/h2&gt;
&lt;p&gt;Fortunately, DNS records are public, and at least one site has been tracking records over time: &lt;a href=&quot;https://dnshistory.org/&quot;&gt;DNS History (dnshistory.org)&lt;/a&gt;. Looking at their history for my domain, I see that &lt;strong&gt;the SPF record from above was added sometime around May 13th, 2024, right around when Squarespace notified me that my domain had been migrated to their service&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Given the info above, my best guess is that the Google Domains -&amp;gt; Squarespace transition (or the subsequent Squarespace flow for enabling email forwarding) somehow caused these records to be added, as some sort of (unnecessary, in my case) Mailgun integration. &lt;strong&gt;At that point, a malicious actor just had to claim (&amp;quot;&lt;a href=&quot;https://help.mailgun.com/hc/en-us/articles/32884702360603-Domain-Verification-Setup-Guide#01GCQE107WHJR205TAGQAERRAG&quot;&gt;verify&lt;/a&gt;&amp;quot;) my domain on Mailgun, and then they could start phishing&lt;/strong&gt;, using SPF- and DKIM-verified, legitimate-looking mail.&lt;/p&gt;
&lt;h2 id=&quot;squarespace-2&quot;&gt;Squarespace!!!&lt;/h2&gt;
&lt;p&gt;Annoyingly, &lt;strong&gt;Squarespace seems to &lt;em&gt;require&lt;/em&gt; the Mailgun records for any kind of mail forwarding&lt;/strong&gt;. I don&#039;t see an option for in-bound-only forwarding (like I had on Google Domains). So... I don&#039;t see a way to avoid this problem other than creating a Mailgun account and claiming your domain there.&lt;/p&gt;
&lt;h1 id=&quot;security-response-or-not&quot;&gt;Security response... or not&lt;/h1&gt;
&lt;p&gt;I documented my understanding of the issue and reported it to Squarespace, via their Hackerone-based security funnel. Either fortunately (because I misunderstood) or unfortunately (because Squarespace misunderstood), &lt;strong&gt;Squarespace closed my report because it was not a &amp;quot;significant&amp;quot; security issue&lt;/strong&gt;. Obviously, I disagree. I received a &amp;quot;valid&amp;quot; (as far as email security is concerned) phishing mail from my own domain! There&#039;s definitely a problem somewhere!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;My requests for clarification on how email domain hijacking is not a &amp;quot;significant&amp;quot; security issue have, to date, received no response (after roughly 5 weeks)&lt;/strong&gt;. To be fair, I did not attempt to replicate the process outlined above (because everyone I know who used Google Domains had already left Squarespace and hijacking some random person&#039;s domain sounds like actual, illegal hacking).&lt;/p&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Disclaimer: I&#039;m not an email security expert (or even any kind of security researcher) and I don&#039;t know how Squarespace and Mailgun are integrated.&lt;/p&gt;
&lt;p&gt;But &lt;strong&gt;I think any Squarespace domain with email forwarding &lt;em&gt;that is not linked to a Mailgun account&lt;/em&gt; could be ripe for phishing&lt;/strong&gt;. I even found that &lt;a href=&quot;https://www.reddit.com/r/gsuite/comments/1fcya1x/google_domains_squarespace_and_email_forwarding/&quot;&gt;someone else came to the same conclusion on Reddit six months ago&lt;/a&gt;. Squarespace assured me there is no problem, but provided no detail.&lt;/p&gt;
&lt;p&gt;Regardless, I moved my domain away from Squarespace (to Porkbun). It&#039;s not like I &lt;em&gt;chose&lt;/em&gt; to use Squarespace in the first place--Google chose for me.&lt;/p&gt;
&lt;h1 id=&quot;corrections&quot;&gt;Corrections?&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;If you &lt;em&gt;are&lt;/em&gt; an email security expert and notice any mistakes in my understanding or logic above, &lt;em&gt;please&lt;/em&gt; email me at &lt;a href=&quot;mailto:log@schemescape.com&quot;&gt;log@schemescape.com&lt;/a&gt;!&lt;/strong&gt; I would love both to be wrong (because then there&#039;s not a problem) and to be corrected (so I can learn).&lt;/p&gt;
</content>
</entry>
</feed>
