<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Schemescape</title>
<id>https://log.schemescape.com/</id>
<link rel="self" href="https://log.schemescape.com/feed.xml"/>
<link rel="alternate" href="https://log.schemescape.com/"/>
<author>
<name>Schemescape</name>
</author>
<updated>2024-04-09T03:51:29.610Z</updated>

<entry>
<title>One quarter of the way to 100 programming languages</title>
<id>https://log.schemescape.com/posts/programming-languages/100-languages-5.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/programming-languages/100-languages-5.html"/>
<updated>2024-04-08T00:00:00.000Z</updated>
<summary type="text">Or: PostScript is a programming language!?</summary>
<content type="html">&lt;p&gt;I&amp;#39;m &lt;strong&gt;25% of the way&lt;/strong&gt; to &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/100-languages.html&quot;&gt;having written code in 100 different programming languages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&quot;https://github.com/jaredkrinke/100-languages&quot;&gt;this repository&lt;/a&gt; for proof.&lt;/p&gt;
&lt;h1 id=&quot;week-3-plus-a-day&quot;&gt;Week 3 (plus a day)&lt;/h1&gt;
&lt;p&gt;As planned, I slowed down from &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/100-languages-4.html&quot;&gt;last week&lt;/a&gt;, but I still managed to make it to the 25% mark. That&amp;#39;s 25 languages down, and 75 to go! Now that I&amp;#39;m no longer rushing, I&amp;#39;m enjoying the process of playing with new languages more.&lt;/p&gt;
&lt;p&gt;All languages were new to me for this week. Notably, &lt;strong&gt;I didn&amp;#39;t even realize that &lt;a href=&quot;https://en.wikipedia.org/wiki/PostScript&quot;&gt;PostScript&lt;/a&gt; was a programming language at all&lt;/strong&gt;! Turns out it&amp;#39;s a &lt;a href=&quot;https://en.wikipedia.org/wiki/Forth_(programming_language)&quot;&gt;Forth&lt;/a&gt;-like (stack-based) procedural language. I&amp;#39;m still feel like I&amp;#39;m struggling with stack-based languages, but it might just be a matter of perspective--compared to straight assembly, Forths are a joy to use!&lt;/p&gt;
&lt;p&gt;The rest of this post contains notes on the languages I used.&lt;/p&gt;
&lt;h2 id=&quot;bbc-basic&quot;&gt;BBC BASIC&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;I&amp;#39;ve never seen or used a &lt;a href=&quot;https://en.wikipedia.org/wiki/BBC_Micro&quot;&gt;BBC Micro&lt;/a&gt;&lt;/strong&gt; (the closest I&amp;#39;ve used is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Commodore_64&quot;&gt;Commodore 64&lt;/a&gt;), but it&amp;#39;s famous enough that I wanted to give one an (&lt;a href=&quot;https://bbcmic.ro/&quot;&gt;emulated&lt;/a&gt;) spin.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;BBC BASIC puts Commodore BASIC to shame&lt;/strong&gt; with features like named procedures (finally, no more line numbers!)&lt;/li&gt;
&lt;li&gt;With respect to solving Project Euler problems, integer arithmetic and division with remainders are welcome additions&lt;/li&gt;
&lt;li&gt;Despite its age, &lt;a href=&quot;https://www.bbcbasic.co.uk/bbcwin/tutorial/index.html&quot;&gt;excellent documentation&lt;/a&gt; is still available&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;unison&quot;&gt;Unison&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.unison-lang.org/&quot;&gt;Unison&lt;/a&gt; stores and references code in a content-addressed syntax tree format&lt;/strong&gt;, allowing for things like accurate incremental builds. It appears to be designed for distributed systems, so I&amp;#39;m not in the target audience, but it sounded interesting enough that I&amp;#39;ve always wanted to try it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Having the codebase manager cache and update code automatically is convenient&lt;/li&gt;
&lt;li&gt;&amp;quot;Watches&amp;quot; and tests allow for &lt;strong&gt;immediate feedback when code is updated&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;The codebase manager also supports &lt;strong&gt;searching for and displaying documentation&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;I struggled a bit with syntax, especially significant whitespace (note to self: only use tab width of 8 for Unison--or just don&amp;#39;t use tabs at all)&lt;/li&gt;
&lt;li&gt;The docs indicate that &lt;strong&gt;the codebase format is append-only&lt;/strong&gt; -- what happens if you &lt;em&gt;really&lt;/em&gt; need to expunge all traces of some code? Is there &lt;em&gt;code&lt;/em&gt; garbage collection?&lt;/li&gt;
&lt;li&gt;Integrated tooling like the codebase manager and code versioning sounds interesting, although I&amp;#39;m mostly allergic to additional tooling&lt;/li&gt;
&lt;li&gt;Unison feels innovative, for sure!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;lil&quot;&gt;Lil&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://beyondloom.com/decker/lil.html&quot;&gt;Lil&lt;/a&gt; is a bespoke scripting language for &lt;a href=&quot;https://beyondloom.com/decker/&quot;&gt;Decker&lt;/a&gt; (a Mac Classic-esque multimedia tool). Despite being a single header of around 1300 lines of (dense) C code, Lil packs an impressive array of features: &lt;strong&gt;immutable data structures, vector programming, and a built-in query language&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Elements in lists (surrounded by parentheses) are separated by commas, but function arguments (surrounded by &lt;em&gt;brackets&lt;/em&gt;) are &lt;em&gt;not&lt;/em&gt; (I know it&amp;#39;s subjective, but I found this to be fairly annoying)&lt;/li&gt;
&lt;li&gt;Some operators (e.g. modulus) have their order reversed&lt;/li&gt;
&lt;li&gt;&lt;code&gt;where&lt;/code&gt; clauses in the query language are actually column (list) expressions&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Performance was a challenge for me&lt;/strong&gt; due to the lack of mutable data structures--I ended up having to repurpose a string because the language doesn&amp;#39;t &lt;em&gt;natively&lt;/em&gt; provide a mutable array (though the host app can--and in the case of Lilt, does--provide mutable data types)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;postscript&quot;&gt;PostScript&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;PostScript isn&amp;#39;t just a document format, it&amp;#39;s a programming language!&lt;/strong&gt; Who knew? Open &lt;a href=&quot;https://github.com/jaredkrinke/100-languages/blob/main/src/p24.ps&quot;&gt;my solution&lt;/a&gt; in a document viewer and see for yourself! (Just tried it in GIMP and it works!)&lt;/p&gt;
&lt;p&gt;I can&amp;#39;t imagine such a security minefield of a format being created today. It&amp;#39;s basically a quilt made out of red flags. PDF has had enough exploits and it&amp;#39;s (supposedly) declarative! &lt;strong&gt;I will probably never open a PostScript file from the web again&lt;/strong&gt; (though I promise I&amp;#39;m too inept at stack-based languages to have created a virus).&lt;/p&gt;
&lt;p&gt;Regardless, here are my notes about the language:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I had a lot of trouble managing the stack again, but at least you can duplicate a value at any depth in the stack in one command&lt;/li&gt;
&lt;li&gt;Having branches appear before knowing what kind of conditional they&amp;#39;re for hard for me to read&lt;/li&gt;
&lt;li&gt;Fortunately, being an old standard means that there is excellent documentation: &lt;a href=&quot;https://www.adobe.com/jp/print/postscript/pdfs/PLRM.pdf&quot;&gt;PostScript Language Reference Manual&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;fe&quot;&gt;fe&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rxi/fe&quot;&gt;fe&lt;/a&gt; is a &lt;strong&gt;minimal Lisp that uses a fixed block of memory (no dynamic allocations)&lt;/strong&gt;. It is not to be confused with &lt;a href=&quot;https://fe-lang.org/&quot;&gt;Fe&lt;/a&gt;, whose web site mentions smart contracts.&lt;/p&gt;
&lt;p&gt;Given that fe is less than 900 lines of readable C, it&amp;#39;s an impressively ergonomic language.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The stand-alone interpreter defaults to 64,000 bytes of memory (in addition to the C stack, obviously)&lt;/li&gt;
&lt;li&gt;On 64-bit architectures, cons cells are each 16 bytes, so only 4,000 cons cells max&lt;/li&gt;
&lt;li&gt;Numbers (single-precision floats) are &lt;em&gt;also&lt;/em&gt; stored as objects, which unfortunately means &lt;strong&gt;each 4-byte number takes up 16 bytes&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Macros work, but are missing a few key pieces (gensym, quasiquote, &amp;quot;rest&amp;quot; arguments)&lt;/li&gt;
&lt;/ul&gt;
</content>
</entry>
<entry>
<title>11 programming languages in one week</title>
<id>https://log.schemescape.com/posts/programming-languages/100-languages-4.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/programming-languages/100-languages-4.html"/>
<updated>2024-03-31T00:00:00.000Z</updated>
<summary type="text">I spent entirely too much time playing with (mostly) new programming languages this week.</summary>
<content type="html">&lt;p&gt;I&amp;#39;m &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/100-languages.html&quot;&gt;trying to write code in 100 different programming languages&lt;/a&gt;. I just finished week 2, and--somehow--I&amp;#39;m ahead of schedule.&lt;/p&gt;
&lt;p&gt;The full list of languages and links to code are in my &lt;a href=&quot;https://github.com/jaredkrinke/100-languages&quot;&gt;100-languages&lt;/a&gt; repository.&lt;/p&gt;
&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;
&lt;p&gt;After two weeks of &amp;quot;staying on (or ahead of) schedule&amp;quot;, I strongly suspect I will &lt;em&gt;not&lt;/em&gt; be continuing at this current pace of writing code in at least one new language per day. It&amp;#39;s fun and oddly addictive, but also fairly time-consuming. &lt;strong&gt;If I don&amp;#39;t slow down, I&amp;#39;ll probably get burned out and abandon the project&lt;/strong&gt; (or need to become a hermit), so I&amp;#39;ll likely slow &lt;em&gt;way&lt;/em&gt; down for the next week.&lt;/p&gt;
&lt;h1 id=&quot;languages&quot;&gt;Languages&lt;/h1&gt;
&lt;p&gt;Here are the &lt;strong&gt;languages that were new to me&lt;/strong&gt; at the beginning of the week that I managed to write code in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/COBOL#COBOL-85&quot;&gt;COBOL-85&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/WGSL/&quot;&gt;WebGPU Shading Language&lt;/a&gt; (which I&amp;#39;m still surprised to learn is &amp;quot;WebGPU &lt;em&gt;Shading&lt;/em&gt; Language&amp;quot; and not &amp;quot;WebGPU &lt;em&gt;Shader&lt;/em&gt; Language&amp;quot;, in its official spec)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://webassembly.github.io/spec/core/text/index.html&quot;&gt;WebAssembly Text Format&lt;/a&gt; (I had &lt;em&gt;seen&lt;/em&gt; this before, but never &lt;em&gt;written&lt;/em&gt; it)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://scratch.mit.edu/&quot;&gt;Scratch&lt;/a&gt; (block-based)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Commodore_BASIC&quot;&gt;Commodore Basic 2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://xod.io/&quot;&gt;XOD&lt;/a&gt; (flow-based)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And here are the &lt;strong&gt;languages I&amp;#39;d used before&lt;/strong&gt; (mostly only used a little bit or a long time ago):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/xslt-10/&quot;&gt;XSLT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.perl.org/&quot;&gt;Perl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/AWK&quot;&gt;AWK&lt;/a&gt; (not 100% sure if I&amp;#39;ve actually used this before, but it seems likely)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Verilog&quot;&gt;Verilog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zachtronics.com/exapunks/&quot;&gt;EXA&lt;/a&gt; (from a game by &lt;a href=&quot;https://www.zachtronics.com/&quot;&gt;Zachtronics&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The rest of this post is just a collection of my notes from trying out these languages.&lt;/p&gt;
&lt;h2 id=&quot;xslt-extensible-stylesheet-language-transformations&quot;&gt;XSLT (Extensible Stylesheet Language Transformations)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I&amp;#39;ve probably written more XSLT than the vast majority of people, because I naively thought that HTML would be permanently recast into XML and XSLT would become the standard template language (that... didn&amp;#39;t happen)&lt;/li&gt;
&lt;li&gt;Browsers still support XSLT, apparently!&lt;/li&gt;
&lt;li&gt;XPath is my favorite query language that many (most?) people don&amp;#39;t seem to know about&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;cobol&quot;&gt;COBOL&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;First time using a column-oriented language!&lt;/li&gt;
&lt;li&gt;It&amp;#39;s not clear to me when periods (&lt;code&gt;.&lt;/code&gt;) are required and when they break things&lt;/li&gt;
&lt;li&gt;GNU COBOL errors don&amp;#39;t have enough information for me to understand them&lt;/li&gt;
&lt;li&gt;My solution takes forever to run in COBOL, as compared to JavaScript--not sure why&lt;/li&gt;
&lt;li&gt;Forgetting an &lt;code&gt;END-IF&lt;/code&gt; just completely changed the meaning of my program, but didn&amp;#39;t produce and errors or warnings&lt;/li&gt;
&lt;li&gt;So, so verbose&lt;/li&gt;
&lt;li&gt;Lots of reserved words&lt;/li&gt;
&lt;li&gt;I dislike the combination of natural language syntax (&lt;code&gt;ADD 1 TO N.&lt;/code&gt;) and things like &lt;code&gt;77 TOTAL PIC S9(15) COMP VALUE ZERO.&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;perl&quot;&gt;Perl&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Kept getting tripped up by scalar vs. array contexts (even with prior experience)&lt;/li&gt;
&lt;li&gt;I don&amp;#39;t recall the details, but there was a case where I ended up needing parentheses when I thought brackets would be correct&lt;/li&gt;
&lt;li&gt;&amp;quot;Here docs&amp;quot; are great!&lt;/li&gt;
&lt;li&gt;I dislike the anonymous function syntax, but I&amp;#39;m glad anonymous functions are supported&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;webgpu-shading-language&quot;&gt;WebGPU Shading Language&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Crashed my GPU several times while running code&lt;/li&gt;
&lt;li&gt;Lots of JavaScript required to setup computation and read back results&lt;/li&gt;
&lt;li&gt;The problem I attempted wasn&amp;#39;t a good fit for parallel computation&lt;/li&gt;
&lt;li&gt;A different parallel-friendly problem I attempted required 64-bit arithmetic which apparently isn&amp;#39;t supported in WGSL&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;awk&quot;&gt;AWK&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Order of &lt;code&gt;for ... in&lt;/code&gt; loop is unspecified&lt;/li&gt;
&lt;li&gt;Arrays of arrays are not officially supported&lt;/li&gt;
&lt;li&gt;Relies on mutation in &lt;code&gt;gsub()&lt;/code&gt; -- I think I&amp;#39;d prefer a functional version of AWK&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;webassembly-text-format&quot;&gt;WebAssembly (Text Format)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Interesting syntax: it uses s-expressions, but you can also just write lines of assembly too&lt;/li&gt;
&lt;li&gt;I would have preferred labels instead of &lt;code&gt;BLOCK&lt;/code&gt; and &lt;code&gt;LOOP&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Resulting binary was tiny! Just 163 bytes!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;scratch&quot;&gt;Scratch&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I would have enjoyed this as a kid&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;commodore-basic&quot;&gt;Commodore BASIC&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;All arithmetic is apparently floating point -- is it done in software? Because it&amp;#39;s surprisingly slow&lt;/li&gt;
&lt;li&gt;Line numbers are annoying to deal with, but in the proper historical context they make sense because you entered one line at a time -- today, we&amp;#39;re spoiled with text editors&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;verilog&quot;&gt;Verilog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href=&quot;https://8bitworkshop.com/v3.11.0/?platform=verilog&amp;amp;file=clock_divider.v&quot;&gt;8bitworkshop Verilog IDE&lt;/a&gt; is amazing&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;xod&quot;&gt;XOD&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Laying out all the components using my mouse was painfully tedious, but it resulted in &lt;a href=&quot;https://github.com/jaredkrinke/100-languages/blob/main/src/p18.png&quot;&gt;a nice diagram that makes it clear how the solution works&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;exa&quot;&gt;EXA&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.zachtronics.com/exapunks/&quot;&gt;Exapunks&lt;/a&gt; is a great game&lt;/li&gt;
&lt;li&gt;You can use the T register for temporary storage&lt;/li&gt;
&lt;li&gt;You can use files for even more storage&lt;/li&gt;
&lt;li&gt;I still haven&amp;#39;t found a great way to route messages between EXAs, other than only having 2 EXAs in a room&lt;/li&gt;
&lt;li&gt;I made a &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/../game-development/tec-redshift-dumper.html&quot;&gt;tool for dumping TEC Redshift discs into a text format&lt;/a&gt; (wait, that was in JavaScript--I used 12 languages this week!)&lt;/li&gt;
&lt;/ul&gt;
</content>
</entry>
<entry>
<title>TEC Redshift disc-dumping tool</title>
<id>https://log.schemescape.com/posts/game-development/tec-redshift-dumper.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/game-development/tec-redshift-dumper.html"/>
<updated>2024-03-30T00:00:00.000Z</updated>
<summary type="text">I couldn&apos;t find a tool to dump TEC Redshift discs from Exapunks, so I made one.</summary>
<content type="html">&lt;p&gt;Leveraging &lt;a href=&quot;https://rami-sabbagh.com/TEC-Redshift-Disk-Specification/&quot;&gt;someone else&amp;#39;s reverse-engineering work&lt;/a&gt;, I made a &lt;a href=&quot;https://jaredkrinke.github.io/tec-redshift-dumper/&quot;&gt;browser-based tool for dumping TEC Redshift discs into EXA code and JSON formats&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I don&amp;#39;t know if anyone else will ever want such a tool, but one now exists, regardless.&lt;/p&gt;
&lt;h1 id=&quot;background&quot;&gt;Background&lt;/h1&gt;
&lt;p&gt;For analytical minds, there&amp;#39;s an irresistible genre of games called &amp;quot;zachlikes&amp;quot; (I even &lt;a href=&quot;https://log.schemescape.com/posts/game-development/sic-1.html&quot;&gt;made one&lt;/a&gt;). The best zachlikes come directly from &lt;a href=&quot;https://www.zachtronics.com/index.html&quot;&gt;Zachtronics&lt;/a&gt;, namely:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zachtronics.com/opus-magnum/&quot;&gt;Opus Magnum&lt;/a&gt;, the appropriately-named &lt;strong&gt;best zachlike ever made&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zachtronics.com/exapunks&quot;&gt;Exapunks&lt;/a&gt;, the &lt;strong&gt;best &lt;em&gt;programming&lt;/em&gt; zachlike&lt;/strong&gt; (maybe tied with &lt;a href=&quot;https://www.zachtronics.com/tis-100&quot;&gt;TIS-100&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;What does this have to do with anything?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Exapunks is a programming zachlike, and I&amp;#39;m &lt;a href=&quot;https://log.schemescape.com/posts/game-development/../programming-languages/100-languages.html&quot;&gt;in dire need of more programming languages&lt;/a&gt;, so obviously I needed to solve a Project Euler problem in Exapunks. Ok, done. Then I wanted to share my code in a source code-like format and couldn&amp;#39;t find an appropriate tool, so I made one.&lt;/p&gt;
&lt;p&gt;That&amp;#39;s all. End of story.&lt;/p&gt;
</content>
</entry>
<entry>
<title>Wrapping up week 1 of the 100 languages challenge</title>
<id>https://log.schemescape.com/posts/programming-languages/100-languages-3.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/programming-languages/100-languages-3.html"/>
<updated>2024-03-23T00:00:00.000Z</updated>
<summary type="text">So far I&apos;m on schedule and have sampled each kind of programming language.</summary>
<content type="html">&lt;p&gt;I&amp;#39;m &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/100-languages.html&quot;&gt;trying to write code in 100 different programming languages&lt;/a&gt;. Today, I&amp;#39;m wrapping up week 1.&lt;/p&gt;
&lt;p&gt;The full list of languages and links to code are in my &lt;a href=&quot;https://github.com/jaredkrinke/100-languages&quot;&gt;100-languages&lt;/a&gt; repository.&lt;/p&gt;
&lt;h1 id=&quot;days-1---2&quot;&gt;Days 1 - 2&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;I got off to a pretty rocky start by starting with two languages that run in limited environments&lt;/strong&gt;: &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/100-languages-1.html&quot;&gt;SIC-1 Assembly Language&lt;/a&gt; (which runs on an 8-bit single-instruction CPU with 256 bytes addressable) and &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/100-languages-2.html&quot;&gt;SectorLISP&lt;/a&gt; (which has only lists--no integers!--and with a max of a few thousand linked list cells). Economizing solutions was fun, but time-consuming.&lt;/p&gt;
&lt;h1 id=&quot;days-3---7&quot;&gt;Days 3 - 7&lt;/h1&gt;
&lt;p&gt;I could have breezed through the first week by using procedural languages I already knew, &lt;strong&gt;but the whole point of this journey is to play with new programming languages with minimal investment&lt;/strong&gt;, so I set two goals for the rest of the week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use at least one language of each type (cf. &lt;a href=&quot;https://madhadron.com/programming/seven_ur_languages.html&quot;&gt;The Seven Programming Ur-Languages&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Explore new languages, or new ways of using languages, when possible&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are the languages I ended up using:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://fortran-lang.org/&quot;&gt;Fortran&lt;/a&gt; (procedural language)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jsoftware.com/#/&quot;&gt;J&lt;/a&gt; (array language)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gforth.org/&quot;&gt;Gforth&lt;/a&gt; (stack-based language)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_ML&quot;&gt;Standard ML&lt;/a&gt; (functional language)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://squeak.org/&quot;&gt;Squeak&lt;/a&gt;/Smalltalk (object-oriented language)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/SQL&quot;&gt;SQL&lt;/a&gt; (declarative language)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Technically, I think I&amp;#39;ve written Smalltalk and Standard ML code before, but it was a long time ago, and I definitely did not remember anything beyond high level concepts. SQL was the only language I was fluent in (but not for solving math problems!).&lt;/p&gt;
&lt;h1 id=&quot;doubts-about-this-challenge&quot;&gt;Doubts about this challenge&lt;/h1&gt;
&lt;p&gt;I&amp;#39;ve tried to make it clear that &lt;strong&gt;I&amp;#39;m not expecting to actually &lt;em&gt;learn&lt;/em&gt; or &lt;em&gt;become proficient in&lt;/em&gt; all of these languages&lt;/strong&gt;--I&amp;#39;m just sampling them and ensuring that I &lt;em&gt;apply&lt;/em&gt; what little I &lt;em&gt;do&lt;/em&gt; learn. Eventually, maybe I&amp;#39;ll dive into a few of the languages that intrigued me the most.&lt;/p&gt;
&lt;p&gt;Honestly, it&amp;#39;s been fun to dabble in languages I have no business writing code for. In that aspect, this challenge has been a resounding success.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;However&lt;/em&gt;, sometimes &lt;strong&gt;it feels like this is actually just a challenge to learn 100 different syntaxes&lt;/strong&gt;. In other words, &lt;strong&gt;I might be spending time on the &lt;em&gt;least interesting part&lt;/em&gt; of any programming language: syntax&lt;/strong&gt;. (Not to say syntax isn&amp;#39;t important, just that syntax is &lt;em&gt;almost&lt;/em&gt; never a reason to use or avoid a programming language. For the record, I said &amp;quot;almost never&amp;quot;.)&lt;/p&gt;
&lt;p&gt;It remains to be seen if syntax overload ends up sinking this adventure, but for now I&amp;#39;m planning to forge ahead.&lt;/p&gt;
&lt;h1 id=&quot;language-notes&quot;&gt;Language notes&lt;/h1&gt;
&lt;p&gt;I&amp;#39;ll end this update with some notes about the languages I used.&lt;/p&gt;
&lt;h2 id=&quot;fortran&quot;&gt;Fortran&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Fortran is verbose&lt;/strong&gt;. It tries to be precise, but there&amp;#39;s enough historical baggage and implicit behavior that it seems really easy to screw up. I don&amp;#39;t think this particular programming problem played to any of Fortran&amp;#39;s strengths, however, so my perspective is skewed--I was basically writing C in Fortran.&lt;/p&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Opted for Fortran 90, with extravagances like &amp;quot;free-form source input&amp;quot; (instead of fixed column input)&lt;/li&gt;
&lt;li&gt;Requires lots of redundant typing (function names and return types, variable definitions)&lt;/li&gt;
&lt;li&gt;Native logical/Boolean type!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://fortran-lang.org/learn/quickstart/gotchas/&quot;&gt;Plenty of gotchas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;j&quot;&gt;J&lt;/h2&gt;
&lt;p&gt;I was excited to try an array language, &lt;strong&gt;but &lt;em&gt;wow&lt;/em&gt; was I unprepared for the overwhelming cyclone of syntax&lt;/strong&gt;. Like regular expressions, I&amp;#39;m sure once you&amp;#39;re proficient with J it&amp;#39;s quick to whip up little programs. Also like regular expressions, J seems difficult to parse at a glance. &lt;strong&gt;Trying to wade through dozens of sigils as quickly as possible was probably the worst possible introduction to J&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Despite being in the wrong mindset, I &lt;em&gt;did&lt;/em&gt; enjoy programming in J, because it felt so novel. The closest I&amp;#39;ve used to an array language is probably &lt;a href=&quot;https://numpy.org/&quot;&gt;NumPy&lt;/a&gt;, but J is its own language, designed from the ground up.&lt;/p&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_5&lt;/code&gt; is a negative number and &lt;code&gt;_&lt;/code&gt; is infinity&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3 : 0&lt;/code&gt; defines a verb (operator) -- hopefully there&amp;#39;s a good reason for this...&lt;/li&gt;
&lt;li&gt;Unique terminology (&amp;quot;verbs&amp;quot;, &amp;quot;adverbs&amp;quot;, &amp;quot;ravel&amp;quot;) makes it hard to find information in the wiki&lt;/li&gt;
&lt;li&gt;Search engines don&amp;#39;t seem to understand that &amp;quot;J&amp;quot; is the name of a programming language -- only good way to search was on Stack Overflow with the &lt;code&gt;[j]&lt;/code&gt; tag&lt;/li&gt;
&lt;li&gt;Comments start with &lt;code&gt;NB.&lt;/code&gt;!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;gforth&quot;&gt;Gforth&lt;/h2&gt;
&lt;p&gt;After reading a &lt;a href=&quot;https://ratfactor.com/forth/the_programming_language_that_writes_itself.html&quot;&gt;very long and entertaining post about Forth&lt;/a&gt; roughly a year ago, I&amp;#39;ve wanted to give Forth a try. Forth&amp;#39;s minimalism aligns nicely with &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/minimal-dev-env.html&quot;&gt;my own aspirations&lt;/a&gt;. Who knows, maybe Forth will &lt;a href=&quot;http://duskos.org/&quot;&gt;control a post-apocalyptic world&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I was prepared for Forth&amp;#39;s minimal syntax (even more minimal than Lisp) and I knew how to use a stack. &lt;strong&gt;But I underestimated just how &lt;em&gt;exasperatingly tedious&lt;/em&gt; managing the parameter stack would be&lt;/strong&gt;. I&amp;#39;m sure there&amp;#39;s some better solution for temporaries that I skimmed over, but having to &lt;code&gt;SWAP 1 + SWAP&lt;/code&gt;, etc. was inconvenient.&lt;/p&gt;
&lt;p&gt;Overall, I&amp;#39;m not sure how I feel about Forth outside of the embedded world. I &lt;em&gt;do&lt;/em&gt; hope to implement my own Forth one day--and maybe with the benefit of enlightenment I&amp;#39;ll feel differently.&lt;/p&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I actually kind of enjoyed having no type-checking, not even at run-time--although it&amp;#39;s probably not usually a good idea&lt;/li&gt;
&lt;li&gt;Interacting with Forth really feels like interacting directly with hardware&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;standard-ml&quot;&gt;Standard ML&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;I love arrow functions, map, reduce, etc.&lt;/strong&gt; -- and I have functional programming languages to thank for those, even when I&amp;#39;m using JavaScript. Having said that, Standard ML was the first language I ran into during this challenge where it felt like I was wasting my time stumbling through syntax. I still don&amp;#39;t know when I need parentheses and when I don&amp;#39;t. As usual, this is not necessarily the fault of the language--just of the environment I&amp;#39;ve created for myself.&lt;/p&gt;
&lt;p&gt;Having said that (and I&amp;#39;m sure people will disagree), &lt;strong&gt;I prefer Lisp&amp;#39;s regular syntax when compared to something like Standard ML&lt;/strong&gt;. Maybe I&amp;#39;d like Clojure?&lt;/p&gt;
&lt;h2 id=&quot;squeak&quot;&gt;Squeak&lt;/h2&gt;
&lt;p&gt;I was prepared for everything to be an object in Squeak. I was excited for a fully introspectable language. Want to know what something does? Just look at its source!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I was &lt;em&gt;not&lt;/em&gt; prepared for clicking through menus and having to use the mouse all the time&lt;/strong&gt;. I&amp;#39;m also not sold on image-based development being &lt;em&gt;the default&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In the end, I think there&amp;#39;s a lot of value in a standardized development environment and separating logic into objects, but I think most of those benefits are visible when working in teams or over longer periods of time.&lt;/p&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use the browser&lt;/li&gt;
&lt;li&gt;Use all your mouse buttons&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;sql&quot;&gt;SQL&lt;/h2&gt;
&lt;p&gt;Similar to J, &lt;strong&gt;it&amp;#39;s fun to tell the computer &lt;em&gt;what&lt;/em&gt; I want it to do without having to specify the particular steps for &lt;em&gt;how&lt;/em&gt; to do it&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It&amp;#39;s possible to produce a range of numbers in SQLite!&lt;/li&gt;
&lt;li&gt;Strings can be automatically coerced to numbers in SQLite&lt;/li&gt;
&lt;/ul&gt;
</content>
</entry>
<entry>
<title>Using SectorLISP for Project Euler</title>
<id>https://log.schemescape.com/posts/programming-languages/100-languages-2.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/programming-languages/100-languages-2.html"/>
<updated>2024-03-20T00:00:00.000Z</updated>
<summary type="text">Four days later, I&apos;ve completed day two of my challenge.</summary>
<content type="html">&lt;p&gt;I&amp;#39;m &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/100-languages.html&quot;&gt;trying to write code in 100 different programming languages&lt;/a&gt;. Day (ahem) 2: &lt;strong&gt;SectorLISP&lt;/strong&gt;!&lt;/p&gt;
&lt;h1 id=&quot;sectorlisp&quot;&gt;SectorLISP&lt;/h1&gt;
&lt;p&gt;Ever since discovering &lt;a href=&quot;https://justine.lol/sectorlisp2/&quot;&gt;SectorLISP&lt;/a&gt; (a minimal Lisp that fits in a boot sector), I&amp;#39;ve wanted to give it a spin. And it did not disappoint! It was both beautiful and painful.&lt;/p&gt;
&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;/h2&gt;
&lt;p&gt;Things I missed while using SectorLISP:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tail call optimization&lt;/li&gt;
&lt;li&gt;Mutation&lt;/li&gt;
&lt;li&gt;Integers&lt;/li&gt;
&lt;li&gt;Iteration&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.lispworks.com/documentation/lw60/CLHS/Body/s_let_l.htm&quot;&gt;&lt;code&gt;LET&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mercifully, I was using the &amp;quot;friendly&amp;quot; branch of SectorLISP, which at least included an obvious and idiomatic way to implement recursion via &lt;code&gt;DEFINE&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, obviously, &lt;strong&gt;the list above is not meant as a complaint&lt;/strong&gt;. SectorLISP is a &lt;em&gt;minimal&lt;/em&gt; Lisp, so I was expecting for it to support only the bare minimum. &lt;strong&gt;Rolling your own integer representation and using recursion for iteration are part of the fun!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Having said that, there was one unpleasant surprise: because SectorLISP was designed to run on ancient hardware, &lt;strong&gt;it has a miniscule memory budget&lt;/strong&gt;. There is only space for (I think) &lt;em&gt;at most&lt;/em&gt; 8,192 cons cells. Without tail call optimization and iteration, several of my attempts at printing decimal numbers ran out of memory.&lt;/p&gt;
&lt;p&gt;It took several attempts, but I eventually found that using unary encoding for numbers (i.e. &amp;quot;n&amp;quot; is encoded as a list of length &amp;quot;n&amp;quot;; for example &lt;code&gt;(QUOTE (T T T))&lt;/code&gt; is the number 3) resulted in the simplest code with the least consing--but only when the numbers are small! For larger numbers, I saved space using 32-bit binary (two&amp;#39;s complement) with the least significant bit first.&lt;/p&gt;
&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jaredkrinke/100-languages/blob/main/p2.lisp&quot;&gt;Solution&lt;/a&gt; (tested using the simulator on the &lt;a href=&quot;https://justine.lol/sectorlisp2/&quot;&gt;SectorLISP v2 page&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content>
</entry>
</feed>
