<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Schemescape</title>
<id>https://log.schemescape.com/</id>
<link rel="self" href="https://log.schemescape.com/feed.xml"/>
<link rel="alternate" href="https://log.schemescape.com/"/>
<author>
<name>Schemescape</name>
</author>
<updated>2024-06-01T01:05:34.220Z</updated>

<entry>
<title>Celebrating International Amiga Day with Project Euler</title>
<id>https://log.schemescape.com/posts/retrocomputing/amiga-day-project-euler.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/retrocomputing/amiga-day-project-euler.html"/>
<updated>2024-05-31T00:00:00.000Z</updated>
<summary type="text">Programming on the ultimate retro-futuristic computer: the Amiga 500.</summary>
<content type="html">&lt;p&gt;Today is &lt;strong&gt;&lt;a href=&quot;https://www.lemonamiga.com/forum/viewtopic.php?f=9&amp;amp;t=11833&quot;&gt;International Amiga Day&lt;/a&gt;&lt;/strong&gt;, when retrocomputing enthusiasts are required to boot up the &lt;a href=&quot;https://en.wikipedia.org/wiki/Amiga&quot;&gt;fanciest multimedia computer line to ever fail&lt;/a&gt;. I&amp;#39;m not really qualified to comment on the Amiga since the closest thing I&amp;#39;d used until recently was a &lt;a href=&quot;https://en.wikipedia.org/wiki/Commodore_64&quot;&gt;Commodore 64&lt;/a&gt;, but I won&amp;#39;t let such a trivial matter as &lt;em&gt;not being qualified&lt;/em&gt; stop me from spewing uninformed opinions.&lt;/p&gt;
&lt;h1 id=&quot;amiga&quot;&gt;Amiga&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;I recently acquired an Amiga 500 and I&amp;#39;ve been having some (mostly Type II) fun retrocomputing on it&lt;/strong&gt;. For a platform that launched in the US around the same time as the original Nintendo Entertainment System, the Amiga is impressive! N.B. The Amiga &lt;em&gt;platform&lt;/em&gt; launched with the Amiga 1000, but I&amp;#39;m using a later &lt;em&gt;model&lt;/em&gt;--the Amiga 500.&lt;/p&gt;
&lt;p&gt;Unlike the earlier Commodore 64, the Amiga shipped with a bridge to the future: an &lt;a href=&quot;https://en.wikipedia.org/wiki/RS-232&quot;&gt;RS-232 serial port&lt;/a&gt;. This enables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Copying small files to/from a serial port-equipped modern computer (cf. &lt;a href=&quot;https://ohse.de/uwe/software/lrzsz.html&quot;&gt;lrzsz&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Dialing into Internet-based &lt;a href=&quot;https://en.wikipedia.org/wiki/Bulletin_board_system&quot;&gt;BBSes&lt;/a&gt;, using a modem emulator (cf. &lt;a href=&quot;https://github.com/go4retro/tcpser&quot;&gt;tcpser&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Controlling terminal-mode programs on Linux/BSD-based computers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;With a hard drive, I could theoretically even get on the web&lt;/strong&gt;. Unfortunately, my Amiga 500 only has 1 MB of RAM and no hard drive, so I haven&amp;#39;t gotten beyond single-floppy programs/games yet.&lt;/p&gt;
&lt;h2 id=&quot;amiga-basic&quot;&gt;Amiga Basic&lt;/h2&gt;
&lt;p&gt;But, of course, the most urgent task on my plate is to add another programming language to &lt;a href=&quot;https://log.schemescape.com/posts/retrocomputing/../100-languages/index.html&quot;&gt;the pile&lt;/a&gt;, and this brings me to &lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Amiga_Basic&quot;&gt;Amiga Basic&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Amiga Basic is included on the &amp;quot;extras&amp;quot; disk of Workbench 1.3 (which came with my A500). Similar to Commodore BASIC, it was written by Microsoft and, also similarly, I didn&amp;#39;t enjoy it. Here are my notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There aren&amp;#39;t functions (other than single-line &lt;code&gt;DEF FN&lt;/code&gt; statements which... didn&amp;#39;t work)&lt;/li&gt;
&lt;li&gt;It supports 32-bit arithmetic... except for &lt;code&gt;MOD&lt;/code&gt; (ask me how I know)&lt;/li&gt;
&lt;li&gt;The environment is impressively small at 80 KB&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;https://archive.org/details/Amiga_BASIC_1985_Commodore&quot;&gt;Amiga Basic manual &lt;/a&gt; feels very dated--it spends a lot of time discussing UI that feels obvious to modern users, then moves onto &amp;quot;advanced topics&amp;quot;, and only covers everything else in a reference section&lt;/li&gt;
&lt;li&gt;Thankfully, line numbers aren&amp;#39;t required (as in Commodore BASIC)&lt;/li&gt;
&lt;li&gt;The UI was fairly slow&lt;/li&gt;
&lt;li&gt;The interpreter is annoyingly slow&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Overall, I liked the older BBC BASIC better. &lt;strong&gt;And Turbo Pascal beats all BASICs handily!&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;looking-forward&quot;&gt;Looking forward&lt;/h2&gt;
&lt;p&gt;I&amp;#39;m not precisely sure how much time (and money) I&amp;#39;ll spend investigating the Amiga, but I would really like to get a hard drive so that I sample the true Amiga &lt;em&gt;computer&lt;/em&gt; experience (instead of the game console-esque experience I&amp;#39;ve had thus far).&lt;/p&gt;
&lt;p&gt;If you have any pointers to Amiga resources (or any advice on what to do with an A500), &lt;a href=&quot;mailto:log@schemescape.com&quot;&gt;send me a mail&lt;/a&gt;. Thanks!&lt;/p&gt;
</content>
</entry>
<entry>
<title>Reflections at 50 (programming languages)</title>
<id>https://log.schemescape.com/posts/programming-languages/50-different-languages.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/programming-languages/50-different-languages.html"/>
<updated>2024-05-14T00:00:00.000Z</updated>
<summary type="text">Find out if writing code in 50 different programming languages was a good idea!</summary>
<content type="html">&lt;p&gt;Over the past two months, I&amp;#39;ve &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/../100-languages/index.html&quot;&gt;written code in 50 different programming languages&lt;/a&gt; (with an eventual goal to &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/100-languages.html&quot;&gt;get to 100&lt;/a&gt;). Here are my thoughts thus far.&lt;/p&gt;
&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;
&lt;p&gt;I started this journey because I wanted to &lt;strong&gt;try new programming languages&lt;/strong&gt; in a low-stakes setting. Rather than learn a language in depth, I&amp;#39;m just writing a page of code, &lt;strong&gt;to see what either the programming paradigm or development experience is like&lt;/strong&gt;. Since I&amp;#39;m focused on new (to me) languages/paradigms, the majority of the languages aren&amp;#39;t even in the top 100 programming languages in the &lt;a href=&quot;https://www.tiobe.com/tiobe-index/&quot;&gt;TIOBE Programming Community index&lt;/a&gt;. I&amp;#39;m definitely &lt;em&gt;not&lt;/em&gt; trying to improve my job prospects!&lt;/p&gt;
&lt;h2 id=&quot;positives&quot;&gt;Positives&lt;/h2&gt;
&lt;p&gt;Overall, this experiment has been a success. Prior to starting, I thought I&amp;#39;d &lt;em&gt;already&lt;/em&gt; used a wide variety of programming languages, but &lt;strong&gt;I&amp;#39;d never &lt;em&gt;actually used&lt;/em&gt; an array-based language, and I didn&amp;#39;t even know what concatenative languages were&lt;/strong&gt; (thought I&amp;#39;d briefly heard of Forth)! I&amp;#39;d also never experienced column- or line-based input or written right-to-left text.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you&amp;#39;ve got the time and desire novel programming experiences, this is a worthwhile journey!&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;negatives&quot;&gt;Negatives&lt;/h2&gt;
&lt;p&gt;The last sentence implied it, but &lt;strong&gt;repeatedly starting over from scratch--often in new paradigms--takes time&lt;/strong&gt;. I&amp;#39;d say that on average I spent &lt;em&gt;at least&lt;/em&gt; two or three hours with each language--and often more. Frequently, it was worthwhile, but stumbling through Smalltalk-like UI and syntax felt more tedious than educational, for example.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s not obvious, but &lt;strong&gt;I also spent a fair amount of time discovering, selecting, and occasionally shelving languages&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;the-road-ahead&quot;&gt;The road ahead&lt;/h2&gt;
&lt;p&gt;Additionally, now that I&amp;#39;m 50 languages in, &lt;strong&gt;the novelty is wearing off a bit&lt;/strong&gt;. This is welcome, in that the learning process is less taxing, but I&amp;#39;ll need to ensure this doesn&amp;#39;t just become a slog to 100. If I stop learning and/or enjoying the process, I should quit. &lt;strong&gt;Fifty programming languages is no small feat&lt;/strong&gt;, anyway--though I&amp;#39;ll feel a bit silly having a repository named &amp;quot;100-languages&amp;quot; if I never quite get there.&lt;/p&gt;
&lt;p&gt;Tangentially related: I feel like &lt;strong&gt;there is a distinct possibility that I will end up creating a new programming language&lt;/strong&gt; either during or after this exercise. The world definitely needs another Lisp (or maybe Forth)!&lt;/p&gt;
&lt;h2 id=&quot;languages-by-category&quot;&gt;Languages by category&lt;/h2&gt;
&lt;p&gt;For the record, here is a rough categorization of the languages I&amp;#39;ve used so far (with categories based mostly on &lt;a href=&quot;https://madhadron.com/programming/seven_ur_languages.html&quot;&gt;this article&lt;/a&gt;). Note these classifications are subjective!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Assembly&lt;/strong&gt;: WebAssembly, x86 (&amp;quot;real&amp;quot;/16-bit), Uxntal&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Imperative&lt;/strong&gt;: Fortran, COBOL, Perl, WebGPU Shading Language, Awk, Commodore BASIC, BBC BASIC, TCL, Bash, Turbo Pascal, Hare, wax, Nim&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Homoiconic&lt;/strong&gt;: SectorLISP, fe, Rebol, Boron, Cakelisp&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Functional&lt;/strong&gt;: Standard ML, Unison, Julia, Pkl, Roc, Haskell, Idris, F#&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Object-oriented&lt;/strong&gt;: Squeak, Wren, Self&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Concatenative&lt;/strong&gt;: Gforth, PostScript, RetroForth, Uxntal, Factor, Min&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Array-based&lt;/strong&gt;: J, Lil, APL&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Declarative&lt;/strong&gt;: SQL, XSLT, Verilog&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Block/flow-based&lt;/strong&gt;: Scratch, XOD&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Esoteric&lt;/strong&gt;: SIC-1 Assembly Language, EXA, Piet, قلب (Qalb), 文言 (wenyan)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Excluding intentionally esoteric ones, &lt;strong&gt;the most mind-bending for me have been concatenative and array-based languages&lt;/strong&gt;, probably due to my inexperience with them. Dependently-typed languages would probably have been mind-bending if I&amp;#39;d spent more time and actually learned them.&lt;/p&gt;
&lt;h1 id=&quot;programming-language-observations&quot;&gt;Programming language observations&lt;/h1&gt;
&lt;p&gt;Being a newbie nearly 50 times in quick succession theoretically gives me a unique perspective on programming languages. Here are a few observations.&lt;/p&gt;
&lt;h2 id=&quot;ramping-up&quot;&gt;Ramping up&lt;/h2&gt;
&lt;p&gt;Overall, for me as an experienced programmer, &lt;strong&gt;the most helpful thing for ramping up has been, unsurprisingly, quality documentation&lt;/strong&gt;. Specifically: having &lt;strong&gt;searchable documentation that is clearly organized, using familiar language&lt;/strong&gt; (e.g. outlining basic syntax, enumerating control flow options, and diligently documenting the standard library).&lt;/p&gt;
&lt;p&gt;The languages I struggled most with seemed to focus their documentation too much on tutorials and examples (usually unrelated to what I wanted to do--which is fair) or they used long-winded prose. In one case, the &amp;quot;hello world&amp;quot; example contained a URL that wasn&amp;#39;t even explained--that just made me more confused, rather than less. Thankfully, none of the languages tried to rely on videos or chat apps for &amp;quot;documentation&amp;quot;!&lt;/p&gt;
&lt;h2 id=&quot;no-one-cares-about-footprint&quot;&gt;No one cares about footprint&lt;/h2&gt;
&lt;p&gt;It&amp;#39;s disheartening, but most programming languages don&amp;#39;t seem to care about the disk/memory footprints of their environments or, often, their resulting binaries. I don&amp;#39;t enjoy slow software, but, these days, &lt;strong&gt;my old computers are more impacted by bloat than sluggishness&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Hare and Rebol are nice counterexamples, and embeddable scripting languages are also usually pretty light. And let&amp;#39;s not forget the old, but &lt;a href=&quot;https://prog21.dadgum.com/116.html&quot;&gt;famously lightweight Turbo Pascal environment&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id=&quot;so-so-many-languages&quot;&gt;So, so many languages&lt;/h2&gt;
&lt;p&gt;Despite my frequent complaints, the quality of virtually all languages I&amp;#39;ve tried is impressive--even the hobby languages are eminently usable! The amount of work involved is staggering.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Perhaps people create new programming languages for the same reason they create art, i.e. because they can&amp;#39;t &lt;em&gt;not&lt;/em&gt; do it?&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;parting-thoughts&quot;&gt;Parting thoughts&lt;/h1&gt;
&lt;p&gt;Now that I&amp;#39;ve sampled a lot of different programming languages, I&amp;#39;m more confident about matching problems to appropriate languages. In the recent past, I&amp;#39;ve tried to &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/future-proof-languages.html&quot;&gt;find the one true language that I can use for everything&lt;/a&gt;, but that&amp;#39;s honestly misguided--most of the time, at least--and especially for hobby projects in wildly different domains.&lt;/p&gt;
&lt;p&gt;I guess the good news is that I&amp;#39;ve now convinced myself that &lt;strong&gt;I could &lt;em&gt;probably&lt;/em&gt; make do with &lt;em&gt;any&lt;/em&gt; programming language, so maybe I can finally stop &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/../misc/my-hobby-is-bikeshedding.html&quot;&gt;bike-shedding&lt;/a&gt; &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/future-proof-languages.html&quot;&gt;about&lt;/a&gt; &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/future-proof-languages-2.html&quot;&gt;programming&lt;/a&gt; &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/future-proof-languages-3.html&quot;&gt;languages&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
</content>
</entry>
<entry>
<title>50 programming languages in 58 days</title>
<id>https://log.schemescape.com/posts/programming-languages/100-languages-9.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/programming-languages/100-languages-9.html"/>
<updated>2024-05-13T00:00:00.000Z</updated>
<summary type="text">Here are my notes about a grab bag of programming languages that helped get me half way to sampling 100 programming languages.</summary>
<content type="html">&lt;p&gt;In the past two months, I&amp;#39;ve &lt;a href=&quot;https://github.com/jaredkrinke/100-languages&quot;&gt;written code in 50 different programming languages&lt;/a&gt;. &lt;strong&gt;That&amp;#39;s half way to &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/100-languages.html&quot;&gt;my goal of 100&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h1 id=&quot;weeks-6---8&quot;&gt;Weeks 6 - 8&lt;/h1&gt;
&lt;p&gt;After tediously &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/piet-for-project-euler.html&quot;&gt;painting a picture to compute digit factorials&lt;/a&gt;, &lt;strong&gt;I&amp;#39;m trying to be more strategic about pairing programming languages with suitable Project Euler problems&lt;/strong&gt;. Ideally, I can avoid writing &amp;quot;big integer&amp;quot; arithmetic and/or squeezing solutions into a 16-bit address space for the next update. And I&amp;#39;m definitely going to take a break from esoteric programming languages for a bit.&lt;/p&gt;
&lt;p&gt;Anyway, here are the languages I used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Turbo_Pascal&quot;&gt;Turbo Pascal&lt;/a&gt; (under DOSBox)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://harelang.org/&quot;&gt;Hare&lt;/a&gt; (floppy disk-sized systems language)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wren.io/&quot;&gt;Wren&lt;/a&gt; (object-oriented scripting language)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pkl-lang.org/index.html&quot;&gt;Pkl&lt;/a&gt; (meta-configuration language)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nas.sr/%D9%82%D9%84%D8%A8/&quot;&gt;قلب (Qalb)&lt;/a&gt; (Scheme using Arabic script)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.roc-lang.org/&quot;&gt;Roc&lt;/a&gt; (functional language)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/LingDong-/wax&quot;&gt;wax&lt;/a&gt; (a common subset of most imperative languages)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://urlan.sourceforge.io/boron/&quot;&gt;Boron&lt;/a&gt; (Rebol, but with a smaller scope)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wy-lang.org/&quot;&gt;文言 (wenyan)&lt;/a&gt; (imperative language using Chinese text)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Self_(programming_language)&quot;&gt;Self&lt;/a&gt; (prototype-based Smalltalk)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.haskell.org/&quot;&gt;Haskell&lt;/a&gt; (functional language)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.idris-lang.org/index.html&quot;&gt;Idris&lt;/a&gt; (dependently-typed functional language)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nim-lang.org/&quot;&gt;Nim&lt;/a&gt; (vaguely Python-esque compiled language)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://min-lang.org/&quot;&gt;Min&lt;/a&gt; (concatenative language, based on Nim)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://macoy.me/blog/programming/CakelispIntro&quot;&gt;Cakelisp&lt;/a&gt; (s-expression to C compiler)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://fsharp.org/&quot;&gt;F#&lt;/a&gt; (functional language for .NET)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A few languages surprised me (one quite pleasantly and one quite &lt;em&gt;unpleasantly&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;The rest of this post just contains notes from my (minimal) interaction with each language. I&amp;#39;m planning to write a separate post with more general observations. As always, &lt;strong&gt;my observations are from spending at most a few hours with each language, so take my opinions completely encrusted with salt.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;turbo-pascal&quot;&gt;Turbo Pascal&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;I&amp;#39;d always wanted to try Turbo Pascal since two of my heroes helped create it (Anders &amp;quot;Turbo&amp;quot; Heljsberg and Niklaus (&amp;quot;Pascal&amp;quot;) Wirth).&lt;/strong&gt; It was allegedly far ahead of its time, although my only contemporaneous experience was with QBasic, so I can neither confirm nor deny. Regardless, it&amp;#39;s an impressively complete little environment. I highly recommend it for retrocomputing!&lt;/p&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Keyboard shortcut to compile and run is Ctrl+F9... which is the default DOSBox shortcut for killing DOSBox&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Had to speed up prime test by sieving first 1000 numbers&lt;/li&gt;
&lt;li&gt;Built-in documentation is handy, but lacking detail&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The IDE is amazing, considering how tiny it is!&lt;/strong&gt; (Aside: someone &lt;a href=&quot;https://github.com/magiblot/turbo&quot;&gt;ported the UI to modern computers&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Can&amp;#39;t have local variables with same name as globals?&lt;/li&gt;
&lt;li&gt;Annoying to have to declare all variables at top, but that probably makes the language faster to compile&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;hare&quot;&gt;Hare&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Initially, I was confused by the &amp;quot;cannot ignore error here&amp;quot; error, but it turns out it was &lt;em&gt;literally telling me that I needed to handle a potential error code path&lt;/em&gt; (or tell the compiler to crash on error instead)&lt;/li&gt;
&lt;li&gt;Semicolons required at the end of &lt;code&gt;for&lt;/code&gt; loops and &lt;code&gt;if&lt;/code&gt; conditionals (though the docs say this might change)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docs claim the language fits on a 3.5&amp;quot; floppy&lt;/strong&gt; -- if true that would be impressive!&lt;/li&gt;
&lt;li&gt;Doesn&amp;#39;t officially support Windows/macOS&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;wren&quot;&gt;Wren&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Doesn&amp;#39;t tolerate semicolons&lt;/li&gt;
&lt;li&gt;Can&amp;#39;t chain methods on separate lines&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqrt&lt;/code&gt;, &lt;code&gt;floor&lt;/code&gt; are properties instead of functions&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for&lt;/code&gt; is &amp;quot;for each&amp;quot;, but there is no &amp;quot;step some value up to max&amp;quot; loop built in&lt;/li&gt;
&lt;li&gt;Fibers!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;pkl&quot;&gt;Pkl&lt;/h2&gt;
&lt;p&gt;According to its web site, Pkl provides &amp;quot;Configuration that is Programmable, Scalable, and Safe&amp;quot;. Sounds great! Let&amp;#39;s download it. &lt;strong&gt;Eighty four megabytes later&lt;/strong&gt;, you can get a taste of Pkl.&lt;/p&gt;
&lt;p&gt;Now, I &lt;em&gt;know&lt;/em&gt; I&amp;#39;m in the minority when pining for &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/minimal-dev-env.html&quot;&gt;a minimal development environment&lt;/a&gt;, but how can a &lt;em&gt;configuration language&lt;/em&gt; be 84 MB? Why does a configuration language require its own JIT compiler?&lt;/p&gt;
&lt;p&gt;I understand that INI files aren&amp;#39;t enough and that YAML doesn&amp;#39;t scale and that JSON probably wouldn&amp;#39;t exist if XML had been simpler and less verbose. But (and I apologize for this)... &lt;strong&gt;Pkl is the Electron of configuration languages&lt;/strong&gt;. That is both a compliment and an insult.&lt;/p&gt;
&lt;p&gt;End rant.&lt;/p&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Three times the size of Node.js&lt;/li&gt;
&lt;li&gt;Nice functional language&lt;/li&gt;
&lt;li&gt;Had to convert &lt;code&gt;IntSeq&lt;/code&gt; to a &lt;code&gt;List&lt;/code&gt; in order to use &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, etc.&lt;/li&gt;
&lt;li&gt;Slower startup than Python...&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;qalb&quot;&gt;Qalb&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Thought-provoking concept!&lt;/li&gt;
&lt;li&gt;VS Code doesn&amp;#39;t have an RTL mode, so it kept getting confused about where to put tokens&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;roc&quot;&gt;Roc&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Had trouble finding basic documentation (e.g. how to convert between types)&lt;/li&gt;
&lt;li&gt;Accessing lists requires dealing with Result type for error handling, even when I&amp;#39;ve already checked if the list is long enough (would Idris handle this case?)&lt;/li&gt;
&lt;li&gt;Requires downloading extra code just for &amp;quot;Hello, world!&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;wax&quot;&gt;wax&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;I like the idea of a meta-language for &amp;quot;write once, use from any language&amp;quot;&lt;/strong&gt; (and I don&amp;#39;t mind s-expressions)&lt;/li&gt;
&lt;li&gt;Was kind of hoping for AST-level macros, but I didn&amp;#39;t see them...&lt;/li&gt;
&lt;li&gt;Despite liking Lisps, I think I&amp;#39;d prefer less tedious syntax, especially since there aren&amp;#39;t macros&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;boron&quot;&gt;Boron&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Only 350 KB!&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Reminds me of TCL&lt;/li&gt;
&lt;li&gt;Didn&amp;#39;t see &amp;quot;reduce&amp;quot; and had an issue with &amp;quot;replace&amp;quot;, so I had to use lots of mutation and iteration&lt;/li&gt;
&lt;li&gt;Not much documentation&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;wenyan&quot;&gt;wenyan&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Machine translating programs back into English is entertaining&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;self&quot;&gt;Self&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Download doesn&amp;#39;t support HTTPS&lt;/li&gt;
&lt;li&gt;No Windows support&lt;/li&gt;
&lt;li&gt;32-bit only (at least on Linux)&lt;/li&gt;
&lt;li&gt;GUI-only...&lt;/li&gt;
&lt;li&gt;Similar to Smalltalk/Squeak &lt;strong&gt;I had lots of trouble navigating the UI and figuring out what to click/middle-click/right-click on to make things happen&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Excellent tutorial: &lt;a href=&quot;https://sin-ack.github.io/posts/morphic-intro/&quot;&gt;https://sin-ack.github.io/posts/morphic-intro/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Saving to/loading from text files is done via the &lt;code&gt;transporter&lt;/code&gt; object (see tutorial)&lt;/li&gt;
&lt;li&gt;Took me a long time to figure out how to supply multiple arguments to a method: &amp;quot;Methods can take arguments, and the keywords for each argument after the first must start with a capital letter.&amp;quot;&lt;/li&gt;
&lt;li&gt;Got a &amp;quot;numeric constant too large&amp;quot; error, but actual arithmetic seamlessly transitions to &amp;quot;big integer&amp;quot; arithmetic&lt;/li&gt;
&lt;li&gt;No auto-indent!?&lt;/li&gt;
&lt;li&gt;Seemed very slow&lt;/li&gt;
&lt;li&gt;Globals in method don&amp;#39;t work until setting &lt;code&gt;parent*&lt;/code&gt; slot, to enable it to search up the hierarchy to &lt;code&gt;globals&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;haskell&quot;&gt;Haskell&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Documentation for the standard library was surprisingly tricky to search for&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;idris&quot;&gt;Idris&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Originally, I wanted to try implementing a solution within the type system, but I just couldn&amp;#39;t figure it out after a few hours of flailing about&lt;/li&gt;
&lt;li&gt;Couldn&amp;#39;t find standard library functions for operations like &amp;quot;first element of a list&amp;quot; or &amp;quot;check if an item exists within a list&amp;quot;&lt;/li&gt;
&lt;li&gt;Never figured out how to test anything other than equality in the type system&lt;/li&gt;
&lt;li&gt;I still don&amp;#39;t understand how &lt;code&gt;Something&lt;/code&gt; and &lt;code&gt;MkSomething&lt;/code&gt; are related for data types&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;nim&quot;&gt;Nim&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Nim is the language that impressed me the most in this batch.&lt;/strong&gt; Everything I thought would be a problem (significant whitespace, choose-your-own-function syntax, intermediate C compliation step) didn&amp;#39;t bother me at all. The small sample of the standard library I played with was a little quirky, but Nim seems like excellent bang for your buck.&lt;/p&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Release binary was only 120 KB (linked against libc)!&lt;/li&gt;
&lt;li&gt;Thought I&amp;#39;d dislike the syntax, but it was fine&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Really easy to get started, many things &amp;quot;just worked&amp;quot; (e.g. grabbing a slice of an array)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Didn&amp;#39;t have to specify too many types, but still ran fast&lt;/li&gt;
&lt;li&gt;Fast compilation&lt;/li&gt;
&lt;li&gt;Didn&amp;#39;t like the &amp;quot;hints&amp;quot; it spews out during compilation, even for &lt;code&gt;nim r&lt;/code&gt; (build and run)&lt;/li&gt;
&lt;li&gt;Why did &lt;code&gt;all&lt;/code&gt; take an anonymous function, but &lt;code&gt;foldl&lt;/code&gt; took just an expression (with &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; seemingly picked out of thin air) -- is &lt;code&gt;foldl&lt;/code&gt; a macro?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Nim might be a good language for hobby projects because it&amp;#39;s easy, fast, and produces small binaries&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;I wonder what the debugging experience is like -- if it&amp;#39;s decent, I might be writing a lot more Nim in the future!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;min&quot;&gt;Min&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Operators&amp;#39; arguments are named, which helped me (although I think it&amp;#39;s an atypical style for concatenative languages)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;cakelisp&quot;&gt;Cakelisp&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Standard library provides convenient macros like &lt;code&gt;each-in-array&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;I kind of wish I could write my macros using Common Lisp instead of a bespoke Lisp&lt;/li&gt;
&lt;li&gt;Final binary was only 18 KB!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;f&quot;&gt;F#&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;|&amp;gt;&lt;/code&gt; (pipe operator) is nice, but I couldn&amp;#39;t find it explicitly stated where the argument goes (it appears to be last--but can I change that?)&lt;/li&gt;
&lt;li&gt;Type inference was convenient--I never had to specify &lt;code&gt;int&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;F# feels like C# without having to specify types... except I have to type &lt;code&gt;Seq&lt;/code&gt; &lt;em&gt;more&lt;/em&gt; than I would have in C#&lt;/li&gt;
&lt;li&gt;Relatively slow to compile&lt;/li&gt;
&lt;/ul&gt;
</content>
</entry>
<entry>
<title>Solving Project Euler with a picture, using Piet</title>
<id>https://log.schemescape.com/posts/programming-languages/piet-for-project-euler.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/programming-languages/piet-for-project-euler.html"/>
<updated>2024-04-30T00:00:00.000Z</updated>
<summary type="text">Using a graphical 2D esoteric programming language to do math was SpaceChem-hard.</summary>
<content type="html">&lt;p&gt;I set an ill-advised goal as part of my &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/100-languages.html&quot;&gt;plan to write code in 100 programming languages&lt;/a&gt; (an ill-advised goal in itself):&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Use &lt;a href=&quot;https://www.dangermouse.net/esoteric/piet.html&quot;&gt;Piet&lt;/a&gt; to solve a nontrivial problem from &lt;a href=&quot;https://projecteuler.net/&quot;&gt;Project Euler&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;(Piet is an esoteric programming language that uses images as code, with pixel count/hue/shade corresponding to instructions for a stack-based virtual machine.)&lt;/p&gt;
&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;
&lt;p&gt;I &lt;em&gt;did&lt;/em&gt; manage to solve &lt;a href=&quot;https://projecteuler.net/problem=34&quot;&gt;problem 34&lt;/a&gt; using Piet, but it required careful planning and some tedious &lt;del&gt;rewrites&lt;/del&gt; repaints.&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s the solution, enlarged to show texture:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://log.schemescape.com/posts/programming-languages/../../assets/p34-scaled.png&quot; alt=&quot;Scaled-up solution&quot;/&gt;&lt;/p&gt;
&lt;h1 id=&quot;approach&quot;&gt;Approach&lt;/h1&gt;
&lt;p&gt;Problem 34 requires adding up all numbers where the sum of their digits&amp;#39; factorials equals the number itself. I specifically chose this problem because &lt;strong&gt;it is fairly simple and doesn&amp;#39;t require any special input, but is not &lt;em&gt;so&lt;/em&gt; simple that solving it would be trivial&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Given that Piet&amp;#39;s instructions are all context-dependent (the color of an instruction depends on the color of the previous block) and it uses a stack for all arithmetic/input/output/manipulation, I made a plan to tackle the &amp;quot;stack&amp;quot; part first (prior to painting anything):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Solve the problem in Forth (a stack-based language)&lt;/li&gt;
&lt;li&gt;Re-solve the problem in Forth using only Piet&amp;#39;s instructions (except for branching, which is done graphically)&lt;/li&gt;
&lt;li&gt;Translate the Forth-based solution into Piet&lt;/li&gt;
&lt;li&gt;Add some colored rectangles (because: art)&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;implementation&quot;&gt;Implementation&lt;/h1&gt;
&lt;h2 id=&quot;forth-solution&quot;&gt;Forth solution&lt;/h2&gt;
&lt;p&gt;After a bit of stack-wrangling, I came up with this solution in Forth (which doesn&amp;#39;t use any variables):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-forth&quot;&gt;( Project Euler problem &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; Forth )

: &lt;span class=&quot;hljs-type&quot;&gt;log&lt;/span&gt; dup . ;

: &lt;span class=&quot;hljs-type&quot;&gt;factorial&lt;/span&gt; ( n &lt;span class=&quot;hljs-comment&quot;&gt;-- n! )&lt;/span&gt;
    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; swap &lt;span class=&quot;hljs-keyword&quot;&gt;begin&lt;/span&gt; dup &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; dup rot * swap &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; - repeat drop ;

: &lt;span class=&quot;hljs-type&quot;&gt;div&lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;mod&lt;/span&gt; ( x y &lt;span class=&quot;hljs-comment&quot;&gt;-- q r )&lt;/span&gt;
    over over / rot rot &lt;span class=&quot;hljs-keyword&quot;&gt;mod&lt;/span&gt; ;

: &lt;span class=&quot;hljs-type&quot;&gt;sum&lt;/span&gt;-digit-factorials ( n &lt;span class=&quot;hljs-comment&quot;&gt;-- sum)&lt;/span&gt;
    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; swap &lt;span class=&quot;hljs-keyword&quot;&gt;begin&lt;/span&gt; dup &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; div-&lt;span class=&quot;hljs-keyword&quot;&gt;mod&lt;/span&gt; factorial rot + swap repeat drop ;

: &lt;span class=&quot;hljs-type&quot;&gt;main&lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;loop&lt;/span&gt; ( sum counter &lt;span class=&quot;hljs-comment&quot;&gt;-- sum counter )&lt;/span&gt;
    dup dup sum-digit-factorials = &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; dup rot + log swap &lt;span class=&quot;hljs-keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + ;

: &lt;span class=&quot;hljs-type&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;999999&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; main-&lt;span class=&quot;hljs-keyword&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;loop&lt;/span&gt; ;

main
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;piet-flavored-forth&quot;&gt;Piet-flavored Forth&lt;/h2&gt;
&lt;p&gt;Next, I modified the Forth code to use Piet&amp;#39;s primitives (except for branches, which are mostly implemented graphically). This was done in a few steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Avoid directly using large numbers (since directly pushing N requires painting N pixels)&lt;/li&gt;
&lt;li&gt;Replace &lt;code&gt;do&lt;/code&gt; with a &lt;code&gt;while&lt;/code&gt; loop&lt;/li&gt;
&lt;li&gt;Implement Forth words in Piet, as &amp;quot;macros&amp;quot; (which I will later manually expand when painting the actual Piet image)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Result:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-forth&quot;&gt;( Project Euler problem &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; Forth, but using Piet primitives )

( Piet macros )
( : &lt;span class=&quot;hljs-type&quot;&gt;swap&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; roll ; )
( : &lt;span class=&quot;hljs-type&quot;&gt;rot&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; roll ; )
( : &lt;span class=&quot;hljs-type&quot;&gt;rot2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; roll ; )
( : &lt;span class=&quot;hljs-type&quot;&gt;over2&lt;/span&gt; dup &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; roll dup &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; roll &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; roll ; )
( : = - &lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt;&lt;/span&gt; ; )

( Implementation using Piet primitives (except &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; loops, which are graphical &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; Piet) )

: &lt;span class=&quot;hljs-type&quot;&gt;rot2&lt;/span&gt; rot rot ;
: &lt;span class=&quot;hljs-type&quot;&gt;over2&lt;/span&gt; over over ;

: &lt;span class=&quot;hljs-type&quot;&gt;factorial&lt;/span&gt; ( n &lt;span class=&quot;hljs-comment&quot;&gt;-- n! )&lt;/span&gt;
    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; swap &lt;span class=&quot;hljs-keyword&quot;&gt;begin&lt;/span&gt; dup &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; dup rot * swap &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; - repeat drop ;

: &lt;span class=&quot;hljs-type&quot;&gt;div&lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;mod&lt;/span&gt; ( x y &lt;span class=&quot;hljs-comment&quot;&gt;-- q r )&lt;/span&gt;
    over2 / rot2 &lt;span class=&quot;hljs-keyword&quot;&gt;mod&lt;/span&gt; ;

: &lt;span class=&quot;hljs-type&quot;&gt;sum&lt;/span&gt;-digit-factorials ( n &lt;span class=&quot;hljs-comment&quot;&gt;-- sum)&lt;/span&gt;
    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; swap &lt;span class=&quot;hljs-keyword&quot;&gt;begin&lt;/span&gt; dup &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; div-&lt;span class=&quot;hljs-keyword&quot;&gt;mod&lt;/span&gt; factorial rot + swap repeat drop ;

: &lt;span class=&quot;hljs-type&quot;&gt;main&lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;loop&lt;/span&gt; ( sum counter &lt;span class=&quot;hljs-comment&quot;&gt;-- sum counter )&lt;/span&gt;
    dup dup sum-digit-factorials = &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; dup rot + swap &lt;span class=&quot;hljs-keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + ;

: &lt;span class=&quot;hljs-type&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;begin&lt;/span&gt; dup &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; * * * * - &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; main-&lt;span class=&quot;hljs-keyword&quot;&gt;loop&lt;/span&gt; repeat drop . ;

main
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;using-piet-for-real&quot;&gt;Using Piet, for real&lt;/h2&gt;
&lt;p&gt;For authoring the image, I used &lt;a href=&quot;https://piet.bubbler.one/&quot;&gt;this browser-based Piet editor (and interpreter)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Translating into Piet was excruciatingly tedious because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Opcodes are based on the relative hue/lightness of the previous color block, so &lt;strong&gt;correcting a mistake usually entails rewriting the entire rest of the chunk&lt;/strong&gt; (unless you separate everything with ugly white blocks)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;There is no way to add comments to your code&lt;/strong&gt; (other than maybe screenshotting a scaled up image and writing on it)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Branches are represented graphically&lt;/strong&gt; and you have to ensure there is space for e.g. return lines (all using Zoolander-style clockwise-only turns)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Luckily, I only had to correct a handful of mistakes.&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s what my solution looked like (with points of interest marked):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://log.schemescape.com/posts/programming-languages/../../assets/p34-notes.png&quot; alt=&quot;Annotated solution&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Explanation:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Start (&lt;code&gt;main&lt;/code&gt; in the Forth code above)&lt;/li&gt;
&lt;li&gt;Test for &amp;quot;checked enough numbers to be done&amp;quot; (the program ends near the upper-right; otherwise, run &lt;code&gt;main-loop&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Check for any digits left in the current number (the loop in &lt;code&gt;sum-digit-factorials&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Compute quotient and remainder (i.e. extract a digit--still in &lt;code&gt;sum-digit-factorials&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Compute factorial of digit (&lt;code&gt;factorial&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Check if sum of digit factorials equals the number (the &lt;code&gt;if&lt;/code&gt; part of &lt;code&gt;main-loop&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Move on to the next number&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;N.B. I set the limit (#2) lower for the Piet version just to ensure the program ran in a reasonable amount of time. It still produces the correct answer, but I don&amp;#39;t have any mathematical analysis to justify lowering the limit from 7 digits down to 5.&lt;/p&gt;
&lt;h2 id=&quot;art&quot;&gt;Art&lt;/h2&gt;
&lt;p&gt;Given that Piet code is an image, the final step is to add prettily colored rectangles. Here is the final &lt;em&gt;unscaled&lt;/em&gt; solution (which you can theoretically run via a Piet interpreter):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://log.schemescape.com/posts/programming-languages/../../assets/p34.png&quot; alt=&quot;Final solution, actual size&quot;/&gt;&lt;/p&gt;
&lt;h1 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;/h1&gt;
&lt;p&gt;Overall, once I had a Forth-simple solution with a minimum of stack manipulation, translating it into Piet was straight-forward (although I shudder to think about graphically arranging a more complicated Piet program).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But the satisfaction of having written a real program in a 2D esoteric language like Piet is real.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;How often can you sit back and visually admire a program? Piet is a wonderfully unique entry in the world of esoteric programming languages!&lt;/p&gt;
&lt;h1 id=&quot;appendix&quot;&gt;Appendix&lt;/h1&gt;
&lt;p&gt;To my amazement, someone created a &lt;a href=&quot;https://www.toothycat.net/wiki/wiki.pl?MoonShadow/Piet&quot;&gt;Piet assembler&lt;/a&gt; that can translate from an assembly language into a Piet-compatible image. It&amp;#39;s an incredible achievement, but I wanted to write my Piet solution by hand.&lt;/p&gt;
</content>
</entry>
<entry>
<title>One third of the way to 100 programming languages</title>
<id>https://log.schemescape.com/posts/programming-languages/100-languages-7.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/programming-languages/100-languages-7.html"/>
<updated>2024-04-28T00:00:00.000Z</updated>
<summary type="text">Or: A tour of the syntax continuum.</summary>
<content type="html">&lt;p&gt;I&amp;#39;m &lt;em&gt;still&lt;/em&gt; trying to &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/100-languages.html&quot;&gt;write code in 100 different programming languages&lt;/a&gt;. My progress is being recorded in &lt;a href=&quot;https://github.com/jaredkrinke/100-languages&quot;&gt;this repository&lt;/a&gt;. I&amp;#39;m roughly one third of the way to 100 languages already!&lt;/p&gt;
&lt;p&gt;In this update, I explored stack-based languages and (unintentionally) &lt;strong&gt;traveled the programming language syntax continuum, from (almost) no syntax to (almost) &lt;em&gt;only&lt;/em&gt; syntax&lt;/strong&gt;.&lt;/p&gt;
&lt;h1 id=&quot;weeks-4-and-5&quot;&gt;Weeks 4 and 5&lt;/h1&gt;
&lt;p&gt;Given my previous struggles with Forth-like stack-based languages, I decided to focus on stack-based and/or concatenative languages.&lt;/p&gt;
&lt;h2 id=&quot;retroforth&quot;&gt;RetroForth&lt;/h2&gt;
&lt;p&gt;RetroForth bills itself as a &amp;quot;modern, pragmatic Forth&amp;quot;, and I agree with that description. It adds one-character &amp;quot;sigils&amp;quot; to distinguish numbers, strings, definitions, comments, etc. These sigils allegedly simplify the interpreter, and I think this one extra bit of syntax is helpful.&lt;/p&gt;
&lt;p&gt;Overall, I enjoyed Retro&amp;#39;s take on Forth, and I finally felt like I was making progress on creating simpler, more idiomatic Forth code.&lt;/p&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Got in infinite loops several times&lt;/li&gt;
&lt;li&gt;Fatal errors are just numbers and I don&amp;#39;t know where to look them up&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;uxntal&quot;&gt;Uxntal&lt;/h2&gt;
&lt;p&gt;Ever since reading about &lt;a href=&quot;https://100r.co/site/uxn.html&quot;&gt;uxn&lt;/a&gt;, I&amp;#39;d wanted to see what a simple VM that runs on an NES could look like. After digging in a bit more, I learned that uxn was inspired by Forth--that got my attention!&lt;/p&gt;
&lt;p&gt;After writing some code in uxn&amp;#39;s assembly language (tal), I&amp;#39;ll say that I mostly like uxn (the virtual machine), but... I don&amp;#39;t like writing tal (the assembly language). There&amp;#39;s a lot of syntax and aesthetic choices that irritate me.&lt;/p&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Numbers &lt;em&gt;must&lt;/em&gt; be written in lowercase hexadecimal (&lt;strong&gt;decimal is not even allowed!&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;Instructions can set a &amp;quot;keep&amp;quot; bit that causes inputs to remain on the stack&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The instruction set doesn&amp;#39;t include modulus/remainder&lt;/strong&gt; (why!?)&lt;/li&gt;
&lt;li&gt;Supports both global and local labels, which is convenient&lt;/li&gt;
&lt;li&gt;Instructions must be UPPERCASE (except for flags), but hexadecimal must be lowercase&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Names like &lt;code&gt;b1&lt;/code&gt; aren&amp;#39;t allowed&lt;/strong&gt; because they&amp;#39;re actually hexadecimal numbers...&lt;/li&gt;
&lt;li&gt;Mixing 8-bit and 16-bit values on the stack is tedious&lt;/li&gt;
&lt;li&gt;Must specify &lt;code&gt;&amp;amp;&lt;/code&gt; on relative references, but not &lt;code&gt;@&lt;/code&gt; on global references...&lt;/li&gt;
&lt;li&gt;Pro tip: don&amp;#39;t DUP relative addresses!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;apl&quot;&gt;APL&lt;/h2&gt;
&lt;p&gt;After playing with J and K (although I couldn&amp;#39;t actually find an official implementation of K5), it was time to play with their spiritual predecessor, APL.&lt;/p&gt;
&lt;p&gt;With J, I felt like I was re-learning Perl-compatible regular expressions, but with a much larger menu of ASCII sigils. APL is the same, &lt;strong&gt;except I can&amp;#39;t type (and don&amp;#39;t even know the names of) the sigils&lt;/strong&gt;. Overall, this was probably the most challenging syntax I&amp;#39;ve encountered outside of esoteric programming languages.&lt;/p&gt;
&lt;h2 id=&quot;factor&quot;&gt;Factor&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Factor is the niftiest concatenative language I&amp;#39;ve tried&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Intriguingly, it borrows heavily from Common Lisp (e.g. restarts, editor integration, multiple dispatch, image-based development). I&amp;#39;d even go as far to say that, in my limited experience, &lt;strong&gt;Factor feels like a concatenative expression of Common Lisp&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Common Lisp-like restarts!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://andreaferretti.github.io/factor-tutorial/&quot;&gt;This Factor tutorial&lt;/a&gt; is a great introduction--not just to Forth, but to concatenative languages in general&lt;/li&gt;
&lt;li&gt;Factor&amp;#39;s compiler validates documented stack effects&lt;/li&gt;
&lt;li&gt;Factor supports editor integration, e.g. &amp;quot;go to definition&amp;quot;&lt;/li&gt;
&lt;li&gt;Can save images, refresh files from disk, etc.&lt;/li&gt;
&lt;li&gt;Built-in help&lt;/li&gt;
&lt;li&gt;Support for local variables, using &lt;code&gt;::&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;rebol&quot;&gt;Rebol&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Rebol is a minimal, but impressively capable scripting language&lt;/strong&gt;. The entire language, including GUI support is well under 1 MB. How did I not run across Rebol when I was &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/minimal-dev-env-5.html&quot;&gt;looking for a minimal development environment&lt;/a&gt;!? I only scratched the surface of Rebol, but it felt like exactly what I was looking for.&lt;/p&gt;
&lt;p&gt;Having said that, I&amp;#39;m uncertain about the future of Rebol--it doesn&amp;#39;t even appear to fully support 64-bit architectures.&lt;/p&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Entire language is 440 KB!&lt;/li&gt;
&lt;li&gt;Used the console version&lt;/li&gt;
&lt;li&gt;Variables in functions don&amp;#39;t default to locals!?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;bash&quot;&gt;Bash&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ve successfully been avoiding writing Bash recently, but I thought it might be fun to see what math looks like in Bash.&lt;/p&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ugly syntax (double parentheses, double brackets)&lt;/li&gt;
&lt;li&gt;Little inconsistencies, e.g. &lt;code&gt;fi&lt;/code&gt; vs &lt;code&gt;done&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Lots of symbols to remember: &lt;code&gt;#&lt;/code&gt;, &lt;code&gt;@&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;But &lt;em&gt;very&lt;/em&gt; widely deployed!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;julia&quot;&gt;Julia&lt;/h2&gt;
&lt;p&gt;From my uninformed perspective, Julia looks like the language that academics should be using instead of Python. I probably shouldn&amp;#39;t have said that, but there it is.&lt;/p&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Excellent documentation!&lt;/li&gt;
&lt;li&gt;Base runtime includes a constant indicating the precision of floating points numbers!&lt;/li&gt;
&lt;li&gt;Has a REPL, but I didn&amp;#39;t use it&lt;/li&gt;
&lt;li&gt;Built-in rational type!&lt;/li&gt;
&lt;/ul&gt;
</content>
</entry>
</feed>
