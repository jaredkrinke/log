<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Schemescape</title>
<id>https://log.schemescape.com/</id>
<link rel="self" href="https://log.schemescape.com/feed.xml"/>
<link rel="alternate" href="https://log.schemescape.com/"/>
<author>
<name>Schemescape</name>
</author>
<updated>2023-11-08T18:09:51.714Z</updated>

<entry>
<title>Building the fastest static site generator... or not</title>
<id>https://log.schemescape.com/posts/static-site-generators/speeding-up-rebuilds-4.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/static-site-generators/speeding-up-rebuilds-4.html"/>
<updated>2023-11-08T00:00:00.000Z</updated>
<summary type="text">This is a personal anecdote about the struggle to avoid over-engineering a static site generator.</summary>
<content type="html">&lt;p&gt;Well, I did it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I have successfully staved off the urge (at least temporarily) to create &lt;a href=&quot;https://log.schemescape.com/posts/static-site-generators/pre-markdown.html&quot;&gt;yet&lt;/a&gt; &lt;a href=&quot;https://log.schemescape.com/posts/static-site-generators/md2blog-design.html&quot;&gt;another&lt;/a&gt; static site generator&lt;/strong&gt; by instead making &lt;a href=&quot;https://jaredkrinke.github.io/md2blog/&quot;&gt;md2blog&lt;/a&gt; (my zero-config dev blog generator) &lt;em&gt;just fast enough&lt;/em&gt; for my workflow that it seems pointless to bother improving upon its performance.&lt;/p&gt;
&lt;p&gt;Spoiler: adding trivial caching and bypassing the file system shrunk live rebuild times by ~80%--down to &lt;strong&gt;50 milliseconds&lt;/strong&gt; on my (decade old) desktop computer. Updates now appear in roughly the amount of time it takes me to shift the focus of my eyes from my text editor to the adjacent browser.&lt;/p&gt;
&lt;h1 id=&quot;background&quot;&gt;Background&lt;/h1&gt;
&lt;p&gt;Possibly as a reaction to &lt;a href=&quot;https://log.schemescape.com/posts/static-site-generators/../game-development/web-game-on-steam-for-linux-2.html&quot;&gt;releasing a piece of software based on Electron&lt;/a&gt;, I&amp;#39;ve been playing with a &lt;a href=&quot;https://log.schemescape.com/posts/static-site-generators/../programming-languages/minimal-dev-env-4.html&quot;&gt;minimal development environment, running on an old netbook&lt;/a&gt;. Unfortunately, my static site generator was taking roughly 6 seconds (on the netbook) to perform live rebuilds of my site (~90 pages), and I&amp;#39;m generally not patient with poorly optimized software.&lt;/p&gt;
&lt;p&gt;Fortunately, after &lt;a href=&quot;https://log.schemescape.com/posts/static-site-generators/speeding-up-rebuilds-3.html&quot;&gt;a few tweaks&lt;/a&gt;, I was able to reduce that time down to around 900 milliseconds. Sub-second updates are acceptable (impressive, even--on a netbook), but I couldn&amp;#39;t shake the feeling that it could be &lt;em&gt;a lot&lt;/em&gt; faster.&lt;/p&gt;
&lt;h1 id=&quot;plans-for-a-new-static-site-generator&quot;&gt;Plans for a new static site generator&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;The most obvious way to speed up rebuilds of a static site is to avoid doing unnecessary work&lt;/strong&gt;. Given that &lt;a href=&quot;https://log.schemescape.com/posts/static-site-generators/speeding-up-rebuilds.html&quot;&gt;a previous experiment of mine&lt;/a&gt; showed it was only necessary to rebuild roughly 5 pages when updating (or adding) a single blog post, I started making plans for an extensible static site generator (similar to &lt;a href=&quot;https://github.com/jaredkrinke/goldsmith&quot;&gt;Goldsmith&lt;/a&gt;/&lt;a href=&quot;https://log.schemescape.com/posts/static-site-generators/metalsmith.html&quot;&gt;Metalsmith&lt;/a&gt;) &lt;em&gt;with an accurate dependency graph&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Since I&amp;#39;m &lt;a href=&quot;https://log.schemescape.com/posts/static-site-generators/../programming-languages/learning-lisp-in-2023.html&quot;&gt;learning Lisp&lt;/a&gt;, I started planning to rebuild md2blog in Common Lisp. With an accurate dependency graph, compilation to native code, and the ability to process Markdown/syntax highlighting in parallel, I was fairly certain I could significantly improve live rebuild times.&lt;/p&gt;
&lt;p&gt;Additionally, Common Lisp would trivially allow for beautiful s-expression-based templates, interactive debugging and introspection, and even automatic detection of pipeline/code updates.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I could build the most extensible--and fastest--static site generator ever!&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;or-i-could-do-something-else&quot;&gt;Or I could do something else&lt;/h1&gt;
&lt;p&gt;But I already have a perfectly functional (and tolerably fast) static site generator. &lt;strong&gt;And I&amp;#39;m (nearly) the only user&lt;/strong&gt;. Is it really a good use of my time to build the same thing, just faster and in Lisp? It would certainly be educational, and a great way to learn Common Lisp, but finding Common Lisp libraries for Markdown processing, syntax highlighting, JSON validation, cache storage, and file system monitoring sounds... daunting.&lt;/p&gt;
&lt;p&gt;I still maintain that static site generators are a perfect first project for learning a programming language (and its ecosystem). It forces you to interact with the file system, understand data flows, find relevant libraries, and maybe even build a web server. In the end, you can produce a fast and efficient web site.&lt;/p&gt;
&lt;p&gt;But I&amp;#39;ve already done this at least four times and I&amp;#39;m probably past the point of diminishing returns. Is this a project that&amp;#39;s really worth spending a few weeks of my spare time on?&lt;/p&gt;
&lt;p&gt;Analogous to speeding up a static site generator, &lt;strong&gt;the most obvious way to speed up a &lt;em&gt;software project&lt;/em&gt; is to avoid doing unnecessary work&lt;/strong&gt; (i.e. avoid starting over from scratch). So I refocused my efforts on wringing maximal performance from md2blog, while staying within its existing design constraints.&lt;/p&gt;
&lt;h2 id=&quot;an-epiphany-around-caching&quot;&gt;An epiphany around caching&lt;/h2&gt;
&lt;p&gt;What if, instead of making a really smart cache, I made a really dumb one?&lt;/p&gt;
&lt;p&gt;While planning a scheme for reliably caching the results of arbitrary steps in the processing pipeline (specifically, deciding between simply using files&amp;#39; &amp;quot;last modified time&amp;quot; vs. using their actual content--or a hash--to detect changes), I realized that &lt;strong&gt;most of the challenges evaporated if I scoped the cache a single run of the tool&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;As noted in a previous post, my primary performance-sensitive workflow is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run md2blog as a live-reloading server&lt;/li&gt;
&lt;li&gt;Edit a blog post&lt;/li&gt;
&lt;li&gt;Hit Ctrl+S in my text editor&lt;/li&gt;
&lt;li&gt;Wait for updated content to render in my browser&lt;/li&gt;
&lt;li&gt;Go to 2&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I.e. &lt;strong&gt;it&amp;#39;s all one run of md2blog&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;As an experiment, I added a trivial in-memory Markdown cache and found that this One Weird Trick removed plugin processing as the primary bottleneck. The largest remaining bottleneck was the file system itself (writing out all the file contents to disk).&lt;/p&gt;
&lt;h2 id=&quot;an-epiphany-around-the-file-system&quot;&gt;An epiphany around the file system&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Why am I even waiting on the file system?&lt;/strong&gt; md2blog reads in files and then all subsequent processing is done in memory. Since I&amp;#39;m already running my own web server, &lt;strong&gt;I can just serve HTTP requests straight out of memory&lt;/strong&gt; while files are written to disk in the background!&lt;/p&gt;
&lt;p&gt;That removed the final obvious bottleneck.&lt;/p&gt;
&lt;h1 id=&quot;results&quot;&gt;Results&lt;/h1&gt;
&lt;p&gt;Here&amp;#39;s a table of approximate &amp;quot;live rebuild&amp;quot; times from:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;md2blog 1.1.1: no optimizations whatsoever&lt;/li&gt;
&lt;li&gt;md2blog 1.2.0: syntax highlighting cached and link-checking moved to the background&lt;/li&gt;
&lt;li&gt;md2blog 1.2.2 (new): Markdown cached and file system output moved to the background&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;md2blog version&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;Netbook (ms)&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;Desktop (ms)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;v1.1.1&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;6000&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;1200&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.2.0&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;900&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;190&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v1.2.2&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;200&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;50&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;As noted in the spoiler, on my desktop computer (with an 11 year-old processor), updates appear almost instantaneously (fortunately, my site has simple HTML and no JavaScript, so rendering is also fast).&lt;/p&gt;
&lt;p&gt;I&amp;#39;m fairly certain this is still &lt;em&gt;not&lt;/em&gt; the fastest static site generator in existence. Maybe the fastest full-featured, JavaScript-based one? Regardless, it is clearly &lt;em&gt;fast enough&lt;/em&gt;--at least for now.&lt;/p&gt;
</content>
</entry>
<entry>
<title>Building a browser-based app without JavaScript, part 2</title>
<id>https://log.schemescape.com/posts/web-development/interactive-browser-app-without-js-2.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/web-development/interactive-browser-app-without-js-2.html"/>
<updated>2023-10-26T00:00:00.000Z</updated>
<summary type="text">Yes, you can build real-time, interactive browser-based apps without JavaScript. But I wouldn&apos;t suggest using this particular approach.</summary>
<content type="html">&lt;p&gt;In the &lt;a href=&quot;https://log.schemescape.com/posts/web-development/interactive-browser-app-without-js.html&quot;&gt;last post&lt;/a&gt;, I brainstormed ideas for creating a real-time, interactive browser-based app without using JavaScript (or WebAssembly).&lt;/p&gt;
&lt;p&gt;In this post, I&amp;#39;ll describe a proof-of-concept that I created for &lt;a href=&quot;https://itch.io/jam/autumn-lisp-game-jam-2023&quot;&gt;Lisp Game Jam (Autumn 2023)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You can play the game here: &lt;a href=&quot;https://foo.schemescape.com/&quot;&gt;https://foo.schemescape.com/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Source code is here: &lt;a href=&quot;https://github.com/jaredkrinke/cl-stuff/tree/main/foolander&quot;&gt;https://github.com/jaredkrinke/cl-stuff/tree/main/foolander&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;recap&quot;&gt;Recap&lt;/h1&gt;
&lt;p&gt;The most difficult adjective to support without JavaScript is &amp;quot;real-time&amp;quot;. In some cases, &lt;a href=&quot;https://speckyboy.com/pure-css-games/&quot;&gt;CSS itself might be enough&lt;/a&gt; (although I truly hope CSS is not bloated enough for implementing a snake game!).&lt;/p&gt;
&lt;p&gt;If you don&amp;#39;t need real-time feedback, you can probably get by with regular &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/Forms/Your_first_form&quot;&gt;HTML forms&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Push_technology#Long_polling&quot;&gt;long-polling&lt;/a&gt;, or even &lt;a href=&quot;https://en.wikipedia.org/wiki/Meta_refresh&quot;&gt;meta refresh&lt;/a&gt;. But if you need immediate feedback for both user input and server state updates, avoiding JavaScript can be tricky.&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s what I came up with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Chunked_transfer_encoding&quot;&gt;HTTP 1.1 chunked transfer encoding&lt;/a&gt;, for progressively appending HTML/CSS&lt;/li&gt;
&lt;li&gt;HTML forms (inside an &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;), for providing input (without reloading the main page)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I don&amp;#39;t know if this is the best approach (in fact, I doubt it), but it is &lt;em&gt;an&lt;/em&gt; approach that is &amp;quot;good enough&amp;quot; for my terrible game.&lt;/p&gt;
&lt;h1 id=&quot;architecture&quot;&gt;Architecture&lt;/h1&gt;
&lt;p&gt;The architecture for my game is pretty simple:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There&amp;#39;s a table of cells for the game board, each addressable via CSS (I used a class, but probably should have used an id)&lt;/li&gt;
&lt;li&gt;This is all pushed as an initial chunk, with the stream kept open (and without closing the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tags)&lt;/li&gt;
&lt;li&gt;As the game runs, I modify the color of the table cells by pushing additional CSS rules in additional &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; chunks&lt;/li&gt;
&lt;li&gt;I also &amp;quot;overwrite&amp;quot; some HTML by defaulting one class to not being shown, with a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/:last-of-type&quot;&gt;&lt;code&gt;:last-of-type&lt;/code&gt;&lt;/a&gt; override to show the most recently written element only&lt;/li&gt;
&lt;li&gt;Input is handled via HTTP post (with a &amp;quot;session id&amp;quot; string) using an HTML form inside an &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; (relegating the &amp;quot;entire page reloads&amp;quot; problem to a frame)&lt;/li&gt;
&lt;li&gt;The form&amp;#39;s submission button has an &amp;quot;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey&quot;&gt;access key&lt;/a&gt;&amp;quot; for keyboard-only control--this could be useful for games with multiple buttons, although it requires holding down modifier keys (which vary widely based on operating system and browser)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;examples&quot;&gt;Examples&lt;/h1&gt;
&lt;h2 id=&quot;table&quot;&gt;Table&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;table&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;tbody&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;s29_0&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- Row 29, column 0 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;s29_1&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- Row 29, column 1 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;s29_2&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- etc. --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;s29_3&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;
...
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;tbody&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;table&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;game-board-visual-updates&quot;&gt;Game board visual updates&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.s9_12&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: yellow }&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- Change row 9, col 12 to yellow --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.s6_12&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;background-color&lt;/span&gt;: blue }&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: I should have used ids instead of classes (since they&amp;#39;re unique elements). Also, I could have consolidated multiple same-frame updates into a single &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;h2 id=&quot;overwriting-the-last-bit-of-html-the-score&quot;&gt;&amp;quot;Overwriting&amp;quot; the last bit of HTML (the score)&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.score&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: none }
&lt;span class=&quot;hljs-selector-class&quot;&gt;.score&lt;/span&gt;&lt;span class=&quot;hljs-selector-pseudo&quot;&gt;:last-of-type&lt;/span&gt; { &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: block }
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;score&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Score: 0&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- Initial score --&amp;gt;&lt;/span&gt;
...
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;score&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Score: 1&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- Later, this score is shown instead --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;input-frame&quot;&gt;Input frame&lt;/h2&gt;
&lt;p&gt;My game only uses a single button, but multiple buttons are easy to support using distinct forms with hidden inputs. In fact, I used multiple buttons until I decided to simplify at the very end.&lt;/p&gt;
&lt;p&gt;Parent page:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;iframe&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;controls?id=cbecixentpsc&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;iframe&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Frame body:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;action&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;action&amp;quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;method&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- This id links input to an active instance of the game --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;cbecixentpsc&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;cbecixentpsc&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- This was for supporting multiple buttons --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;action&amp;quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;clockwise&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- The actual submit button that is shown in-game --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;↻&amp;quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;accesskey&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;e&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;id&lt;/code&gt; parameter is tracked on the server to link input to a particular HTTP request (which runs an entire round of the game).&lt;/p&gt;
&lt;h1 id=&quot;analysis&quot;&gt;Analysis&lt;/h1&gt;
&lt;p&gt;Give the game a try! If your latency isn&amp;#39;t too high, then it&amp;#39;s somewhat playable.&lt;/p&gt;
&lt;p&gt;Of course, I wouldn&amp;#39;t recommend this approach because it has a number of drawbacks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As noted, latency is a problem because &lt;em&gt;every user input event&lt;/em&gt; is a new HTTP post -- this is a nontrivial amount of overhead&lt;/li&gt;
&lt;li&gt;Also, successive button presses are slow because the entire input frame has to be reloaded&lt;/li&gt;
&lt;li&gt;The server can&amp;#39;t handle too many concurrent players because each game holds an HTTP request open for the entire length of the game (I&amp;#39;m using a web server that dedicates a thread to each request, although many web servers don&amp;#39;t do this anymore)&lt;/li&gt;
&lt;li&gt;Updating the game board requires evaluating CSS rules, which is obviously less efficient than just drawing, say, a canvas square&lt;/li&gt;
&lt;li&gt;&amp;quot;Normal&amp;quot; keyboard input doesn&amp;#39;t really work since HTML can only use access keys (which require holding down some combination of Ctrl/Shift/Alt/Meta/Command)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But it &lt;em&gt;does&lt;/em&gt; (mostly) work! And it gave me an excuse to mess around with Lisp and participate in a game jam.&lt;/p&gt;
&lt;p&gt;Overall, I&amp;#39;m calling this a success since it answered my original question... even if it&amp;#39;s not a technique I&amp;#39;d recommend.&lt;/p&gt;
&lt;h1 id=&quot;addendum&quot;&gt;Addendum&lt;/h1&gt;
&lt;h2 id=&quot;achievement-not-unlocked&quot;&gt;Achievement &lt;em&gt;not&lt;/em&gt; unlocked&lt;/h2&gt;
&lt;p&gt;Unfortunately, I wasn&amp;#39;t able to achieve one secret goal I had in mind: getting the game to run in a minimalist, no-JavaScript browser, like &lt;a href=&quot;https://dillo.org/&quot;&gt;Dillo&lt;/a&gt;. Apparently Dillo doesn&amp;#39;t support inline frames, so the control scheme doesn&amp;#39;t really work (unless you have another window open to the frame). Additionally, Dillo didn&amp;#39;t seem to like my &amp;quot;streaming CSS&amp;quot; approach--the entire game board just remained its initial blue color.&lt;/p&gt;
&lt;p&gt;Oh well. At least I tried.&lt;/p&gt;
&lt;h2 id=&quot;nginx&quot;&gt;nginx&lt;/h2&gt;
&lt;p&gt;In order to support HTTPS using nginx, I had to tweak a couple of nginx settings. I&amp;#39;m noting them down here for reference:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;proxy_http_version&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;# nginx default is 1.0, but chunking is a 1.1 feature&lt;/span&gt;
&lt;span class=&quot;hljs-attribute&quot;&gt;proxy_buffering&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;off&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;# Necessary to ensure chunks are forwarded as soon as received&lt;/span&gt;
&lt;span class=&quot;hljs-attribute&quot;&gt;gzip&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;off&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;# This is actually the default, chunking only worked with gzip disabled&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
</entry>
<entry>
<title>Building a browser-based app without JavaScript</title>
<id>https://log.schemescape.com/posts/web-development/interactive-browser-app-without-js.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/web-development/interactive-browser-app-without-js.html"/>
<updated>2023-10-19T00:00:00.000Z</updated>
<summary type="text">Can I build an interactive (and ideally real-time) browser-based app without using JavaScript?</summary>
<content type="html">&lt;p&gt;For &lt;a href=&quot;https://log.schemescape.com/posts/web-development/../game-development/lisp-game-jam-2.html&quot;&gt;Lisp Game Jam (Spring 2023)&lt;/a&gt;, I built a browser-based word scramble game without (technically) writing a single line of JavaScript. But that&amp;#39;s a little bit misleading since &lt;a href=&quot;https://parenscript.common-lisp.dev/&quot;&gt;Parenscript&lt;/a&gt; transpiled my Common Lisp code into JavaScript at build time, so JavaScript was still used at run-time.&lt;/p&gt;
&lt;p&gt;Lately, I&amp;#39;ve gotten to wondering: &lt;strong&gt;how interactive of an application can be built for the browser &lt;em&gt;without any JavaScript whatsoever&lt;/em&gt;?&lt;/strong&gt; (N.B. WebAssembly doesn&amp;#39;t help since WebAssembly modules are loaded using JavaScript.)&lt;/p&gt;
&lt;p&gt;For the record, my motivation is two-part:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Mostly, I&amp;#39;m just curious if such a thing is possible&lt;/li&gt;
&lt;li&gt;But additionally, I find it slightly horrifying that browsing the web today requires multiple gigabytes of RAM--and I attribute much of that bloat to the operating system-sized browser runtime (and associated sandboxing) that supports &lt;del&gt;ad delivery&lt;/del&gt; JavaScript&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;aside&quot;&gt;Aside&lt;/h2&gt;
&lt;p&gt;Unrelated to this project, I&amp;#39;d like to mention a service I ran across recently: &lt;a href=&quot;https://sourcehut.org/&quot;&gt;SourceHut&lt;/a&gt;. It provides project hosting with two notable (and tangentially related to this article) features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All features work without JavaScript&lt;/li&gt;
&lt;li&gt;Many features work without an &lt;em&gt;account&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;#39;ll admit I&amp;#39;m a little jealous that I didn&amp;#39;t come up with this idea myself. It seems like the sort of thing the software development world needs these days.&lt;/p&gt;
&lt;p&gt;But back to the task at hand...&lt;/p&gt;
&lt;h1 id=&quot;html-forms-to-the-rescue&quot;&gt;HTML forms &lt;del&gt;to the rescue!&lt;/del&gt;&lt;/h1&gt;
&lt;p&gt;The World Wide Web worked fine prior to JavaScript. I&amp;#39;m not sure when HTML forms were added to the HTML &amp;quot;standard&amp;quot;, but for the sake of argument, I&amp;#39;m assuming that forms existed prior to JavaScript being widely supported. Using form submission, it&amp;#39;s possible for browsers to have a two-way communication channel with a web site, so interactive web applications clearly don&amp;#39;t &lt;em&gt;require&lt;/em&gt; JavaScript.&lt;/p&gt;
&lt;p&gt;Having said that, form submission reloads the entire web page, so the experience is decidedly seamful. Additionally, form submission is user-initiated, so there&amp;#39;s no way for the application to update its UI in the absence of user input.&lt;/p&gt;
&lt;p&gt;Can we do better?&lt;/p&gt;
&lt;h1 id=&quot;potential-solution-chunked-transfer-encoding-and-frames&quot;&gt;Potential solution: chunked transfer encoding and frames&lt;/h1&gt;
&lt;p&gt;I&amp;#39;m not sure where I first heard the story, but there are tales of browser-based, JavaScript-free chat apps that use &lt;a href=&quot;https://en.wikipedia.org/wiki/Chunked_transfer_encoding&quot;&gt;chunked transfer encoding&lt;/a&gt; to append to an HTML page, along with an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/frame&quot;&gt;HTML frame element&lt;/a&gt; that uses form submission to trigger the transfer of said &lt;del&gt;appendages&lt;/del&gt; chunks that are appended to the page.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s unclear to me what the motivation was behind these apps. Did they predate JavaScript? Did they need to support unscriptable browsers? Did their users frequently have JavaScript disabled (perhaps for privacy or security reasons)?&lt;/p&gt;
&lt;p&gt;Regardless, I see no obvious reason why this approach wouldn&amp;#39;t work for building an interactive web app without JavaScript. Who knows, it might even be possible to use some fancy CSS rules to make it appear as though part of a page is being updated instead of just appended to.&lt;/p&gt;
&lt;h1 id=&quot;so-does-it-work&quot;&gt;So does it work?&lt;/h1&gt;
&lt;p&gt;I don&amp;#39;t know! But I&amp;#39;m planning to find out, so stay tuned...&lt;/p&gt;
</content>
</entry>
<entry>
<title>Creating Windows-style paths (backslash-separated) from pathnames in Common Lisp</title>
<id>https://log.schemescape.com/posts/lisp/pathnames-on-windows.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/lisp/pathnames-on-windows.html"/>
<updated>2023-10-04T00:00:00.000Z</updated>
<summary type="text">I spent far too long trying to figure out how to do this, so I&apos;m documenting it here, in case anyone else has trouble finding the answer.</summary>
<content type="html">&lt;p&gt;Use &lt;code&gt;uiop/filesystem:native-namestring&lt;/code&gt;. That&amp;#39;s the answer.&lt;/p&gt;
&lt;p&gt;The rest of this post is just additional context/whining.&lt;/p&gt;
&lt;h1 id=&quot;background&quot;&gt;Background&lt;/h1&gt;
&lt;p&gt;Common Lisp was born in an era of surprising file system diversity. Nowadays, Windows is mocked for using something other than a forward slash as a path separator, but old Macs used colons and I&amp;#39;ve seen references to &lt;code&gt;&amp;gt;&lt;/code&gt; being used on more exotic platforms.&lt;/p&gt;
&lt;p&gt;Common Lisp handles this difference (and many other differences that never even occurred to me, such as types and versions) by abstracting everything into a platform-independent concept called a &lt;a href=&quot;http://www.ai.mit.edu/projects/iiip/doc/CommonLISP/HyperSpec/Body/glo_p.html#pathname&quot;&gt;pathname&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;example-pathname&quot;&gt;Example pathname&lt;/h2&gt;
&lt;p&gt;Here&amp;#39;s how to create a (relative) pathname for &amp;quot;the directory &amp;#39;foo&amp;#39;, which is located in the parent directory&amp;quot;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lisp&quot;&gt; (&lt;span class=&quot;hljs-name&quot;&gt;make-pathname&lt;/span&gt; &lt;span class=&quot;hljs-symbol&quot;&gt;:directory&lt;/span&gt; &amp;#x27;(&lt;span class=&quot;hljs-symbol&quot;&gt;:relative&lt;/span&gt; &lt;span class=&quot;hljs-symbol&quot;&gt;:up&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;/h2&gt;
&lt;p&gt;While working on a tiny Common Lisp project, my program needed to run a command in a subprocess (using &lt;code&gt;uiop:run-program&lt;/code&gt;) with a directory passed as an argument. &lt;strong&gt;I had assumed that &lt;code&gt;format&lt;/code&gt;-ing a pathname on Windows would result in a Windows-compatible string&lt;/strong&gt; (or at least that &lt;code&gt;namestring&lt;/code&gt; would), e.g. &amp;quot;..\foo\&amp;quot; for the example code above.&lt;/p&gt;
&lt;p&gt;For reasons I won&amp;#39;t yet understand, &lt;strong&gt;this is &lt;em&gt;not&lt;/em&gt; how things work on SBCL&lt;/strong&gt;! Instead, forward slashes are used: &amp;quot;../foo/&amp;quot;. This works fine for some programs (including Git, apparently), but I doubt it&amp;#39;s robust in general, considering some (mostly old) Windows programs use the forward slash to indicate command-line flags (instead of using a hyphen).&lt;/p&gt;
&lt;h2 id=&quot;but-why&quot;&gt;But why?&lt;/h2&gt;
&lt;p&gt;I thought the point of pathnames was to support a platform-independent notion of a file path/name, so it&amp;#39;s not clear to me why they don&amp;#39;t &lt;code&gt;format&lt;/code&gt; by default into a form that&amp;#39;s compatible with the host environment.&lt;/p&gt;
&lt;p&gt;Even more surprising, after spending way too much time browsing the &lt;a href=&quot;http://www.ai.mit.edu/projects/iiip/doc/CommonLISP/HyperSpec/FrontMatter/index.html&quot;&gt;Common Lisp HyperSpec&lt;/a&gt;, I couldn&amp;#39;t even find anything in Common Lisp&amp;#39;s standard library for this scenario. Why can I create and manipulate pathnames but not actually pass them to the operating system? That&amp;#39;s a serious question--if you know the answer, please tell me!&lt;/p&gt;
&lt;h1 id=&quot;uiop-to-the-rescue&quot;&gt;UIOP to the rescue&lt;/h1&gt;
&lt;p&gt;Given that (ANSI) Common Lisp hasn&amp;#39;t been updated since 1994, I don&amp;#39;t see this situation changing, but the good news is that Common Lisp implementations fill in this gap and &lt;a href=&quot;https://asdf.common-lisp.dev/uiop.html&quot;&gt;UIOP&lt;/a&gt; abstracts away the implementations&amp;#39; different approaches/naming schemes.&lt;/p&gt;
&lt;p&gt;So that leads us to the solution: &lt;code&gt;uiop/filesystem:native-namestring&lt;/code&gt;. Example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lisp&quot;&gt; (&lt;span class=&quot;hljs-name&quot;&gt;uiop/filesystem&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:native-namestring&lt;/span&gt; (&lt;span class=&quot;hljs-name&quot;&gt;make-pathname&lt;/span&gt; &lt;span class=&quot;hljs-symbol&quot;&gt;:directory&lt;/span&gt; &amp;#x27;(&lt;span class=&quot;hljs-symbol&quot;&gt;:relative&lt;/span&gt; &lt;span class=&quot;hljs-symbol&quot;&gt;:up&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Result:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;..&lt;span class=&quot;hljs-subst&quot;&gt;\\&lt;/span&gt;foo&lt;span class=&quot;hljs-subst&quot;&gt;\\&lt;/span&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Problem solved!&lt;/p&gt;
&lt;p&gt;The only lingering question for me is: why is &lt;code&gt;native-namestring&lt;/code&gt; in &lt;code&gt;uiop/filesystem&lt;/code&gt; instead of &lt;code&gt;uiop/pathname&lt;/code&gt;?&lt;/p&gt;
</content>
</entry>
<entry>
<title>Porting a browser-based game to Steam, on Linux (part 2)</title>
<id>https://log.schemescape.com/posts/game-development/web-game-on-steam-for-linux-2.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/game-development/web-game-on-steam-for-linux-2.html"/>
<updated>2023-08-26T00:00:00.000Z</updated>
<summary type="text">I finally ported my browser-based Steam game to Linux. It was mostly straight-forward.</summary>
<content type="html">&lt;p&gt;In &lt;a href=&quot;https://log.schemescape.com/posts/game-development/web-game-on-steam-for-linux.html&quot;&gt;a previous post&lt;/a&gt; I outlined a plan to (finally) port &lt;a href=&quot;https://log.schemescape.com/posts/game-development/../game-development/sic-1.html&quot;&gt;my browser-based Steam game&lt;/a&gt; to Linux. (The original Windows-only release used WebView2.) The port mostly went according to plan and only took a week or two, working in my spare time.&lt;/p&gt;
&lt;h1 id=&quot;original-plan&quot;&gt;Original plan&lt;/h1&gt;
&lt;p&gt;The simplest way to run a browser-based game using Steam on Linux was to use Electron, but there was one problem: &lt;a href=&quot;https://github.com/greenheartgames/greenworks&quot;&gt;Greenworks&lt;/a&gt; (a Steam integration library) didn&amp;#39;t support friend leaderboards (an important feature of my game). My plan (which optimized for having to learn the fewest new libraries/concepts) was to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Port the Steam release to Electron&lt;/li&gt;
&lt;li&gt;Refactor Steam integration code into a flat C interface&lt;/li&gt;
&lt;li&gt;Consume the Steam integration code using one of Node&amp;#39;s FFI libraries&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Hope&lt;/em&gt; that this new version works acceptably via Proton&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;porting-to-electron&quot;&gt;Porting to Electron&lt;/h1&gt;
&lt;p&gt;Porting to Electron was fairly straightforward. I was able to use Electron&amp;#39;s tutorials to get a mostly working game pretty quickly. There were a few issues I had to iron out:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Electron Forge doesn&amp;#39;t have an easy way to add binaries (e.g. the Steamworks binary) to the root of the output folder, so I had to &lt;a href=&quot;https://github.com/jaredkrinke/sic1/commit/c953e7adb63a43022102dbf434123c400ac507a2#diff-4c2d32d0a0906dd3108b9ce9d29178bc2e8e3eae8d82f0b735a73e1f2b23ee5e&quot;&gt;hack in an &lt;code&gt;afterExtract&lt;/code&gt; callback to copy the files&lt;/a&gt; and switch from using &lt;code&gt;electron-forge start&lt;/code&gt; (which &lt;em&gt;doesn&amp;#39;t&lt;/em&gt; run &lt;code&gt;afterExtract&lt;/code&gt;) to &lt;code&gt;electron-forge package&lt;/code&gt; (which does) for testing&lt;/li&gt;
&lt;li&gt;Electron allows &amp;quot;Ctrl+R&amp;quot; to reload the page by default (fix: &lt;a href=&quot;https://github.com/jaredkrinke/sic1/commit/0459f8c1bd7efd55095936fd1d5350bd27b6eab8&quot;&gt;remove the menu&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fortunately, &lt;a href=&quot;https://github.com/jaredkrinke/sic1/commit/ef4d99f517f227ba7755bb67cb7abf962d18be0b&quot;&gt;adding crash reporting&lt;/a&gt; was trivially easy.&lt;/p&gt;
&lt;h1 id=&quot;refactoring-steam-integration-for-electron-andor-linux&quot;&gt;Refactoring Steam integration for Electron and/or Linux&lt;/h1&gt;
&lt;p&gt;My original Steam integration code used the Win32 API, so I had to rewrite it using only the C++11 standard library. I then exposed that code in a flat, synchronous C interface (which I dubbed &lt;a href=&quot;https://github.com/jaredkrinke/ez-steam-api&quot;&gt;ez-steam-api&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;To support calling the C API from Electron, I used &lt;a href=&quot;https://koffi.dev/&quot;&gt;Koffi&lt;/a&gt; (which was great, other than one bug I hit--which has since been fixed). The wrapper is documented &lt;a href=&quot;https://github.com/jaredkrinke/ez-steam-api/tree/main/js&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;hoping-that-electron-runs-on-proton&quot;&gt;&lt;em&gt;Hoping&lt;/em&gt; that Electron runs on Proton&lt;/h1&gt;
&lt;p&gt;In the previous post, I acknowledged that &lt;em&gt;hoping&lt;/em&gt; Electron ran acceptably on Proton was a risk. It turns out this risk was well founded.&lt;/p&gt;
&lt;p&gt;In addition to &lt;a href=&quot;https://github.com/jaredkrinke/sic1/issues/270#issuecomment-1636918488&quot;&gt;wasting a lot of time testing out different Electron and Proton combinations&lt;/a&gt;, I ran into one insurmountable bug that was only &lt;em&gt;just annoying enough&lt;/em&gt; to make me give up: the mouse cursor is off by about 25 pixels on Ubuntu, when windowed (no idea why or how to investigate it, although I wonder if it&amp;#39;s related to the system bar at the top of the screen). In fullscreen, Electron-on-Proton worked great! But having windowed mode be broken was unacceptable for my programming game (for other genres, this bug might be acceptable).&lt;/p&gt;
&lt;p&gt;So I ended up having to do a native Linux port anyway.&lt;/p&gt;
&lt;h1 id=&quot;native-linux-port-on-steam&quot;&gt;Native Linux port on Steam&lt;/h1&gt;
&lt;p&gt;Building an Electron app for Linux is trivial. Getting it to run on Steam was a bit frustrating, however, because the game would fail to launch. But &lt;em&gt;only&lt;/em&gt; when run from Steam! Even &lt;a href=&quot;https://gitlab.steamos.cloud/steamrt/scout/sdk/-/blob/steamrt/scout/README.md#testing-software-that-runs-in-scout&quot;&gt;Steam&amp;#39;s test script&lt;/a&gt; launched the game fine.&lt;/p&gt;
&lt;p&gt;I don&amp;#39;t recall how I discovered the solution, but the issue was related to Electron&amp;#39;s sandboxing. Given my game only loads its own code (and not anything from the web), the workaround was just to &lt;a href=&quot;https://steamcommunity.com/groups/steamworks/discussions/13/3801651941320989565/#c3801651941326097085&quot;&gt;add &lt;code&gt;--no-sandbox&lt;/code&gt; to the list of command line arguments&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And just like that, I had a working Linux port!&lt;/p&gt;
&lt;h1 id=&quot;summary-and-statistics&quot;&gt;Summary and statistics&lt;/h1&gt;
&lt;p&gt;I&amp;#39;ve said it before, but I&amp;#39;ll say it again: I should have just used Electron from the beginning. It&amp;#39;s inefficient, but it&amp;#39;s known to work fine on Steam, across platforms (cf. Vampire Survivors). If I had just used Electron originally, porting to Linux would have been trivial. Fortunately, porting to Electron and then Linux wasn&amp;#39;t too onerous.&lt;/p&gt;
&lt;p&gt;This Linux port also resolved &lt;a href=&quot;https://log.schemescape.com/posts/game-development/sic-1-retrospective.html#should-i-port-the-steam-version-of-the-game-to-linux&quot;&gt;one of my open questions&lt;/a&gt; around what to do with SIC-1. And, of course, now people on a free OS can play my game, &lt;em&gt;with friend leaderboards&lt;/em&gt;. I think the peak number of concurrent Linux players was roughly 3, which is pretty high for a game that only ever peaked at 10 concurrent players on Windows.&lt;/p&gt;
&lt;h1 id=&quot;up-next&quot;&gt;Up next...&lt;/h1&gt;
&lt;p&gt;That&amp;#39;s all for the Linux port! Next, I&amp;#39;m planning to provide an update on how SIC-1&amp;#39;s release has been going. Spoiler: it finally met my own internal bar for success!&lt;/p&gt;
</content>
</entry>
</feed>
