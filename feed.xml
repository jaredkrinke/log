<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Schemescape</title>
<id>https://log.schemescape.com/</id>
<link rel="self" href="https://log.schemescape.com/feed.xml"/>
<link rel="alternate" href="https://log.schemescape.com/"/>
<author>
<name>Schemescape</name>
</author>
<updated>2024-05-01T04:19:25.679Z</updated>

<entry>
<title>Solving Project Euler with a picture, using Piet</title>
<id>https://log.schemescape.com/posts/programming-languages/piet-for-project-euler.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/programming-languages/piet-for-project-euler.html"/>
<updated>2024-04-30T00:00:00.000Z</updated>
<summary type="text">Using a graphical 2D esoteric programming language to do math was SpaceChem-hard.</summary>
<content type="html">&lt;p&gt;I set an ill-advised goal as part of my &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/100-languages.html&quot;&gt;plan to write code in 100 programming languages&lt;/a&gt; (an ill-advised goal in itself):&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Use &lt;a href=&quot;https://www.dangermouse.net/esoteric/piet.html&quot;&gt;Piet&lt;/a&gt; to solve a nontrivial problem from &lt;a href=&quot;https://projecteuler.net/&quot;&gt;Project Euler&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;(Piet is an esoteric programming language that uses images as code, with pixel count/hue/shade corresponding to instructions for a stack-based virtual machine.)&lt;/p&gt;
&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;
&lt;p&gt;I &lt;em&gt;did&lt;/em&gt; manage to solve &lt;a href=&quot;https://projecteuler.net/problem=34&quot;&gt;problem 34&lt;/a&gt; using Piet, but it required careful planning and some tedious &lt;del&gt;rewrites&lt;/del&gt; repaints.&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s the solution, enlarged to show texture:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://log.schemescape.com/posts/programming-languages/../../assets/p34-scaled.png&quot; alt=&quot;Scaled-up solution&quot;/&gt;&lt;/p&gt;
&lt;h1 id=&quot;approach&quot;&gt;Approach&lt;/h1&gt;
&lt;p&gt;Problem 34 requires adding up all numbers where the sum of their digits&amp;#39; factorials equals the number itself. I specifically chose this problem because &lt;strong&gt;it is fairly simple and doesn&amp;#39;t require any special input, but is not &lt;em&gt;so&lt;/em&gt; simple that solving it would be trivial&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Given that Piet&amp;#39;s instructions are all context-dependent (the color of an instruction depends on the color of the previous block) and it uses a stack for all arithmetic/input/output/manipulation, I made a plan to tackle the &amp;quot;stack&amp;quot; part first (prior to painting anything):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Solve the problem in Forth (a stack-based language)&lt;/li&gt;
&lt;li&gt;Re-solve the problem in Forth using only Piet&amp;#39;s instructions (except for branching, which is done graphically)&lt;/li&gt;
&lt;li&gt;Translate the Forth-based solution into Piet&lt;/li&gt;
&lt;li&gt;Add some colored rectangles (because: art)&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;implementation&quot;&gt;Implementation&lt;/h1&gt;
&lt;h2 id=&quot;forth-solution&quot;&gt;Forth solution&lt;/h2&gt;
&lt;p&gt;After a bit of stack-wrangling, I came up with this solution in Forth (which doesn&amp;#39;t use any variables):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-forth&quot;&gt;( Project Euler problem &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; Forth )

: &lt;span class=&quot;hljs-type&quot;&gt;log&lt;/span&gt; dup . ;

: &lt;span class=&quot;hljs-type&quot;&gt;factorial&lt;/span&gt; ( n &lt;span class=&quot;hljs-comment&quot;&gt;-- n! )&lt;/span&gt;
    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; swap &lt;span class=&quot;hljs-keyword&quot;&gt;begin&lt;/span&gt; dup &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; dup rot * swap &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; - repeat drop ;

: &lt;span class=&quot;hljs-type&quot;&gt;div&lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;mod&lt;/span&gt; ( x y &lt;span class=&quot;hljs-comment&quot;&gt;-- q r )&lt;/span&gt;
    over over / rot rot &lt;span class=&quot;hljs-keyword&quot;&gt;mod&lt;/span&gt; ;

: &lt;span class=&quot;hljs-type&quot;&gt;sum&lt;/span&gt;-digit-factorials ( n &lt;span class=&quot;hljs-comment&quot;&gt;-- sum)&lt;/span&gt;
    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; swap &lt;span class=&quot;hljs-keyword&quot;&gt;begin&lt;/span&gt; dup &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; div-&lt;span class=&quot;hljs-keyword&quot;&gt;mod&lt;/span&gt; factorial rot + swap repeat drop ;

: &lt;span class=&quot;hljs-type&quot;&gt;main&lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;loop&lt;/span&gt; ( sum counter &lt;span class=&quot;hljs-comment&quot;&gt;-- sum counter )&lt;/span&gt;
    dup dup sum-digit-factorials = &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; dup rot + log swap &lt;span class=&quot;hljs-keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + ;

: &lt;span class=&quot;hljs-type&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;999999&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; main-&lt;span class=&quot;hljs-keyword&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;loop&lt;/span&gt; ;

main
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;piet-flavored-forth&quot;&gt;Piet-flavored Forth&lt;/h2&gt;
&lt;p&gt;Next, I modified the Forth code to use Piet&amp;#39;s primitives (except for branches, which are mostly implemented graphically). This was done in a few steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Avoid directly using large numbers (since directly pushing N requires painting N pixels)&lt;/li&gt;
&lt;li&gt;Replace &lt;code&gt;do&lt;/code&gt; with a &lt;code&gt;while&lt;/code&gt; loop&lt;/li&gt;
&lt;li&gt;Implement Forth words in Piet, as &amp;quot;macros&amp;quot; (which I will later manually expand when painting the actual Piet image)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Result:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-forth&quot;&gt;( Project Euler problem &lt;span class=&quot;hljs-number&quot;&gt;34&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; Forth, but using Piet primitives )

( Piet macros )
( : &lt;span class=&quot;hljs-type&quot;&gt;swap&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; roll ; )
( : &lt;span class=&quot;hljs-type&quot;&gt;rot&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; roll ; )
( : &lt;span class=&quot;hljs-type&quot;&gt;rot2&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; roll ; )
( : &lt;span class=&quot;hljs-type&quot;&gt;over2&lt;/span&gt; dup &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; roll dup &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; roll &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; roll ; )
( : = - &lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;not&lt;/span&gt;&lt;/span&gt; ; )

( Implementation using Piet primitives (except &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; loops, which are graphical &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; Piet) )

: &lt;span class=&quot;hljs-type&quot;&gt;rot2&lt;/span&gt; rot rot ;
: &lt;span class=&quot;hljs-type&quot;&gt;over2&lt;/span&gt; over over ;

: &lt;span class=&quot;hljs-type&quot;&gt;factorial&lt;/span&gt; ( n &lt;span class=&quot;hljs-comment&quot;&gt;-- n! )&lt;/span&gt;
    &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; swap &lt;span class=&quot;hljs-keyword&quot;&gt;begin&lt;/span&gt; dup &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; dup rot * swap &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; - repeat drop ;

: &lt;span class=&quot;hljs-type&quot;&gt;div&lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;mod&lt;/span&gt; ( x y &lt;span class=&quot;hljs-comment&quot;&gt;-- q r )&lt;/span&gt;
    over2 / rot2 &lt;span class=&quot;hljs-keyword&quot;&gt;mod&lt;/span&gt; ;

: &lt;span class=&quot;hljs-type&quot;&gt;sum&lt;/span&gt;-digit-factorials ( n &lt;span class=&quot;hljs-comment&quot;&gt;-- sum)&lt;/span&gt;
    &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; swap &lt;span class=&quot;hljs-keyword&quot;&gt;begin&lt;/span&gt; dup &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; div-&lt;span class=&quot;hljs-keyword&quot;&gt;mod&lt;/span&gt; factorial rot + swap repeat drop ;

: &lt;span class=&quot;hljs-type&quot;&gt;main&lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;loop&lt;/span&gt; ( sum counter &lt;span class=&quot;hljs-comment&quot;&gt;-- sum counter )&lt;/span&gt;
    dup dup sum-digit-factorials = &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; dup rot + swap &lt;span class=&quot;hljs-keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + ;

: &lt;span class=&quot;hljs-type&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;begin&lt;/span&gt; dup &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt; * * * * - &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; main-&lt;span class=&quot;hljs-keyword&quot;&gt;loop&lt;/span&gt; repeat drop . ;

main
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;using-piet-for-real&quot;&gt;Using Piet, for real&lt;/h2&gt;
&lt;p&gt;For authoring the image, I used &lt;a href=&quot;https://piet.bubbler.one/&quot;&gt;this browser-based Piet editor (and interpreter)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Translating into Piet was excruciatingly tedious because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Opcodes are based on the relative hue/lightness of the previous color block, so &lt;strong&gt;correcting a mistake usually entails rewriting the entire rest of the chunk&lt;/strong&gt; (unless you separate everything with ugly white blocks)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;There is no way to add comments to your code&lt;/strong&gt; (other than maybe screenshotting a scaled up image and writing on it)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Branches are represented graphically&lt;/strong&gt; and you have to ensure there is space for e.g. return lines (all using Zoolander-style clockwise-only turns)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Luckily, I only had to correct a handful of mistakes.&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s what my solution looked like (with points of interest marked):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://log.schemescape.com/posts/programming-languages/../../assets/p34-notes.png&quot; alt=&quot;Annotated solution&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Explanation:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Start (&lt;code&gt;main&lt;/code&gt; in the Forth code above)&lt;/li&gt;
&lt;li&gt;Test for &amp;quot;checked enough numbers to be done&amp;quot; (the program ends near the upper-right; otherwise, run &lt;code&gt;main-loop&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Check for any digits left in the current number (the loop in &lt;code&gt;sum-digit-factorials&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Compute quotient and remainder (i.e. extract a digit--still in &lt;code&gt;sum-digit-factorials&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Compute factorial of digit (&lt;code&gt;factorial&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Check if sum of digit factorials equals the number (the &lt;code&gt;if&lt;/code&gt; part of &lt;code&gt;main-loop&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Move on to the next number&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;N.B. I set the limit (#2) lower for the Piet version just to ensure the program ran in a reasonable amount of time. It still produces the correct answer, but I don&amp;#39;t have any mathematical analysis to justify lowering the limit from 7 digits down to 5.&lt;/p&gt;
&lt;h2 id=&quot;art&quot;&gt;Art&lt;/h2&gt;
&lt;p&gt;Given that Piet code is an image, the final step is to add prettily colored rectangles. Here is the final &lt;em&gt;unscaled&lt;/em&gt; solution (which you can theoretically run via a Piet interpreter):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://log.schemescape.com/posts/programming-languages/../../assets/p34.png&quot; alt=&quot;Final solution, actual size&quot;/&gt;&lt;/p&gt;
&lt;h1 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;/h1&gt;
&lt;p&gt;Overall, once I had a Forth-simple solution with a minimum of stack manipulation, translating it into Piet was straight-forward (although I shudder to think about graphically arranging a more complicated Piet program).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But the satisfaction of having written a real program in a 2D esoteric language like Piet is real.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;How often can you sit back and visually admire a program? Piet is a wonderfully unique entry in the world of esoteric programming languages!&lt;/p&gt;
&lt;h1 id=&quot;appendix&quot;&gt;Appendix&lt;/h1&gt;
&lt;p&gt;To my amazement, someone created a &lt;a href=&quot;https://www.toothycat.net/wiki/wiki.pl?MoonShadow/Piet&quot;&gt;Piet assembler&lt;/a&gt; that can translate from an assembly language into a Piet-compatible image. It&amp;#39;s an incredible achievement, but I wanted to write my Piet solution by hand.&lt;/p&gt;
</content>
</entry>
<entry>
<title>One third of the way to 100 programming languages</title>
<id>https://log.schemescape.com/posts/programming-languages/100-languages-7.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/programming-languages/100-languages-7.html"/>
<updated>2024-04-28T00:00:00.000Z</updated>
<summary type="text">Or: A tour of the syntax continuum.</summary>
<content type="html">&lt;p&gt;I&amp;#39;m &lt;em&gt;still&lt;/em&gt; trying to &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/100-languages.html&quot;&gt;write code in 100 different programming languages&lt;/a&gt;. My progress is being recorded in &lt;a href=&quot;https://github.com/jaredkrinke/100-languages&quot;&gt;this repository&lt;/a&gt;. I&amp;#39;m roughly one third of the way to 100 languages already!&lt;/p&gt;
&lt;p&gt;In this update, I explored stack-based languages and (unintentionally) &lt;strong&gt;traveled the programming language syntax continuum, from (almost) no syntax to (almost) &lt;em&gt;only&lt;/em&gt; syntax&lt;/strong&gt;.&lt;/p&gt;
&lt;h1 id=&quot;weeks-4-and-5&quot;&gt;Weeks 4 and 5&lt;/h1&gt;
&lt;p&gt;Given my previous struggles with Forth-like stack-based languages, I decided to focus on stack-based and/or concatenative languages.&lt;/p&gt;
&lt;h2 id=&quot;retroforth&quot;&gt;RetroForth&lt;/h2&gt;
&lt;p&gt;RetroForth bills itself as a &amp;quot;modern, pragmatic Forth&amp;quot;, and I agree with that description. It adds one-character &amp;quot;sigils&amp;quot; to distinguish numbers, strings, definitions, comments, etc. These sigils allegedly simplify the interpreter, and I think this one extra bit of syntax is helpful.&lt;/p&gt;
&lt;p&gt;Overall, I enjoyed Retro&amp;#39;s take on Forth, and I finally felt like I was making progress on creating simpler, more idiomatic Forth code.&lt;/p&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Got in infinite loops several times&lt;/li&gt;
&lt;li&gt;Fatal errors are just numbers and I don&amp;#39;t know where to look them up&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;uxntal&quot;&gt;Uxntal&lt;/h2&gt;
&lt;p&gt;Ever since reading about &lt;a href=&quot;https://100r.co/site/uxn.html&quot;&gt;uxn&lt;/a&gt;, I&amp;#39;d wanted to see what a simple VM that runs on an NES could look like. After digging in a bit more, I learned that uxn was inspired by Forth--that got my attention!&lt;/p&gt;
&lt;p&gt;After writing some code in uxn&amp;#39;s assembly language (tal), I&amp;#39;ll say that I mostly like uxn (the virtual machine), but... I don&amp;#39;t like writing tal (the assembly language). There&amp;#39;s a lot of syntax and aesthetic choices that irritate me.&lt;/p&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Numbers &lt;em&gt;must&lt;/em&gt; be written in lowercase hexadecimal (&lt;strong&gt;decimal is not even allowed!&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;Instructions can set a &amp;quot;keep&amp;quot; bit that causes inputs to remain on the stack&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The instruction set doesn&amp;#39;t include modulus/remainder&lt;/strong&gt; (why!?)&lt;/li&gt;
&lt;li&gt;Supports both global and local labels, which is convenient&lt;/li&gt;
&lt;li&gt;Instructions must be UPPERCASE (except for flags), but hexadecimal must be lowercase&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Names like &lt;code&gt;b1&lt;/code&gt; aren&amp;#39;t allowed&lt;/strong&gt; because they&amp;#39;re actually hexadecimal numbers...&lt;/li&gt;
&lt;li&gt;Mixing 8-bit and 16-bit values on the stack is tedious&lt;/li&gt;
&lt;li&gt;Must specify &lt;code&gt;&amp;amp;&lt;/code&gt; on relative references, but not &lt;code&gt;@&lt;/code&gt; on global references...&lt;/li&gt;
&lt;li&gt;Pro tip: don&amp;#39;t DUP relative addresses!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;apl&quot;&gt;APL&lt;/h2&gt;
&lt;p&gt;After playing with J and K (although I couldn&amp;#39;t actually find an official implementation of K5), it was time to play with their spiritual predecessor, APL.&lt;/p&gt;
&lt;p&gt;With J, I felt like I was re-learning Perl-compatible regular expressions, but with a much larger menu of ASCII sigils. APL is the same, &lt;strong&gt;except I can&amp;#39;t type (and don&amp;#39;t even know the names of) the sigils&lt;/strong&gt;. Overall, this was probably the most challenging syntax I&amp;#39;ve encountered outside of esoteric programming languages.&lt;/p&gt;
&lt;h2 id=&quot;factor&quot;&gt;Factor&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Factor is the niftiest concatenative language I&amp;#39;ve tried&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Intriguingly, it borrows heavily from Common Lisp (e.g. restarts, editor integration, multiple dispatch, image-based development). I&amp;#39;d even go as far to say that, in my limited experience, &lt;strong&gt;Factor feels like a concatenative expression of Common Lisp&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Common Lisp-like restarts!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://andreaferretti.github.io/factor-tutorial/&quot;&gt;This Factor tutorial&lt;/a&gt; is a great introduction--not just to Forth, but to concatenative languages in general&lt;/li&gt;
&lt;li&gt;Factor&amp;#39;s compiler validates documented stack effects&lt;/li&gt;
&lt;li&gt;Factor supports editor integration, e.g. &amp;quot;go to definition&amp;quot;&lt;/li&gt;
&lt;li&gt;Can save images, refresh files from disk, etc.&lt;/li&gt;
&lt;li&gt;Built-in help&lt;/li&gt;
&lt;li&gt;Support for local variables, using &lt;code&gt;::&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;rebol&quot;&gt;Rebol&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Rebol is a minimal, but impressively capable scripting language&lt;/strong&gt;. The entire language, including GUI support is well under 1 MB. How did I not run across Rebol when I was &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/minimal-dev-env-5.html&quot;&gt;looking for a minimal development environment&lt;/a&gt;!? I only scratched the surface of Rebol, but it felt like exactly what I was looking for.&lt;/p&gt;
&lt;p&gt;Having said that, I&amp;#39;m uncertain about the future of Rebol--it doesn&amp;#39;t even appear to fully support 64-bit architectures.&lt;/p&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Entire language is 440 KB!&lt;/li&gt;
&lt;li&gt;Used the console version&lt;/li&gt;
&lt;li&gt;Variables in functions don&amp;#39;t default to locals!?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;bash&quot;&gt;Bash&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ve successfully been avoiding writing Bash recently, but I thought it might be fun to see what math looks like in Bash.&lt;/p&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ugly syntax (double parentheses, double brackets)&lt;/li&gt;
&lt;li&gt;Little inconsistencies, e.g. &lt;code&gt;fi&lt;/code&gt; vs &lt;code&gt;done&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Lots of symbols to remember: &lt;code&gt;#&lt;/code&gt;, &lt;code&gt;@&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;But &lt;em&gt;very&lt;/em&gt; widely deployed!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;julia&quot;&gt;Julia&lt;/h2&gt;
&lt;p&gt;From my uninformed perspective, Julia looks like the language that academics should be using instead of Python. I probably shouldn&amp;#39;t have said that, but there it is.&lt;/p&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Excellent documentation!&lt;/li&gt;
&lt;li&gt;Base runtime includes a constant indicating the precision of floating points numbers!&lt;/li&gt;
&lt;li&gt;Has a REPL, but I didn&amp;#39;t use it&lt;/li&gt;
&lt;li&gt;Built-in rational type!&lt;/li&gt;
&lt;/ul&gt;
</content>
</entry>
<entry>
<title>Project Euler in your BIOS</title>
<id>https://log.schemescape.com/posts/programming-languages/100-languages-6.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/programming-languages/100-languages-6.html"/>
<updated>2024-04-11T00:00:00.000Z</updated>
<summary type="text">Or: 100 languages, week 4: return of the boot sector.</summary>
<content type="html">&lt;p&gt;I&amp;#39;m still trying to &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/100-languages.html&quot;&gt;write code in 100 different programming languages&lt;/a&gt;. See &lt;a href=&quot;https://github.com/jaredkrinke/100-languages&quot;&gt;this repository&lt;/a&gt; for a summary table and links to code.&lt;/p&gt;
&lt;p&gt;As always, &lt;strong&gt;none of this is groundbreaking&lt;/strong&gt;, but it &lt;em&gt;is&lt;/em&gt; fun to see my code running in places I hadn&amp;#39;t considered before, like (this time) during the PC boot sequence or &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/100-languages-5.html#postscript&quot;&gt;within a PostScript document&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;week-4&quot;&gt;Week 4&lt;/h1&gt;
&lt;p&gt;The calendar says this week isn&amp;#39;t over yet, but I doubt I&amp;#39;ll finish any more problems this week. Also, I&amp;#39;m compelled to share my first x86 assembly program.&lt;/p&gt;
&lt;p&gt;After &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/100-languages-2.html&quot;&gt;experiencing SectorLISP&lt;/a&gt; on day 2, I&amp;#39;ve been wanting to try my hand at developing for the (in)famous &lt;a href=&quot;https://en.wikipedia.org/wiki/Boot_sector#The_IBM_PC_and_compatible_computers&quot;&gt;PC boot sector&lt;/a&gt;. Thus, I decided to solve Project Euler problem 26 using &lt;strong&gt;16-bit (&amp;quot;real&amp;quot; mode) x86 assembly&lt;/strong&gt; (with the BIOS API for text output).&lt;/p&gt;
&lt;h2 id=&quot;x86-assembly&quot;&gt;x86 assembly&lt;/h2&gt;
&lt;h3 id=&quot;32-bit-user-mode&quot;&gt;32-bit, user mode&lt;/h3&gt;
&lt;p&gt;My first stop was to learn about x86 assembly, and I used &lt;a href=&quot;https://ratfactor.com/assembly-nights&quot;&gt;Assembly Nights on ratfactor.com&lt;/a&gt; to get started. By coincidence, like the Assembly Nights author, I was developing on an old netbook (&lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/minimal-dev-env-4.html#hello-netbook&quot;&gt;because minimalism&lt;/a&gt;). I used &lt;a href=&quot;https://nasm.us/&quot;&gt;NASM&lt;/a&gt; because it seemed popular, and I&amp;#39;m comfortable with &amp;quot;destination first&amp;quot; syntax.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I learned the bare minimum x86 assembly necessary to implement a solution&lt;/strong&gt; in 32-bit (&amp;quot;protected&amp;quot; mode)--just &lt;code&gt;mov&lt;/code&gt;, &lt;code&gt;push&lt;/code&gt;, &lt;code&gt;pop&lt;/code&gt;, &lt;code&gt;cmp&lt;/code&gt;, &lt;code&gt;call&lt;/code&gt;, &lt;code&gt;ret&lt;/code&gt;, arithmetic, and conditional/unconditional jumps (along with Linux system calls for writing strings and terminating the process).&lt;/p&gt;
&lt;h3 id=&quot;16-bit-bare-metal--bios&quot;&gt;16-bit, &amp;quot;bare metal&amp;quot; (+ BIOS)&lt;/h3&gt;
&lt;p&gt;After that, it was just a simple* matter of porting the 32-bit code to 16-bit mode (removing &lt;code&gt;e&lt;/code&gt; from register names and halving the word size). And then I got to experience &lt;strong&gt;the joy of learning about the PC BIOS&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The web is actually littered with examples of &amp;quot;bare metal&amp;quot; x86 programming (aside: does it count as &amp;quot;bare metal&amp;quot; if you&amp;#39;re using the BIOS API?). Annoyingly, &lt;strong&gt;most of the examples I found didn&amp;#39;t actually work&lt;/strong&gt; for reasons I&amp;#39;ll probably never understand. There are also many proclamations of required initialization rituals that I didn&amp;#39;t (and still don&amp;#39;t) understand. Some examples worked in &lt;a href=&quot;https://www.qemu.org/&quot;&gt;QEMU&lt;/a&gt; but not in Hyper-V or &lt;a href=&quot;https://justine.lol/blinkenlights/&quot;&gt;Blinkenlights&lt;/a&gt;. Others inverted that sentence. And then there&amp;#39;s real hardware, which is much more fickle.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Here&amp;#39;s what actually worked for me&lt;/strong&gt;  (about which I&amp;#39;m 100% &lt;em&gt;not&lt;/em&gt; confident):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Do not&lt;/em&gt; start with &lt;code&gt;cli&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Do&lt;/em&gt; initialize &lt;code&gt;ds&lt;/code&gt; and &lt;code&gt;ss&lt;/code&gt; segment registers&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Do&lt;/em&gt; initialize  the stack pointer (&lt;code&gt;sp&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&amp;#39;s the code I used (in this case, I chose to have the stack grow down from where boot sector code must start):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-nasm&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;ax&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;ds&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;ax&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;ss&lt;/span&gt;, &lt;span class=&quot;hljs-built_in&quot;&gt;ax&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;sp&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0x7c00&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then you can set &lt;code&gt;al&lt;/code&gt; to a character, &lt;code&gt;ah&lt;/code&gt; to &lt;code&gt;0xe&lt;/code&gt;, and execute &lt;code&gt;int 0x10&lt;/code&gt; to output the character (and be moderately confident that it will actually appear).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The above worked for me on real hardware, QEMU, Blinkenlights, and v86.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;*I will admit that the &amp;quot;simple&amp;quot; port to 16-bit actually took me a while because I forgot to update a line that implicitly depended on word size (&lt;code&gt;add si, 4&lt;/code&gt; &amp;rarr; &lt;code&gt;add si, 2&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Regardless, &lt;a href=&quot;https://github.com/jaredkrinke/100-languages/blob/main/src/p26.asm&quot;&gt;here&amp;#39;s the final code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can run the code in your browser using &lt;a href=&quot;https://copy.sh/v86/&quot;&gt;v86&lt;/a&gt; by &lt;a href=&quot;https://copy.sh/v86/?profile=custom&amp;amp;fda.url=data:file/octet-stream;base64,uAAAjtiO0LwAfLsAALoAAL4AAIPDAYH76AN0EYnZ6FUAOfB/AuvsicaJ2uvmidDoDQDplQBQg8AwtA7NEFjDUlFTUFa7CgC+AAC6AAD3+1KDxgGD+AB18oP+AHQJWOjU/4PuAevytA6wDc0QsArNEF5YW1law1dWUlFTUL8AALsKALgKADnIfQUPr8Pr97oAAPf5g/oAdB2J0IPHAVC6AACJ5oPGAoPCATn6dNg7BHXyidDrA7gAAIP/AHQGW4PvAev1W1tZWl5fw/Q=&quot;&gt;clicking this link&lt;/a&gt;. Even better, &lt;a href=&quot;https://github.com/jaredkrinke/100-languages/blob/main/src/p26.img&quot;&gt;download the assembled boot sector&lt;/a&gt;, copy the boot sector onto a USB stick (or floppy drive), and try it on real hardware!&lt;/p&gt;
&lt;h3 id=&quot;notes&quot;&gt;Notes&lt;/h3&gt;
&lt;p&gt;I&amp;#39;ll end with some notes I made while writing x86 assembly&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;I had to use &lt;em&gt;every&lt;/em&gt; register&lt;/strong&gt; available to me (not counting &lt;code&gt;bp&lt;/code&gt;, which I think I could have technically gotten away with using)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I wish I&amp;#39;d done this sooner&lt;/strong&gt;--knowing even just a tiny bit of assembly would have been helpful on numerous occasions&lt;/li&gt;
&lt;li&gt;Having registers at my disposal &lt;em&gt;almost&lt;/em&gt; made assembly easier to write than Forth (of course, this is more a reflection of my discomfort with stack-based languages--to say nothing of the interactive development benefits a Forth can provide)&lt;/li&gt;
&lt;/ul&gt;
</content>
</entry>
<entry>
<title>One quarter of the way to 100 programming languages</title>
<id>https://log.schemescape.com/posts/programming-languages/100-languages-5.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/programming-languages/100-languages-5.html"/>
<updated>2024-04-08T00:00:00.000Z</updated>
<summary type="text">Or: PostScript is a programming language!?</summary>
<content type="html">&lt;p&gt;I&amp;#39;m &lt;strong&gt;25% of the way&lt;/strong&gt; to &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/100-languages.html&quot;&gt;having written code in 100 different programming languages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&quot;https://github.com/jaredkrinke/100-languages&quot;&gt;this repository&lt;/a&gt; for proof.&lt;/p&gt;
&lt;h1 id=&quot;week-3-plus-a-day&quot;&gt;Week 3 (plus a day)&lt;/h1&gt;
&lt;p&gt;As planned, I slowed down from &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/100-languages-4.html&quot;&gt;last week&lt;/a&gt;, but I still managed to make it to the 25% mark. That&amp;#39;s 25 languages down, and 75 to go! Now that I&amp;#39;m no longer rushing, I&amp;#39;m enjoying the process of playing with new languages more.&lt;/p&gt;
&lt;p&gt;All languages were new to me for this week. Notably, &lt;strong&gt;I didn&amp;#39;t even realize that &lt;a href=&quot;https://en.wikipedia.org/wiki/PostScript&quot;&gt;PostScript&lt;/a&gt; was a programming language at all&lt;/strong&gt;! Turns out it&amp;#39;s a &lt;a href=&quot;https://en.wikipedia.org/wiki/Forth_(programming_language)&quot;&gt;Forth&lt;/a&gt;-like (stack-based) procedural language. I still feel like I&amp;#39;m struggling with stack-based languages, but it might just be a matter of perspective--compared to straight assembly, Forths are a joy to use!&lt;/p&gt;
&lt;p&gt;The rest of this post contains notes on the languages I used.&lt;/p&gt;
&lt;h2 id=&quot;bbc-basic&quot;&gt;BBC BASIC&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;I&amp;#39;ve never seen or used a &lt;a href=&quot;https://en.wikipedia.org/wiki/BBC_Micro&quot;&gt;BBC Micro&lt;/a&gt;&lt;/strong&gt; (the closest I&amp;#39;ve used is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Commodore_64&quot;&gt;Commodore 64&lt;/a&gt;), but it&amp;#39;s famous enough that I wanted to give one an (&lt;a href=&quot;https://bbcmic.ro/&quot;&gt;emulated&lt;/a&gt;) spin.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;BBC BASIC puts Commodore BASIC to shame&lt;/strong&gt; with features like named procedures (finally, no more line numbers!)&lt;/li&gt;
&lt;li&gt;With respect to solving Project Euler problems, integer arithmetic and division with remainders are welcome additions&lt;/li&gt;
&lt;li&gt;Despite its age, &lt;a href=&quot;https://www.bbcbasic.co.uk/bbcwin/tutorial/index.html&quot;&gt;excellent documentation&lt;/a&gt; is still available&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;unison&quot;&gt;Unison&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.unison-lang.org/&quot;&gt;Unison&lt;/a&gt; stores and references code in a content-addressed syntax tree format&lt;/strong&gt;, allowing for things like accurate incremental builds. It appears to be designed for distributed systems, so I&amp;#39;m not in the target audience, but it sounded interesting enough that I&amp;#39;ve always wanted to try it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Having the codebase manager cache and update code automatically is convenient&lt;/li&gt;
&lt;li&gt;&amp;quot;Watches&amp;quot; and tests allow for &lt;strong&gt;immediate feedback when code is updated&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;The codebase manager also supports &lt;strong&gt;searching for and displaying documentation&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;I struggled a bit with syntax, especially significant whitespace (note to self: only use tab width of 8 for Unison--or just don&amp;#39;t use tabs at all)&lt;/li&gt;
&lt;li&gt;The docs indicate that &lt;strong&gt;the codebase format is append-only&lt;/strong&gt; -- what happens if you &lt;em&gt;really&lt;/em&gt; need to expunge all traces of some code? Is there &lt;em&gt;code&lt;/em&gt; garbage collection?&lt;/li&gt;
&lt;li&gt;Integrated tooling like the codebase manager and code versioning sounds interesting, although I&amp;#39;m mostly allergic to additional tooling&lt;/li&gt;
&lt;li&gt;Unison feels innovative, for sure!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;lil&quot;&gt;Lil&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://beyondloom.com/decker/lil.html&quot;&gt;Lil&lt;/a&gt; is a bespoke scripting language for &lt;a href=&quot;https://beyondloom.com/decker/&quot;&gt;Decker&lt;/a&gt; (a Mac Classic-esque multimedia tool). Despite being a single header of around 1300 lines of (dense) C code, Lil packs an impressive array of features: &lt;strong&gt;immutable data structures, vector programming, and a built-in query language&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Elements in lists (surrounded by parentheses) are separated by commas, but function arguments (surrounded by &lt;em&gt;brackets&lt;/em&gt;) are &lt;em&gt;not&lt;/em&gt; (I know it&amp;#39;s subjective, but I found this to be fairly annoying)&lt;/li&gt;
&lt;li&gt;Some operators (e.g. modulus) have their order reversed&lt;/li&gt;
&lt;li&gt;&lt;code&gt;where&lt;/code&gt; clauses in the query language are actually column (list) expressions&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Performance was a challenge for me&lt;/strong&gt; due to the lack of mutable data structures--I ended up having to repurpose a string because the language doesn&amp;#39;t &lt;em&gt;natively&lt;/em&gt; provide a mutable array (though the host app can--and in the case of Lilt, does--provide mutable data types)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;postscript&quot;&gt;PostScript&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;PostScript isn&amp;#39;t just a document format, it&amp;#39;s a programming language!&lt;/strong&gt; Who knew? Open &lt;a href=&quot;https://github.com/jaredkrinke/100-languages/blob/main/src/p24.ps&quot;&gt;my solution&lt;/a&gt; in a document viewer and see for yourself! (Just tried it in GIMP and it works!)&lt;/p&gt;
&lt;p&gt;I can&amp;#39;t imagine such a security minefield of a format being created today. It&amp;#39;s basically a quilt made out of red flags. PDF has had enough exploits and it&amp;#39;s (supposedly) declarative! &lt;strong&gt;I will probably never open a PostScript file from the web again&lt;/strong&gt; (though I promise I&amp;#39;m too inept at stack-based languages to have created a virus).&lt;/p&gt;
&lt;p&gt;Regardless, here are my notes about the language:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I had a lot of trouble managing the stack again, but at least you can duplicate a value at any depth in the stack in one command&lt;/li&gt;
&lt;li&gt;Having branches appear before knowing what kind of conditional they&amp;#39;re for hard for me to read&lt;/li&gt;
&lt;li&gt;Fortunately, being an old standard means that there is excellent documentation: &lt;a href=&quot;https://www.adobe.com/jp/print/postscript/pdfs/PLRM.pdf&quot;&gt;PostScript Language Reference Manual&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;fe&quot;&gt;fe&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rxi/fe&quot;&gt;fe&lt;/a&gt; is a &lt;strong&gt;minimal Lisp that uses a fixed block of memory (no dynamic allocations)&lt;/strong&gt;. It is not to be confused with &lt;a href=&quot;https://fe-lang.org/&quot;&gt;Fe&lt;/a&gt;, whose web site mentions smart contracts.&lt;/p&gt;
&lt;p&gt;Given that fe is less than 900 lines of readable C, it&amp;#39;s an impressively ergonomic language.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The stand-alone interpreter defaults to 64,000 bytes of memory (in addition to the C stack, obviously)&lt;/li&gt;
&lt;li&gt;On 64-bit architectures, cons cells are each 16 bytes, so only 4,000 cons cells max&lt;/li&gt;
&lt;li&gt;Numbers (single-precision floats) are &lt;em&gt;also&lt;/em&gt; stored as objects, which unfortunately means &lt;strong&gt;each 4-byte number takes up 16 bytes&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Macros work, but are missing a few key pieces (gensym, quasiquote, &amp;quot;rest&amp;quot; arguments)&lt;/li&gt;
&lt;/ul&gt;
</content>
</entry>
<entry>
<title>11 programming languages in one week</title>
<id>https://log.schemescape.com/posts/programming-languages/100-languages-4.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/programming-languages/100-languages-4.html"/>
<updated>2024-03-31T00:00:00.000Z</updated>
<summary type="text">I spent entirely too much time playing with (mostly) new programming languages this week.</summary>
<content type="html">&lt;p&gt;I&amp;#39;m &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/100-languages.html&quot;&gt;trying to write code in 100 different programming languages&lt;/a&gt;. I just finished week 2, and--somehow--I&amp;#39;m ahead of schedule.&lt;/p&gt;
&lt;p&gt;The full list of languages and links to code are in my &lt;a href=&quot;https://github.com/jaredkrinke/100-languages&quot;&gt;100-languages&lt;/a&gt; repository.&lt;/p&gt;
&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;
&lt;p&gt;After two weeks of &amp;quot;staying on (or ahead of) schedule&amp;quot;, I strongly suspect I will &lt;em&gt;not&lt;/em&gt; be continuing at this current pace of writing code in at least one new language per day. It&amp;#39;s fun and oddly addictive, but also fairly time-consuming. &lt;strong&gt;If I don&amp;#39;t slow down, I&amp;#39;ll probably get burned out and abandon the project&lt;/strong&gt; (or need to become a hermit), so I&amp;#39;ll likely slow &lt;em&gt;way&lt;/em&gt; down for the next week.&lt;/p&gt;
&lt;h1 id=&quot;languages&quot;&gt;Languages&lt;/h1&gt;
&lt;p&gt;Here are the &lt;strong&gt;languages that were new to me&lt;/strong&gt; at the beginning of the week that I managed to write code in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/COBOL#COBOL-85&quot;&gt;COBOL-85&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/WGSL/&quot;&gt;WebGPU Shading Language&lt;/a&gt; (which I&amp;#39;m still surprised to learn is &amp;quot;WebGPU &lt;em&gt;Shading&lt;/em&gt; Language&amp;quot; and not &amp;quot;WebGPU &lt;em&gt;Shader&lt;/em&gt; Language&amp;quot;, in its official spec)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://webassembly.github.io/spec/core/text/index.html&quot;&gt;WebAssembly Text Format&lt;/a&gt; (I had &lt;em&gt;seen&lt;/em&gt; this before, but never &lt;em&gt;written&lt;/em&gt; it)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://scratch.mit.edu/&quot;&gt;Scratch&lt;/a&gt; (block-based)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Commodore_BASIC&quot;&gt;Commodore Basic 2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://xod.io/&quot;&gt;XOD&lt;/a&gt; (flow-based)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And here are the &lt;strong&gt;languages I&amp;#39;d used before&lt;/strong&gt; (mostly only used a little bit or a long time ago):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/xslt-10/&quot;&gt;XSLT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.perl.org/&quot;&gt;Perl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/AWK&quot;&gt;AWK&lt;/a&gt; (not 100% sure if I&amp;#39;ve actually used this before, but it seems likely)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Verilog&quot;&gt;Verilog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zachtronics.com/exapunks/&quot;&gt;EXA&lt;/a&gt; (from a game by &lt;a href=&quot;https://www.zachtronics.com/&quot;&gt;Zachtronics&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The rest of this post is just a collection of my notes from trying out these languages.&lt;/p&gt;
&lt;h2 id=&quot;xslt-extensible-stylesheet-language-transformations&quot;&gt;XSLT (Extensible Stylesheet Language Transformations)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I&amp;#39;ve probably written more XSLT than the vast majority of people, because I naively thought that HTML would be permanently recast into XML and XSLT would become the standard template language (that... didn&amp;#39;t happen)&lt;/li&gt;
&lt;li&gt;Browsers still support XSLT, apparently!&lt;/li&gt;
&lt;li&gt;XPath is my favorite query language that many (most?) people don&amp;#39;t seem to know about&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;cobol&quot;&gt;COBOL&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;First time using a column-oriented language!&lt;/li&gt;
&lt;li&gt;It&amp;#39;s not clear to me when periods (&lt;code&gt;.&lt;/code&gt;) are required and when they break things&lt;/li&gt;
&lt;li&gt;GNU COBOL errors don&amp;#39;t have enough information for me to understand them&lt;/li&gt;
&lt;li&gt;My solution takes forever to run in COBOL, as compared to JavaScript--not sure why&lt;/li&gt;
&lt;li&gt;Forgetting an &lt;code&gt;END-IF&lt;/code&gt; just completely changed the meaning of my program, but didn&amp;#39;t produce and errors or warnings&lt;/li&gt;
&lt;li&gt;So, so verbose&lt;/li&gt;
&lt;li&gt;Lots of reserved words&lt;/li&gt;
&lt;li&gt;I dislike the combination of natural language syntax (&lt;code&gt;ADD 1 TO N.&lt;/code&gt;) and things like &lt;code&gt;77 TOTAL PIC S9(15) COMP VALUE ZERO.&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;perl&quot;&gt;Perl&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Kept getting tripped up by scalar vs. array contexts (even with prior experience)&lt;/li&gt;
&lt;li&gt;I don&amp;#39;t recall the details, but there was a case where I ended up needing parentheses when I thought brackets would be correct&lt;/li&gt;
&lt;li&gt;&amp;quot;Here docs&amp;quot; are great!&lt;/li&gt;
&lt;li&gt;I dislike the anonymous function syntax, but I&amp;#39;m glad anonymous functions are supported&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;webgpu-shading-language&quot;&gt;WebGPU Shading Language&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Crashed my GPU several times while running code&lt;/li&gt;
&lt;li&gt;Lots of JavaScript required to setup computation and read back results&lt;/li&gt;
&lt;li&gt;The problem I attempted wasn&amp;#39;t a good fit for parallel computation&lt;/li&gt;
&lt;li&gt;A different parallel-friendly problem I attempted required 64-bit arithmetic which apparently isn&amp;#39;t supported in WGSL&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;awk&quot;&gt;AWK&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Order of &lt;code&gt;for ... in&lt;/code&gt; loop is unspecified&lt;/li&gt;
&lt;li&gt;Arrays of arrays are not officially supported&lt;/li&gt;
&lt;li&gt;Relies on mutation in &lt;code&gt;gsub()&lt;/code&gt; -- I think I&amp;#39;d prefer a functional version of AWK&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;webassembly-text-format&quot;&gt;WebAssembly (Text Format)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Interesting syntax: it uses s-expressions, but you can also just write lines of assembly too&lt;/li&gt;
&lt;li&gt;I would have preferred labels instead of &lt;code&gt;BLOCK&lt;/code&gt; and &lt;code&gt;LOOP&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Resulting binary was tiny! Just 163 bytes!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;scratch&quot;&gt;Scratch&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I would have enjoyed this as a kid&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;commodore-basic&quot;&gt;Commodore BASIC&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;All arithmetic is apparently floating point -- is it done in software? Because it&amp;#39;s surprisingly slow&lt;/li&gt;
&lt;li&gt;Line numbers are annoying to deal with, but in the proper historical context they make sense because you entered one line at a time -- today, we&amp;#39;re spoiled with text editors&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;verilog&quot;&gt;Verilog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href=&quot;https://8bitworkshop.com/v3.11.0/?platform=verilog&amp;amp;file=clock_divider.v&quot;&gt;8bitworkshop Verilog IDE&lt;/a&gt; is amazing&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;xod&quot;&gt;XOD&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Laying out all the components using my mouse was painfully tedious, but it resulted in &lt;a href=&quot;https://github.com/jaredkrinke/100-languages/blob/main/src/p18.png&quot;&gt;a nice diagram that makes it clear how the solution works&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;exa&quot;&gt;EXA&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.zachtronics.com/exapunks/&quot;&gt;Exapunks&lt;/a&gt; is a great game&lt;/li&gt;
&lt;li&gt;You can use the T register for temporary storage&lt;/li&gt;
&lt;li&gt;You can use files for even more storage&lt;/li&gt;
&lt;li&gt;I still haven&amp;#39;t found a great way to route messages between EXAs, other than only having 2 EXAs in a room&lt;/li&gt;
&lt;li&gt;I made a &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/../game-development/tec-redshift-dumper.html&quot;&gt;tool for dumping TEC Redshift discs into a text format&lt;/a&gt; (wait, that was in JavaScript--I used 12 languages this week!)&lt;/li&gt;
&lt;/ul&gt;
</content>
</entry>
</feed>
