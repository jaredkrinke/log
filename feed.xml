<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Schemescape</title>
<id>https://log.schemescape.com/</id>
<link rel="self" href="https://log.schemescape.com/feed.xml"/>
<link rel="alternate" href="https://log.schemescape.com/"/>
<author>
<name>Schemescape</name>
</author>
<updated>2024-03-31T04:02:34.990Z</updated>

<entry>
<title>TEC Redshift disc-dumping tool</title>
<id>https://log.schemescape.com/posts/game-development/tec-redshift-dumper.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/game-development/tec-redshift-dumper.html"/>
<updated>2024-03-30T00:00:00.000Z</updated>
<summary type="text">I couldn&apos;t find a tool to dump TEC Redshift discs from Exapunks, so I made one.</summary>
<content type="html">&lt;p&gt;Leveraging &lt;a href=&quot;https://rami-sabbagh.com/TEC-Redshift-Disk-Specification/&quot;&gt;someone else&amp;#39;s reverse-engineering work&lt;/a&gt;, I made a &lt;a href=&quot;https://jaredkrinke.github.io/tec-redshift-dumper/&quot;&gt;browser-based tool for dumping TEC Redshift discs into EXA code and JSON formats&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I don&amp;#39;t know if anyone else will ever want such a tool, but one now exists, regardless.&lt;/p&gt;
&lt;h1 id=&quot;background&quot;&gt;Background&lt;/h1&gt;
&lt;p&gt;For analytical minds, there&amp;#39;s an irresistible genre of games called &amp;quot;zachlikes&amp;quot; (I even &lt;a href=&quot;https://log.schemescape.com/posts/game-development/sic-1.html&quot;&gt;made one&lt;/a&gt;). The best zachlikes come directly from &lt;a href=&quot;https://www.zachtronics.com/index.html&quot;&gt;Zachtronics&lt;/a&gt;, namely:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zachtronics.com/opus-magnum/&quot;&gt;Opus Magnum&lt;/a&gt;, the appropriately-named &lt;strong&gt;best zachlike ever made&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zachtronics.com/exapunks&quot;&gt;Exapunks&lt;/a&gt;, the &lt;strong&gt;best &lt;em&gt;programming&lt;/em&gt; zachlike&lt;/strong&gt; (maybe tied with &lt;a href=&quot;https://www.zachtronics.com/tis-100&quot;&gt;TIS-100&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;What does this have to do with anything?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Exapunks is a programming zachlike, and I&amp;#39;m &lt;a href=&quot;https://log.schemescape.com/posts/game-development/../programming-languages/100-languages.html&quot;&gt;in dire need of more programming languages&lt;/a&gt;, so obviously I needed to solve a Project Euler problem in Exapunks. Ok, done. Then I wanted to share my code in a source code-like format and couldn&amp;#39;t find an appropriate tool, so I made one.&lt;/p&gt;
&lt;p&gt;That&amp;#39;s all. End of story.&lt;/p&gt;
</content>
</entry>
<entry>
<title>Wrapping up week 1 of the 100 languages challenge</title>
<id>https://log.schemescape.com/posts/programming-languages/100-languages-3.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/programming-languages/100-languages-3.html"/>
<updated>2024-03-23T00:00:00.000Z</updated>
<summary type="text">So far I&apos;m on schedule and have sampled each kind of programming language.</summary>
<content type="html">&lt;p&gt;I&amp;#39;m &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/100-languages.html&quot;&gt;trying to write code in 100 different programming languages&lt;/a&gt;. Today, I&amp;#39;m wrapping up week 1.&lt;/p&gt;
&lt;p&gt;The full list of languages and links to code are in my &lt;a href=&quot;https://github.com/jaredkrinke/100-languages&quot;&gt;100-languages&lt;/a&gt; repository.&lt;/p&gt;
&lt;h1 id=&quot;days-1---2&quot;&gt;Days 1 - 2&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;I got off to a pretty rocky start by starting with two languages that run in limited environments&lt;/strong&gt;: &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/100-languages-1.html&quot;&gt;SIC-1 Assembly Language&lt;/a&gt; (which runs on an 8-bit single-instruction CPU with 256 bytes addressable) and &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/100-languages-2.html&quot;&gt;SectorLISP&lt;/a&gt; (which has only lists--no integers!--and with a max of a few thousand linked list cells). Economizing solutions was fun, but time-consuming.&lt;/p&gt;
&lt;h1 id=&quot;days-3---7&quot;&gt;Days 3 - 7&lt;/h1&gt;
&lt;p&gt;I could have breezed through the first week by using procedural languages I already knew, &lt;strong&gt;but the whole point of this journey is to play with new programming languages with minimal investment&lt;/strong&gt;, so I set two goals for the rest of the week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use at least one language of each type (cf. &lt;a href=&quot;https://madhadron.com/programming/seven_ur_languages.html&quot;&gt;The Seven Programming Ur-Languages&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Explore new languages, or new ways of using languages, when possible&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are the languages I ended up using:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://fortran-lang.org/&quot;&gt;Fortran&lt;/a&gt; (procedural language)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jsoftware.com/#/&quot;&gt;J&lt;/a&gt; (array language)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gforth.org/&quot;&gt;Gforth&lt;/a&gt; (stack-based language)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_ML&quot;&gt;Standard ML&lt;/a&gt; (functional language)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://squeak.org/&quot;&gt;Squeak&lt;/a&gt;/Smalltalk (object-oriented language)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/SQL&quot;&gt;SQL&lt;/a&gt; (declarative language)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Technically, I think I&amp;#39;ve written Smalltalk and Standard ML code before, but it was a long time ago, and I definitely did not remember anything beyond high level concepts. SQL was the only language I was fluent in (but not for solving math problems!).&lt;/p&gt;
&lt;h1 id=&quot;doubts-about-this-challenge&quot;&gt;Doubts about this challenge&lt;/h1&gt;
&lt;p&gt;I&amp;#39;ve tried to make it clear that &lt;strong&gt;I&amp;#39;m not expecting to actually &lt;em&gt;learn&lt;/em&gt; or &lt;em&gt;become proficient in&lt;/em&gt; all of these languages&lt;/strong&gt;--I&amp;#39;m just sampling them and ensuring that I &lt;em&gt;apply&lt;/em&gt; what little I &lt;em&gt;do&lt;/em&gt; learn. Eventually, maybe I&amp;#39;ll dive into a few of the languages that intrigued me the most.&lt;/p&gt;
&lt;p&gt;Honestly, it&amp;#39;s been fun to dabble in languages I have no business writing code for. In that aspect, this challenge has been a resounding success.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;However&lt;/em&gt;, sometimes &lt;strong&gt;it feels like this is actually just a challenge to learn 100 different syntaxes&lt;/strong&gt;. In other words, &lt;strong&gt;I might be spending time on the &lt;em&gt;least interesting part&lt;/em&gt; of any programming language: syntax&lt;/strong&gt;. (Not to say syntax isn&amp;#39;t important, just that syntax is &lt;em&gt;almost&lt;/em&gt; never a reason to use or avoid a programming language. For the record, I said &amp;quot;almost never&amp;quot;.)&lt;/p&gt;
&lt;p&gt;It remains to be seen if syntax overload ends up sinking this adventure, but for now I&amp;#39;m planning to forge ahead.&lt;/p&gt;
&lt;h1 id=&quot;language-notes&quot;&gt;Language notes&lt;/h1&gt;
&lt;p&gt;I&amp;#39;ll end this update with some notes about the languages I used.&lt;/p&gt;
&lt;h2 id=&quot;fortran&quot;&gt;Fortran&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Fortran is verbose&lt;/strong&gt;. It tries to be precise, but there&amp;#39;s enough historical baggage and implicit behavior that it seems really easy to screw up. I don&amp;#39;t think this particular programming problem played to any of Fortran&amp;#39;s strengths, however, so my perspective is skewed--I was basically writing C in Fortran.&lt;/p&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Opted for Fortran 90, with extravagances like &amp;quot;free-form source input&amp;quot; (instead of fixed column input)&lt;/li&gt;
&lt;li&gt;Requires lots of redundant typing (function names and return types, variable definitions)&lt;/li&gt;
&lt;li&gt;Native logical/Boolean type!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://fortran-lang.org/learn/quickstart/gotchas/&quot;&gt;Plenty of gotchas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;j&quot;&gt;J&lt;/h2&gt;
&lt;p&gt;I was excited to try an array language, &lt;strong&gt;but &lt;em&gt;wow&lt;/em&gt; was I unprepared for the overwhelming cyclone of syntax&lt;/strong&gt;. Like regular expressions, I&amp;#39;m sure once you&amp;#39;re proficient with J it&amp;#39;s quick to whip up little programs. Also like regular expressions, J seems difficult to parse at a glance. &lt;strong&gt;Trying to wade through dozens of sigils as quickly as possible was probably the worst possible introduction to J&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Despite being in the wrong mindset, I &lt;em&gt;did&lt;/em&gt; enjoy programming in J, because it felt so novel. The closest I&amp;#39;ve used to an array language is probably &lt;a href=&quot;https://numpy.org/&quot;&gt;NumPy&lt;/a&gt;, but J is its own language, designed from the ground up.&lt;/p&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_5&lt;/code&gt; is a negative number and &lt;code&gt;_&lt;/code&gt; is infinity&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3 : 0&lt;/code&gt; defines a verb (operator) -- hopefully there&amp;#39;s a good reason for this...&lt;/li&gt;
&lt;li&gt;Unique terminology (&amp;quot;verbs&amp;quot;, &amp;quot;adverbs&amp;quot;, &amp;quot;ravel&amp;quot;) makes it hard to find information in the wiki&lt;/li&gt;
&lt;li&gt;Search engines don&amp;#39;t seem to understand that &amp;quot;J&amp;quot; is the name of a programming language -- only good way to search was on Stack Overflow with the &lt;code&gt;[j]&lt;/code&gt; tag&lt;/li&gt;
&lt;li&gt;Comments start with &lt;code&gt;NB.&lt;/code&gt;!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;gforth&quot;&gt;Gforth&lt;/h2&gt;
&lt;p&gt;After reading a &lt;a href=&quot;https://ratfactor.com/forth/the_programming_language_that_writes_itself.html&quot;&gt;very long and entertaining post about Forth&lt;/a&gt; roughly a year ago, I&amp;#39;ve wanted to give Forth a try. Forth&amp;#39;s minimalism aligns nicely with &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/minimal-dev-env.html&quot;&gt;my own aspirations&lt;/a&gt;. Who knows, maybe Forth will &lt;a href=&quot;http://duskos.org/&quot;&gt;control a post-apocalyptic world&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I was prepared for Forth&amp;#39;s minimal syntax (even more minimal than Lisp) and I knew how to use a stack. &lt;strong&gt;But I underestimated just how &lt;em&gt;exasperatingly tedious&lt;/em&gt; managing the parameter stack would be&lt;/strong&gt;. I&amp;#39;m sure there&amp;#39;s some better solution for temporaries that I skimmed over, but having to &lt;code&gt;SWAP 1 + SWAP&lt;/code&gt;, etc. was inconvenient.&lt;/p&gt;
&lt;p&gt;Overall, I&amp;#39;m not sure how I feel about Forth outside of the embedded world. I &lt;em&gt;do&lt;/em&gt; hope to implement my own Forth one day--and maybe with the benefit of enlightenment I&amp;#39;ll feel differently.&lt;/p&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I actually kind of enjoyed having no type-checking, not even at run-time--although it&amp;#39;s probably not usually a good idea&lt;/li&gt;
&lt;li&gt;Interacting with Forth really feels like interacting directly with hardware&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;standard-ml&quot;&gt;Standard ML&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;I love arrow functions, map, reduce, etc.&lt;/strong&gt; -- and I have functional programming languages to thank for those, even when I&amp;#39;m using JavaScript. Having said that, Standard ML was the first language I ran into during this challenge where it felt like I was wasting my time stumbling through syntax. I still don&amp;#39;t know when I need parentheses and when I don&amp;#39;t. As usual, this is not necessarily the fault of the language--just of the environment I&amp;#39;ve created for myself.&lt;/p&gt;
&lt;p&gt;Having said that (and I&amp;#39;m sure people will disagree), &lt;strong&gt;I prefer Lisp&amp;#39;s regular syntax when compared to something like Standard ML&lt;/strong&gt;. Maybe I&amp;#39;d like Clojure?&lt;/p&gt;
&lt;h2 id=&quot;squeak&quot;&gt;Squeak&lt;/h2&gt;
&lt;p&gt;I was prepared for everything to be an object in Squeak. I was excited for a fully introspectable language. Want to know what something does? Just look at its source!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I was &lt;em&gt;not&lt;/em&gt; prepared for clicking through menus and having to use the mouse all the time&lt;/strong&gt;. I&amp;#39;m also not sold on image-based development being &lt;em&gt;the default&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In the end, I think there&amp;#39;s a lot of value in a standardized development environment and separating logic into objects, but I think most of those benefits are visible when working in teams or over longer periods of time.&lt;/p&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use the browser&lt;/li&gt;
&lt;li&gt;Use all your mouse buttons&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;sql&quot;&gt;SQL&lt;/h2&gt;
&lt;p&gt;Similar to J, &lt;strong&gt;it&amp;#39;s fun to tell the computer &lt;em&gt;what&lt;/em&gt; I want it to do without having to specify the particular steps for &lt;em&gt;how&lt;/em&gt; to do it&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It&amp;#39;s possible to produce a range of numbers in SQLite!&lt;/li&gt;
&lt;li&gt;Strings can be automatically coerced to numbers in SQLite&lt;/li&gt;
&lt;/ul&gt;
</content>
</entry>
<entry>
<title>Using SectorLISP for Project Euler</title>
<id>https://log.schemescape.com/posts/programming-languages/100-languages-2.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/programming-languages/100-languages-2.html"/>
<updated>2024-03-20T00:00:00.000Z</updated>
<summary type="text">Four days later, I&apos;ve completed day two of my challenge.</summary>
<content type="html">&lt;p&gt;I&amp;#39;m &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/100-languages.html&quot;&gt;trying to write code in 100 different programming languages&lt;/a&gt;. Day (ahem) 2: &lt;strong&gt;SectorLISP&lt;/strong&gt;!&lt;/p&gt;
&lt;h1 id=&quot;sectorlisp&quot;&gt;SectorLISP&lt;/h1&gt;
&lt;p&gt;Ever since discovering &lt;a href=&quot;https://justine.lol/sectorlisp2/&quot;&gt;SectorLISP&lt;/a&gt; (a minimal Lisp that fits in a boot sector), I&amp;#39;ve wanted to give it a spin. And it did not disappoint! It was both beautiful and painful.&lt;/p&gt;
&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;/h2&gt;
&lt;p&gt;Things I missed while using SectorLISP:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tail call optimization&lt;/li&gt;
&lt;li&gt;Mutation&lt;/li&gt;
&lt;li&gt;Integers&lt;/li&gt;
&lt;li&gt;Iteration&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.lispworks.com/documentation/lw60/CLHS/Body/s_let_l.htm&quot;&gt;&lt;code&gt;LET&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mercifully, I was using the &amp;quot;friendly&amp;quot; branch of SectorLISP, which at least included an obvious and idiomatic way to implement recursion via &lt;code&gt;DEFINE&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, obviously, &lt;strong&gt;the list above is not meant as a complaint&lt;/strong&gt;. SectorLISP is a &lt;em&gt;minimal&lt;/em&gt; Lisp, so I was expecting for it to support only the bare minimum. &lt;strong&gt;Rolling your own integer representation and using recursion for iteration are part of the fun!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Having said that, there was one unpleasant surprise: because SectorLISP was designed to run on ancient hardware, &lt;strong&gt;it has a miniscule memory budget&lt;/strong&gt;. There is only space for (I think) &lt;em&gt;at most&lt;/em&gt; 8,192 cons cells. Without tail call optimization and iteration, several of my attempts at printing decimal numbers ran out of memory.&lt;/p&gt;
&lt;p&gt;It took several attempts, but I eventually found that using unary encoding for numbers (i.e. &amp;quot;n&amp;quot; is encoded as a list of length &amp;quot;n&amp;quot;; for example &lt;code&gt;(QUOTE (T T T))&lt;/code&gt; is the number 3) resulted in the simplest code with the least consing--but only when the numbers are small! For larger numbers, I saved space using 32-bit binary (two&amp;#39;s complement) with the least significant bit first.&lt;/p&gt;
&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jaredkrinke/100-languages/blob/main/p2.lisp&quot;&gt;Solution&lt;/a&gt; (tested using the simulator on the &lt;a href=&quot;https://justine.lol/sectorlisp2/&quot;&gt;SectorLISP v2 page&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content>
</entry>
<entry>
<title>Running SectorLisp on Hyper-V</title>
<id>https://log.schemescape.com/posts/programming-languages/sectorlisp-hyper-v.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/programming-languages/sectorlisp-hyper-v.html"/>
<updated>2024-03-18T00:00:00.000Z</updated>
<summary type="text">Please find enclosed a SectorLisp VFD file for use in Hyper-V</summary>
<content type="html">&lt;p&gt;&lt;a href=&quot;https://justine.lol/sectorlisp/&quot;&gt;SectorLisp&lt;/a&gt; is a minimal implementation of Lisp that miraculously fits in a boot sector. I am in no way involved with the project.&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s a link to a &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/../../assets/sectorlisp-vfd.zip&quot;&gt;zip file containing a SectorLisp VFD that works in Hyper-V&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: ... and I just noticed that there&amp;#39;s a &lt;a href=&quot;https://justine.lol/sectorlisp2/&quot;&gt;SectorLisp v2 page&lt;/a&gt; which contains an in-browser REPL. I should just use that instead.&lt;/p&gt;
&lt;h1 id=&quot;background&quot;&gt;Background&lt;/h1&gt;
&lt;p&gt;The SectorLisp home page provides a link to a (raw) image, but it wasn&amp;#39;t obvious how to load the image into Hyper-V. Rather than run and download random tools from the web, I decided to use a Linux VM (and the &amp;quot;dd&amp;quot; tool) running in Hyper-V to write the SectorLisp image to a virtual floppy disk image (VFD).&lt;/p&gt;
&lt;p&gt;Now, I can just &amp;quot;insert&amp;quot; the SectorLisp VFD into a (generation 1, I assume) Hyper-V VM and it can boot into the SectorLisp prompt. Note that you &lt;em&gt;must&lt;/em&gt; use CAPITAL LETTERS for SectorLisp, and it will happily ignore errors. Also, the backspace key doesn&amp;#39;t seem to work properly, so... don&amp;#39;t make any mistakes while typing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;That&amp;#39;s all. I just wanted to share the VFD in case anyone else might want it.&lt;/strong&gt; And, yes, I&amp;#39;m attempting to use SectorLisp in my &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/100-languages.html&quot;&gt;100 programming languages challenge&lt;/a&gt;.&lt;/p&gt;
</content>
</entry>
<entry>
<title>100 programming languages, day 1</title>
<id>https://log.schemescape.com/posts/programming-languages/100-languages-1.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/programming-languages/100-languages-1.html"/>
<updated>2024-03-16T00:00:00.000Z</updated>
<summary type="text">Up first: SIC-1 Assembly Language.</summary>
<content type="html">&lt;p&gt;I&amp;#39;m &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/100-languages.html&quot;&gt;trying to write code in 100 different programming languages&lt;/a&gt;. Note: I&amp;#39;m not necessarily planning on blogging about each programming language, but I &lt;em&gt;will&lt;/em&gt; try to collect (and share) notes about my experiences, likely in batches.&lt;/p&gt;
&lt;h1 id=&quot;sic-1-assembly-language&quot;&gt;SIC-1 Assembly Language&lt;/h1&gt;
&lt;p&gt;In order to ensure progress doesn&amp;#39;t fizzle out immediately, I&amp;#39;m starting with a programming language I know well: &lt;strong&gt;&lt;a href=&quot;https://esolangs.org/wiki/SIC-1_Assembly_Language&quot;&gt;SIC-1 Assembly Language&lt;/a&gt;&lt;/strong&gt;. I&amp;#39;m familiar with this language because I designed both it and the (fictional) 8-bit SIC-1 computer it runs on myself (for a game titled, fittingly, &lt;a href=&quot;https://store.steampowered.com/app/2124440/SIC1/&quot;&gt;SIC-1&lt;/a&gt;). &lt;strong&gt;SIC-1 Assembly Language is basically my take on a usable (though somewhat un-ergonomic) &lt;a href=&quot;https://esolangs.org/wiki/Subleq&quot;&gt;subleq&lt;/a&gt; assembly language&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m mildly familiar with assembly languages, and have written assembly code for MIPS and ATmega (non-professionally), but &lt;strong&gt;most code I write is not performance-sensitive, so I prefer to use more expressive languages&lt;/strong&gt;, despite any potential overhead.&lt;/p&gt;
&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Subleq is inconvenient, but straight-forward, however &lt;strong&gt;the SIC-1 is an 8-bit computer with only a single 256 byte address space&lt;/strong&gt;, yielding space for less than 85 instructions, even before adding in any variables&lt;/li&gt;
&lt;li&gt;Fitting &amp;quot;big int&amp;quot; arithmetic, formatting, and the actual logic into roughly 70 &amp;quot;subtract and maybe branch&amp;quot; instructions&amp;quot; required some creativity&lt;/li&gt;
&lt;li&gt;The tedium of subleq and my lack of focus led to several bugs, so I had to add a lot of comments to ensure I could remember what all those subleqs were for&lt;/li&gt;
&lt;li&gt;I had to invent a subroutine calling convention in order to make my solution &amp;quot;fit&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Overall, &lt;strong&gt;subleq is interesting theoretically&lt;/strong&gt; (but not &lt;em&gt;practically&lt;/em&gt;), and, while &lt;strong&gt;the tight constraints of the SIC-1 give me an appreciation for assembly language hacks of yore&lt;/strong&gt;, I&amp;#39;d never want to use subleq for anything substantial (though I&amp;#39;ve heard &lt;a href=&quot;http://users.atw.hu/gerigeri/DawnOS/index.html&quot;&gt;it&amp;#39;s been done&lt;/a&gt;!).&lt;/p&gt;
&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jaredkrinke/100-languages&quot;&gt;Main GitHub repository where I&amp;#39;m tracking progress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jaredkrinke/100-languages/blob/main/p1.sic1&quot;&gt;Solution&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
</entry>
</feed>
