<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Schemescape</title>
<id>https://log.schemescape.com/</id>
<link rel="self" href="https://log.schemescape.com/feed.xml"/>
<link rel="alternate" href="https://log.schemescape.com/"/>
<author>
<name>Schemescape</name>
</author>
<updated>2024-09-05T21:42:10.350Z</updated>

<entry>
<title>Easy Script (Commodore 64) quick reference</title>
<id>https://log.schemescape.com/posts/vintage-computing/easy-script.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/vintage-computing/easy-script.html"/>
<updated>2024-09-05T00:00:00.000Z</updated>
<summary type="text">Here&apos;s a quick reference page for Easy Script on the Commodore 64. Because who wouldn&apos;t need this?</summary>
<content type="html">&lt;p&gt;&lt;a href=&quot;https://www.c64-wiki.com/wiki/Easy_Script&quot;&gt;Easy Script&lt;/a&gt; is a word processor for the Commodore 64 that was apparently fairly popular. As a modern computer user, I found it fairly difficult to use. The only comprehensive documentation I could find was &lt;a href=&quot;https://archive.org/download/retrokit-manuals/c64/c64-original.zip/Easy%20Script%2064%20%28en%29.pdf&quot;&gt;the original manual (on The Internet Archive)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Annoyingly, I couldn&amp;#39;t find any sort of &lt;em&gt;useful&lt;/em&gt; &amp;quot;quick reference&amp;quot; for Easy Script. Humorously, there is an &lt;a href=&quot;https://commodore.software/downloads/download/211-application-manuals/13492-easy-script-quick-reference-card&quot;&gt;official Easy Script Quick Reference Card&lt;/a&gt;, but it omits salient details, such as &lt;em&gt;how to save documents&lt;/em&gt;. So I made my own documentation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The rest of this document includes quick reference for Easy Script on the Commodore 64&lt;/strong&gt; (also available &lt;a href=&quot;https://gist.github.com/jaredkrinke/f77c88449d4616c221bcf7b09be86bbc&quot;&gt;as a gist&lt;/a&gt;). Note: this is &lt;em&gt;not&lt;/em&gt; a tutorial; see the original manual for a tutorial.&lt;/p&gt;
&lt;h1 id=&quot;keyboard-shortcuts&quot;&gt;Keyboard shortcuts&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;Key(s)&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Ctrl+W&lt;/td&gt;
&lt;td&gt;Move to next word&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Ctrl+&amp;larr;&lt;/td&gt;
&lt;td&gt;Move to previous word&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&quot;f1-commands&quot;&gt;F1 commands&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;Key&lt;/th&gt;
&lt;th&gt;Descriptions&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;F&lt;/td&gt;
&lt;td&gt;Save (F2 to scan within document for filename in quotes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;L&lt;/td&gt;
&lt;td&gt;Load&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;O&lt;/td&gt;
&lt;td&gt;Output (see &lt;a href=&quot;https://log.schemescape.com/posts/vintage-computing/#printing&quot;&gt;Printing&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;I&lt;/td&gt;
&lt;td&gt;Insert mode (instead of the annoying default &amp;quot;overwrite&amp;quot; mode)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;E&lt;/td&gt;
&lt;td&gt;Erase (S for sentence, P for paragraph, R for rest, A for all)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Space bar&lt;/td&gt;
&lt;td&gt;Go to next screen&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Shift+space bar&lt;/td&gt;
&lt;td&gt;Go to previous screen&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;G&lt;/td&gt;
&lt;td&gt;&amp;quot;Go&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;S&lt;/td&gt;
&lt;td&gt;Search&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;R&lt;/td&gt;
&lt;td&gt;Select a range of text (Enter to copy/commit) -- then one of the next two&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;X&lt;/td&gt;
&lt;td&gt;Move (cut+paste)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;A&lt;/td&gt;
&lt;td&gt;Copy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;&lt;code&gt;[&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Start underline (close to stop)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;&lt;code&gt;(&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Start bold (close to stop)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;&lt;code&gt;-&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&amp;quot;Soft&amp;quot; hyphen&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;`&lt;/td&gt;
&lt;td&gt;Superscript (single character)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;&lt;code&gt;,&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Subscript (single character)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Run/stop&lt;/td&gt;
&lt;td&gt;Reset&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&quot;format-instructions-f3&quot;&gt;Format instructions (F3)&lt;/h1&gt;
&lt;p&gt;Press F3 to get a color-inverted asterisk, indicating a line that won&amp;#39;t be part of the document content. Note that the first comment with a filename in quotes specifies the desired file name of the document (See F1, O, F2 above).&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;nb&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Comment&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lm#:rm#:&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Set left margin to # columns, and right margin similarly (set to 1 and 40 for proofreading in &amp;quot;video&amp;quot; mode on the screen)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sp1&lt;/code&gt; or &lt;code&gt;sp2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;For extra line spacing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ju1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Turn on justification, &lt;code&gt;ju0&lt;/code&gt; to turn off&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cn1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Turn on centering, &lt;code&gt;cn0&lt;/code&gt; to turn off&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ps&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Pause (while printing)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&quot;printing&quot;&gt;Printing&lt;/h1&gt;
&lt;p&gt;F1, O; then V for video/display and P for printer.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Precede V/P with C for continuous printing&lt;/li&gt;
&lt;li&gt;Toggle continuous printing with Shift+P&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;Key&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;C&lt;/td&gt;
&lt;td&gt;Continue to next page&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;V&lt;/td&gt;
&lt;td&gt;Preview next page/switch to video output&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;P&lt;/td&gt;
&lt;td&gt;Switch to print output&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Run/stop&lt;/td&gt;
&lt;td&gt;Stop printing/previewing&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&quot;files&quot;&gt;Files&lt;/h1&gt;
&lt;p&gt;Assuming drive #8, hit F4, and then:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;+8&lt;/code&gt; Load directory, then F1, L, F2 to list first file, F2 again for next file, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;notes&quot;&gt;Notes&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Default to 80 columns wide for printing&lt;/li&gt;
&lt;li&gt;Default to 66 lines of text per page&lt;/li&gt;
&lt;li&gt;Preview with F1, O, V -- then run/stop to end preview, cursor keys to move left/right, and Commodore key to scroll&lt;/li&gt;
&lt;li&gt;F5 for caps lock&lt;/li&gt;
&lt;/ul&gt;
</content>
</entry>
<entry>
<title>Stumbling along with Blazin&apos; Forth</title>
<id>https://log.schemescape.com/posts/vintage-computing/blazin-forth.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/vintage-computing/blazin-forth.html"/>
<updated>2024-08-20T00:00:00.000Z</updated>
<summary type="text">Here are some notes on my first attempt at using Blazin&apos; Forth on a Commodore 64.</summary>
<content type="html">&lt;p&gt;After &lt;a href=&quot;https://log.schemescape.com/posts/vintage-computing/40-year-old-dev-environment.html&quot;&gt;showing off my &amp;quot;new&amp;quot; Commodore 64&lt;/a&gt; and posting a &lt;a href=&quot;https://log.schemescape.com/posts/vintage-computing/forth-line-editor.html&quot;&gt;Forth editor &amp;quot;quick reference&amp;quot;&lt;/a&gt;, it should be no surprise that (&lt;a href=&quot;https://log.schemescape.com/posts/vintage-computing/../programming-languages/100-languages.html&quot;&gt;in pursuit of using 100 programming languages&lt;/a&gt;) I sat down and, over the course of several evenings, solved a Project Euler problem using Blazin&amp;#39; Forth (&lt;a href=&quot;https://github.com/jaredkrinke/100-languages/blob/main/src/p55.forth&quot;&gt;code here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Curious about using an old Forth, on old hardware? The rest of this post contains my notes, along with links to resources, in case you&amp;#39;d like to give it a try.&lt;/p&gt;
&lt;h1 id=&quot;blazin-forth&quot;&gt;Blazin&amp;#39; Forth&lt;/h1&gt;
&lt;p&gt;Blazin&amp;#39; Forth, being 39 years old, doesn&amp;#39;t have a GitHub repository. It doesn&amp;#39;t even have a SourceForge project. In fact, I couldn&amp;#39;t find a canonical web site. The best resources I can point to are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.lyonlabs.org/commodore/onrequest/collections.html&quot;&gt;An excellent Web 1.0 page about programming languages on the Commodore 64&lt;/a&gt; -- there&amp;#39;s a line for Blazin&amp;#39; Forth with links to disk images&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://jimlawless.net/blog/posts/blazin/&quot;&gt;A retrospective interview with Blazin&amp;#39; Forth&amp;#39;s author, Scott Ballantyne&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://archive.org/details/transactor-magazines-v7-i05/page/n59/mode/2up&quot;&gt;A contemporaneous article from Transactor Magazine about Blazin&amp;#39; Forth, by its author&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since I haven&amp;#39;t found a convenient way to read .seq files on a modern computer, &lt;a href=&quot;https://gist.github.com/jaredkrinke/d8a801274a9a66bb06a0e2c8778624ca&quot;&gt;here is an ASCII dump of Blazin&amp;#39; Forth&amp;#39;s documentation&lt;/a&gt; (it is copyright 1985 Scott Ballantyne, but &amp;quot;distribution on a not for profit basis is encouraged&amp;quot;).&lt;/p&gt;
&lt;h2 id=&quot;running-blazin-forth&quot;&gt;Running Blazin&amp;#39; Forth&lt;/h2&gt;
&lt;p&gt;It&amp;#39;s possible to run Blazin&amp;#39; Forth in an emulator such as &lt;a href=&quot;https://vice-emu.sourceforge.io/&quot;&gt;VICE&lt;/a&gt;, but I should note that I ran into some issues when loading and saving screens (saved code blocks). I&amp;#39;m unsure if my issues are due to a bug or a simple mistake on my part, but I didn&amp;#39;t run into any such issues on a real C64.&lt;/p&gt;
&lt;h2 id=&quot;learning-forth&quot;&gt;Learning Forth&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ve written a small amount of code in a smattering for Forths, but Blazin&amp;#39; Forth really opened my eyes to Forth, for two reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Blazin&amp;#39; Forth&amp;#39;s documentation (linked above) clarifies a lot of the &amp;quot;whys&amp;quot; of Forth&lt;/strong&gt;, and also provides interesting sample code&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Blazin&amp;#39; Forth, as in classic Forth, brings its own operating system&lt;/strong&gt;, in the sense that it provides its own durable storage implementation: 1 KB blocks (usable, with a built-in editor, for code &lt;em&gt;or&lt;/em&gt; anything else you want)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that, unless you&amp;#39;re well versed in Forth, you&amp;#39;ll probably want to have &lt;a href=&quot;https://www.forth.com/starting-forth/&quot;&gt;Starting Forth&lt;/a&gt; handy while reading Blazin&amp;#39; Forth&amp;#39;s documentation.&lt;/p&gt;
&lt;p&gt;Aside: &lt;strong&gt;I also enjoyed Blazin&amp;#39; Forth&amp;#39;s documentation as a time capsule from the mid-80s&lt;/strong&gt;. It mentions Compuserve, a Forth Interest Group, and the software even sports a dedication--something I&amp;#39;m used to seeing in books, but which is curiously absent from most software (modern software, at least).&lt;/p&gt;
&lt;h2 id=&quot;block-based-editing----not-my-favorite&quot;&gt;Block-based editing -- not my favorite&lt;/h2&gt;
&lt;p&gt;N.B. &amp;quot;Block-based&amp;quot; as in &lt;strong&gt;you&amp;#39;re writing directly to 1 KB blocks on disk&lt;/strong&gt;--&lt;em&gt;not&lt;/em&gt; as in dragging around blocks in a GUI to create programs (a la &lt;a href=&quot;https://scratch.mit.edu/&quot;&gt;Scratch&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;This was my first experience using both a line-based interactive editor and with Forth-style block/screen-based programming. &lt;strong&gt;Essentially, you are given ~130 one kilobyte blocks, with each being divided into 16 lines of 64 characters&lt;/strong&gt;. The upside is that you don&amp;#39;t need a file system (and Forth can provide a line-based editor). The downside is that now you have to ensure your lines aren&amp;#39;t too long and that there aren&amp;#39;t too many of them (lest you need to spill code onto a subsequent block).&lt;/p&gt;
&lt;p&gt;More irritatingly, &lt;strong&gt;the Commodore 64 provides a 40 column wide display&lt;/strong&gt; (with no status bar), so now it&amp;#39;s not even obvious when a 64 character line is getting too long. And even if a line is less than 64 characters, if it&amp;#39;s at least 40 characters, it will wrap when being printed out, potentially causing the first couple of lines to scroll off screen.&lt;/p&gt;
&lt;p&gt;Overall, I found line-based editing to be a decent experience (no more annoying than having to always specify line numbers in Commodore BASIC). Using blocks instead of a file system was cute, but unpleasant--especially due to the mismatch between display width and line width (aside: I wonder if a Commodore 128&amp;#39;s 80-column mode would work with Blazin&amp;#39; Forth?).&lt;/p&gt;
&lt;p&gt;Interestingly, after coming to this conclusion, I read through the interview linked above, and found that &lt;strong&gt;Blazin&amp;#39; Forth&amp;#39;s author actually thinks that files would have been a better choice&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Today I would probably not implement the Forth block system, I’d use files instead. I never liked that, to tell the truth. It made a certain sense with the 64 disk drives, and the code I wrote is optimized for the rotational speed of those things, but I think it leads to better programming to just store your code in a file with a name.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Agreed!&lt;/p&gt;
&lt;h3 id=&quot;improvement-running-the-current-line&quot;&gt;Improvement: running the current line&lt;/h3&gt;
&lt;p&gt;For my workflow, I would usually do the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Start a definition on a new line&lt;/li&gt;
&lt;li&gt;Compile the line&lt;/li&gt;
&lt;li&gt;Test the line&lt;/li&gt;
&lt;li&gt;Fix/refine the definition by &lt;code&gt;FORGET&lt;/code&gt;-ing it and then go back to 1&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To my surprise, &lt;strong&gt;there was no built-in support for the second step (compiling/running the current line)&lt;/strong&gt;. Blazin&amp;#39; Forth doesn&amp;#39;t support the &lt;a href=&quot;https://forth-standard.org/standard/core/EVALUATE&quot;&gt;EVALUATE&lt;/a&gt; word, so I had to fashion my own version:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-forth&quot;&gt;// RL RUNS THE &lt;span class=&quot;hljs-keyword&quot;&gt;CURRENT&lt;/span&gt; EDITOR &lt;span class=&quot;hljs-type&quot;&gt;LINE&lt;/span&gt;
: &lt;span class=&quot;hljs-type&quot;&gt;LINE&lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;INDEX&lt;/span&gt; R# @ C/L / ;
: &lt;span class=&quot;hljs-type&quot;&gt;LINE&lt;/span&gt;&amp;gt;&lt;span class=&quot;hljs-keyword&quot;&gt;OFFSET&lt;/span&gt; C/L * ;
: CURLINE SCR @ BLOCK &lt;span class=&quot;hljs-type&quot;&gt;LINE&lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;INDEX&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;LINE&lt;/span&gt;&amp;gt;&lt;span class=&quot;hljs-keyword&quot;&gt;OFFSET&lt;/span&gt; + ;
: C&amp;gt;TIB TIB SWAP CMOVE ;
: CL&amp;gt;TIB CURLINE C/L C&amp;gt;TIB C/L #TIB ! ;
: RL CL&amp;gt;TIB &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;gt;&lt;span class=&quot;hljs-keyword&quot;&gt;IN&lt;/span&gt; ! INTERPRET ;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;explanation&quot;&gt;Explanation&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LINE-INDEX&lt;/code&gt; (-- line) pushes the index of the currently selected line (0 through 15), using an internal word named &lt;code&gt;R#&lt;/code&gt; that represents the offset into a block of the current cursor (note: this may be in the middle of a line)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LINE&amp;gt;OFFSET&lt;/code&gt; (line -- offset) pushes the offset of the beginning of the given line (&lt;code&gt;C/L&lt;/code&gt; is an internal constant for the number of characters per line--64)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CURLINE&lt;/code&gt; (-- address) pushes the address of the current line, in the current block (whose index is in the variable &lt;a href=&quot;https://forth-standard.org/standard/block/SCR&quot;&gt;SCR&lt;/a&gt;, and whose address is obtained via &lt;a href=&quot;https://forth-standard.org/standard/block/BLOCK&quot;&gt;BLOCK&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C&amp;gt;TIB&lt;/code&gt; (bytes --) copies the given number of bytes to &lt;code&gt;TIB&lt;/code&gt; (the location of the text input buffer)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CL&amp;gt;TIB&lt;/code&gt; (--) copies the current editor line into the text input buffer (and sets the size of the input, &lt;code&gt;#TIB&lt;/code&gt; appropriately)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RL&lt;/code&gt; (--?) copies the current line into the text input buffer (see previous), sets the current input buffer index to 0, and runs the line using &lt;code&gt;INTERPRET&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;thinking-in-forth&quot;&gt;Thinking in Forth&lt;/h2&gt;
&lt;p&gt;Despite making some progress in beginning to truly &lt;em&gt;see&lt;/em&gt; Forth, I still have not reached Forth Enlightenment. Specifically, &lt;strong&gt;I still don&amp;#39;t know what to do when a function needs to operate on more than 2 or 3 inputs&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;As an example, I have a word (function) for adding two &amp;quot;big integer&amp;quot; values (represented as arrays of decimal digits, least significant digit first), named &lt;code&gt;N+&lt;/code&gt;. The stack annotation for that function is &lt;code&gt;(a1 a2 -- )&lt;/code&gt;, meaning it takes the address of two numbers, adds the two numbers, and writes the result into the second number, something like &lt;code&gt;a2 = a1 + a2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Internally, this function loops over the digits and adds them, including any carry from the previous digit. The problem I ran into is that &lt;strong&gt;now I&amp;#39;ve got two addresses and a carry to worry about. If I put all of those on the stack, then I feel like I&amp;#39;m constantly shuffling items around&lt;/strong&gt; and trying to avoid letting the stack get too deep (reaching down beyond 3 items gets tricky).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ideally, I&amp;#39;d like to assign names to the elements on the stack and then just be able to copy them to the top of the stack using those names&lt;/strong&gt; -- something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-forth&quot;&gt;: n+ ( &lt;span class=&quot;hljs-built_in&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;a2&lt;/span&gt; -- ) &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; ( carry ) &lt;span class=&quot;hljs-built_in&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;a2&lt;/span&gt; + + ( to &lt;span class=&quot;hljs-keyword&quot;&gt;add&lt;/span&gt; the carry, &lt;span class=&quot;hljs-built_in&quot;&gt;a1&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;a2&lt;/span&gt; together )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I think newer Forths support syntax like this, but back in the days of Blazin&amp;#39; Forth, the only solutions I see are to either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Be smarter about the stack... somehow&lt;/li&gt;
&lt;li&gt;Throw some of the values into variables!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I went with the second option and just used a variable for the carry. This obviously wouldn&amp;#39;t work in any case where a global variable wouldn&amp;#39;t suffice (e.g. any function that can appear on the call stack multiple times). &lt;strong&gt;But maybe that&amp;#39;s the point of Forth? I know this function will never nest, so perhaps a global is ok?&lt;/strong&gt; Clearly, I will need to meditate on this.&lt;/p&gt;
&lt;h2 id=&quot;but-theres-much-more&quot;&gt;But there&amp;#39;s much more&lt;/h2&gt;
&lt;p&gt;Of course, I only barely scratched the surface of what Blazin&amp;#39; Forth is capable of. There are affordances for turtle graphics, sound generation via the SID chip, device access, etc. It feels like a complete and very capable system! One day, I&amp;#39;d like to try and write a game entirely in Blazin&amp;#39; Forth--though I doubt I&amp;#39;ll ever actually get around to it.&lt;/p&gt;
&lt;p&gt;Regardless, that&amp;#39;s enough rambling. Hopefully I&amp;#39;ve piqued your interest enough that you&amp;#39;ll give Blazin&amp;#39; Forth a try--it&amp;#39;s well worth a look, especially if the Commodore 64 holds a special place in your heart or you have always been curious about Forth.&lt;/p&gt;
</content>
</entry>
<entry>
<title>Blazin&apos; Forth/Starting Forth editor quick reference</title>
<id>https://log.schemescape.com/posts/vintage-computing/forth-line-editor.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/vintage-computing/forth-line-editor.html"/>
<updated>2024-08-13T00:00:00.000Z</updated>
<summary type="text">For my own reference, this is a quick reference table for vintage line/block-based Forth editors.</summary>
<content type="html">&lt;p&gt;&lt;strong&gt;Blazin&amp;#39; Forth&lt;/strong&gt; is an implementation of Forth for the Commodore 64, published in 1985 by Scott Ballantyne (for free). Its built-in editor is block- and line-based, and the editor is modeled after one described in the first edition of &lt;a href=&quot;https://www.forth.com/starting-forth/&quot;&gt;Starting Forth&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The rest of this post provides quick reference for the editor, because I couldn&amp;#39;t find any such resource on the web. For a &lt;em&gt;tutorial&lt;/em&gt;, see the Starting Forth PDF at the previous link.&lt;/p&gt;
&lt;h1 id=&quot;forth-editor-quick-reference&quot;&gt;Forth editor quick reference&lt;/h1&gt;
&lt;h2 id=&quot;block-selectionmanipulation&quot;&gt;Block selection/manipulation&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Word&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Stack&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;LIST&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;(n --)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Select&lt;/strong&gt; the given block, &lt;strong&gt;print&lt;/strong&gt; it out, and start the editor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;N&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;(--)&lt;/td&gt;
&lt;td&gt;Move to the &lt;strong&gt;next block&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;B&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;(--)&lt;/td&gt;
&lt;td&gt;Move backwards to the &lt;strong&gt;previous block&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SAVE-BUFFERS&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;(--)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Save&lt;/strong&gt; modified buffers back to disk blocks&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;EMPTY-BUFFERS&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;(--)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Discard&lt;/strong&gt; buffers/changes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;LOAD&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;(n --)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Load and execute&lt;/strong&gt; the given block&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&quot;line-editing-commands&quot;&gt;Line editing commands&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Word&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Stack&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;L&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;(--)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Print&lt;/strong&gt; the currently selected block&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;T&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;(n --)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Select&lt;/strong&gt; the given line number&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;P&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;(--)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Replace&lt;/strong&gt; the selected line with the remainder of the input buffer (use 3 spaces to clear the line entirely; leave blank to copy from the insert buffer)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;U&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;(--)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Insert under&lt;/strong&gt; the current line the rest of the input buffer, shifting any following lines down, and move selection down one line&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;X&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;(--)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Cut&lt;/strong&gt; the current line, and shift following lines up one line (the line that was removed is placed into the insert buffer--use &lt;code&gt;P&lt;/code&gt;/&lt;code&gt;U&lt;/code&gt; to &amp;quot;paste&amp;quot;)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&quot;character-editing-commands&quot;&gt;Character editing commands&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Word&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;F&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Search&lt;/strong&gt; for the rest of the input buffer in the current line&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;I&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Insert&lt;/strong&gt; the rest of the input buffer before the cursor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;E&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Delete&lt;/strong&gt; the string previously found with &lt;code&gt;F&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;D&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Find and delete&lt;/strong&gt; the rest of the input buffer (combination of &lt;code&gt;F&lt;/code&gt; and &lt;code&gt;E&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;R&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Replace&lt;/strong&gt; previously found text with the rest of the input buffer (combination of &lt;code&gt;E&lt;/code&gt; and &lt;code&gt;I&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;TILL&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Delete everything from the cursor, through the rest of the input buffer&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&quot;miscellaneous-commands&quot;&gt;Miscellaneous commands&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Word&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Stack&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;WIPE&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;(--)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Clear&lt;/strong&gt; the current block&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;FLUSH&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;(--)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Save&lt;/strong&gt; buffers back to disk blocks, and free associated buffers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;COPY&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;(src dest --)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Copy block&lt;/strong&gt; from one to another&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;S&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;(n --)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Search&lt;/strong&gt; for the rest of the input buffer in this block &lt;em&gt;and following blocks&lt;/em&gt;, while the block number is lower than the specified limit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;M&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;(b l --)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Copy current line&lt;/strong&gt; to a new block and associated line&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</content>
</entry>
<entry>
<title>My new 40-year-old development environment</title>
<id>https://log.schemescape.com/posts/vintage-computing/40-year-old-dev-environment.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/vintage-computing/40-year-old-dev-environment.html"/>
<updated>2024-08-12T00:00:00.000Z</updated>
<summary type="text">I&apos;m going to find out what it was like to develop software in the 8-bit era.</summary>
<content type="html">&lt;p&gt;Lately, my computing interests have revolved around the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Exploring programming languages (&lt;a href=&quot;https://log.schemescape.com/posts/vintage-computing/../programming-languages/50-different-languages.html&quot;&gt;50+ so far&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Testing out &lt;a href=&quot;https://log.schemescape.com/posts/vintage-computing/../programming-languages/minimal-dev-env.html&quot;&gt;minimal development environments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://log.schemescape.com/posts/vintage-computing/../retrocomputing/amiga-day-project-euler.html&quot;&gt;Playing with vintage computers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks to some generosity and good luck, I just acquired a &amp;quot;new&amp;quot; computer on which all three interests can converge:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://log.schemescape.com/posts/vintage-computing/../../assets/c64.jpg&quot; alt=&quot;Commodore 64 with monitor&quot;/&gt;&lt;/p&gt;
&lt;p&gt;That&amp;#39;s an original Commodore 64. Also known as &lt;a href=&quot;https://log.schemescape.com/posts/vintage-computing/../programming-languages/minimal-dev-env.html#back-in-my-day&quot;&gt;the first computer I ever used&lt;/a&gt;. It sports a 1 MHz 8-bit CPU and 64 KB of RAM. Aside: despite these outdated specs, &lt;strong&gt;the C64 boots faster than any modern computer&lt;/strong&gt;--it&amp;#39;s practically instantaneous.&lt;/p&gt;
&lt;p&gt;Given that the C64 is one of the most popular computers of all time (per Guinness), it supports &lt;a href=&quot;https://www.lyonlabs.org/commodore/onrequest/collections.html&quot;&gt;a multitude of programming languages&lt;/a&gt;, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Assembly&lt;/li&gt;
&lt;li&gt;BASIC&lt;/li&gt;
&lt;li&gt;C&lt;/li&gt;
&lt;li&gt;COBOL&lt;/li&gt;
&lt;li&gt;Forth&lt;/li&gt;
&lt;li&gt;FORTRAN&lt;/li&gt;
&lt;li&gt;Lisp&lt;/li&gt;
&lt;li&gt;Logo&lt;/li&gt;
&lt;li&gt;Pascal&lt;/li&gt;
&lt;li&gt;Prolog&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There&amp;#39;s even, apparently, &lt;a href=&quot;https://www.lyonlabs.org/commodore/onrequest/nanovm-announce.txt&quot;&gt;a 16 KB minimal JVM&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;the-plan&quot;&gt;The plan&lt;/h1&gt;
&lt;p&gt;Obviously, the task at hand is to &lt;strong&gt;solve a few Project Euler problems using a mid-80s development environment&lt;/strong&gt;. I&amp;#39;ve &lt;a href=&quot;https://log.schemescape.com/posts/vintage-computing/../programming-languages/100-languages-4.html#commodore-basic&quot;&gt;already sovled a problem using Commodore BASIC&lt;/a&gt; (using an emulator, since I didn&amp;#39;t have a C64 at the time), so next up I&amp;#39;m looking at the following (likely in this order):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Blazin&amp;#39; Forth&lt;/strong&gt;, by Scott Ballantyne (1985)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MicroLisp&lt;/strong&gt;, by Nicholas Vrtis (1986)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;G-Pascal&lt;/strong&gt;, by Nick Gammon (1982)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;blazin-forth&quot;&gt;Blazin&amp;#39; Forth&lt;/h2&gt;
&lt;p&gt;I&amp;#39;ve actually spent a bit of time tinkering with Blazin&amp;#39; Forth already. So far, it feels like a supremely authentic implementation of Forth. Notably, &lt;strong&gt;Blazin&amp;#39; Forth feels like a self-contained little operating system&lt;/strong&gt;--it even implements its own line-based text editor and block-based storage--no file system needed. Note: in the long run, I&amp;#39;m not sure this is a good tradeoff, but from a self-hosting and bootstrapping perspective, it&amp;#39;s nifty (also: did I mention there&amp;#39;s only 64 KB of RAM?).&lt;/p&gt;
&lt;p&gt;That&amp;#39;s all I have for now. Until next time!&lt;/p&gt;
</content>
</entry>
<entry>
<title>R.I.P. The Living Computers Museum</title>
<id>https://log.schemescape.com/posts/retrocomputing/rip-living-computers-museum.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/retrocomputing/rip-living-computers-museum.html"/>
<updated>2024-06-30T00:00:00.000Z</updated>
<summary type="text">My favorite museum in the entire world is no more.</summary>
<content type="html">&lt;p&gt;Given my interest in &lt;a href=&quot;https://log.schemescape.com/posts/retrocomputing/amiga-day-project-euler.html&quot;&gt;old&lt;/a&gt;, &lt;a href=&quot;https://log.schemescape.com/posts/retrocomputing/../programming-languages/minimal-dev-env-3.html&quot;&gt;slow&lt;/a&gt;, and &lt;a href=&quot;https://log.schemescape.com/posts/retrocomputing/../programming-languages/minimal-dev-env.html&quot;&gt;minimalist&lt;/a&gt; computers, it&amp;#39;s unsurprising that I thoroughly enjoyed the &lt;a href=&quot;https://en.wikipedia.org/wiki/Living_Computers:_Museum_%2B_Labs&quot;&gt;Living Computers Museum&lt;/a&gt;. Not only I was able to relive my childhood of playing Marble Madness on a (real) &lt;a href=&quot;https://en.wikipedia.org/wiki/Commodore_64&quot;&gt;Commodore 64&lt;/a&gt;, it was the backdrop to my first experience with the vaunted &lt;a href=&quot;https://en.wikipedia.org/wiki/Amiga&quot;&gt;Amiga&lt;/a&gt; platform. Astoundingly, it was also possible to toy around with ancient room-sized computers of yore.&lt;/p&gt;
&lt;p&gt;Back in 2020, I was saddened to hear that the museum had &lt;a href=&quot;https://seattlecollegian.com/paul-allens-living-computers-museum-remains-closed-after-years-despite-lifted-covid-restrictions/&quot;&gt;closed its doors&lt;/a&gt;, after the death of its benefactor, Paul Allen. Generously, they left many machines (and even a BBS) accessible over telnet. &lt;strong&gt;In fact, I had logged into the LCM telnet interface roughly one week ago.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;But recently it all went dark. The Living Computers Museum has &lt;a href=&quot;https://hackaday.com/2024/06/25/paul-allens-living-computers-museum-and-labs-to-be-auctioned/&quot;&gt;officially shut down for good and its artifacts are to be auctioned off&lt;/a&gt;. The telnet service, and even the museum&amp;#39;s web site, have all been unceremoniously taken offline. Donated hardware will be sent to the highest bidder (or, worst case, possibly the dump). &lt;strong&gt;It&amp;#39;s a sad day for vintage computing.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I guess, for now, I will plan on continuing to run my own vintage hardware museum, however inefficient.&lt;/p&gt;
</content>
</entry>
</feed>
