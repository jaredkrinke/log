<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Schemescape</title>
<id>https://log.schemescape.com/</id>
<link rel="self" href="https://log.schemescape.com/feed.xml"/>
<link rel="alternate" href="https://log.schemescape.com/"/>
<author>
<name>Schemescape</name>
</author>
<updated>2025-03-14T15:44:11.289Z</updated>

<entry>
<title>Did the Google Domains sale to Squarespace open my domain up to phishers?</title>
<id>https://log.schemescape.com/posts/web-development/squarespace-phishing.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/web-development/squarespace-phishing.html"/>
<updated>2025-03-14T00:00:00.000Z</updated>
<summary type="text">That time I got phishing mail from my own domain.</summary>
<content type="html">&lt;p&gt;About 5 weeks ago, I randomly checked my spam mail folder and saw a phishing mail &lt;em&gt;sent from my own domain&lt;/em&gt;, schemescape.com. I assumed it was marked as spam because it couldn&amp;#39;t be validated.&lt;/p&gt;
&lt;p&gt;To my surprise, &lt;strong&gt;the mail was verified (via &lt;a href=&quot;https://en.wikipedia.org/wiki/Sender_Policy_Framework&quot;&gt;SPF&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/DomainKeys_Identified_Mail&quot;&gt;DKIM&lt;/a&gt;) as being from schemescape.com.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#39;m pretty sure I hadn&amp;#39;t tried to phish myself, so... &lt;strong&gt;what happened?&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;background&quot;&gt;Background&lt;/h1&gt;
&lt;p&gt;I originally registered schemescape.com using Google Domains and I set up &lt;em&gt;in-bound&lt;/em&gt; email forwarding, so I could receive mail at my domain (but not send it).&lt;/p&gt;
&lt;p&gt;On June 15th, 2023, &lt;a href=&quot;https://domains.google/&quot;&gt;Google announced it was selling its Google Domains business to Squarespace&lt;/a&gt;. By July 2024, all domains had been migrated to Squarespace.&lt;/p&gt;
&lt;p&gt;With that context in mind, let&amp;#39;s travel back (forward?) to a few weeks ago.&lt;/p&gt;
&lt;h1 id=&quot;investigation&quot;&gt;Investigation&lt;/h1&gt;
&lt;h2 id=&quot;mailgun&quot;&gt;Mailgun&lt;/h2&gt;
&lt;p&gt;To confirm that I didn&amp;#39;t have a &amp;quot;Jekyll and Hyde&amp;quot; self-phishing situation, I checked the email headers and observed that &lt;strong&gt;the mail was sent from a sever I&amp;#39;d never heard of&lt;/strong&gt;: &lt;code&gt;a168.a94b46b0.use4.send.mailgun.net&lt;/code&gt; (198.244.55.168). So what is Mailgun, and how are they sending mail from &lt;em&gt;my&lt;/em&gt; domain?&lt;/p&gt;
&lt;p&gt;Mailgun advertises itself as a &amp;quot;transactional email API service for developers&amp;quot;. I think it&amp;#39;s a legitimate business, so I&amp;#39;m assuming some bad actor is abusing their service. I reported the activity to Mailgun, but that only explains that Mailgun is involved.&lt;/p&gt;
&lt;h2 id=&quot;spfdkim&quot;&gt;SPF/DKIM&lt;/h2&gt;
&lt;p&gt;I don&amp;#39;t know much about email security, but skimming the Wikipedia articles above indicates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SPF ensures the sending mail server is authorized to send mail for the domain&lt;/li&gt;
&lt;li&gt;DKIM is used to sign (and authenticate) each email from the domain&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Poking around my DNS records, &lt;strong&gt;there are two suspicious TXT records&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SPF (on schemescape.com): &lt;code&gt;v=spf1 include:mailgun.org ~all&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;DKIM (on k1._domainkey.schemescape.com): &lt;code&gt; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDXlrH338T643ulCW/ROaqdFhTlU332Av6qpMN69oMhKJeUgPp9RFHIMnRecVJAdLVDM3R6RpAsgNdB8EGv1Xhu3/vPA83H/KtGv8p6s03oVLhDaN3emmPZRi8WHlyDWM/W9VPE0aOvfWB/3ONXLaQrJOT2 /JUZIAnQ7ocfZl74kwIDAQAB&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Where did those come from?&lt;/strong&gt; I certainly never authored those DNS records--I didn&amp;#39;t even know about the &lt;code&gt;_domainkey&lt;/code&gt; part of DKIM! Who created those records?&lt;/p&gt;
&lt;h2 id=&quot;mailgun-1&quot;&gt;Mailgun&lt;/h2&gt;
&lt;p&gt;Both records match &lt;a href=&quot;https://help.mailgun.com/hc/en-us/articles/32884702360603-Domain-Verification-Setup-Guide#01GCQE107VSXRWCKSVCHX0XXQQ&quot;&gt;Mailgun&amp;#39;s Domain Verification Setup Guide&lt;/a&gt;, so my domain is setup for Mailgun. &lt;strong&gt;But who set this up?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Aside: why isn&amp;#39;t Mailgun&amp;#39;s setup unique to each domain?&lt;/p&gt;
&lt;h2 id=&quot;squarespace&quot;&gt;Squarespace?&lt;/h2&gt;
&lt;p&gt;At first, I wasn&amp;#39;t sure if it was Google or Squarespace that created these records on my behalf. &lt;a href=&quot;https://forum.squarespace.com/topic/296578-squarespace-email-forwarding-defaults-for-ex-google-domains-mailgun/&quot;&gt;A thread on the Squarespace forum&lt;/a&gt; had at least one person noting that their mail forwarding records were modified during the Google Domains -&amp;gt; Squarespace transition, which suggesed it might be Squarespace&amp;#39;s doing.&lt;/p&gt;
&lt;h2 id=&quot;squarespace-1&quot;&gt;Squarespace!&lt;/h2&gt;
&lt;p&gt;Fortunately, DNS records are public, and at least one site has been tracking records over time: &lt;a href=&quot;https://dnshistory.org/&quot;&gt;DNS History (dnshistory.org)&lt;/a&gt;. Looking at their history for my domain, I see that &lt;strong&gt;the SPF record from above was added sometime around May 13th, 2024, right around when Squarespace notified me that my domain had been migrated to their service&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Given the info above, my best guess is that the Google Domains -&amp;gt; Squarespace transition (or the subsequent Squarespace flow for enabling email forwarding) somehow caused these records to be added, as some sort of (unnecessary, in my case) Mailgun integration. &lt;strong&gt;At that point, a malicious actor just had to claim (&amp;quot;&lt;a href=&quot;https://help.mailgun.com/hc/en-us/articles/32884702360603-Domain-Verification-Setup-Guide#01GCQE107WHJR205TAGQAERRAG&quot;&gt;verify&lt;/a&gt;&amp;quot;) my domain on Mailgun, and then they could start phishing&lt;/strong&gt;, using SPF- and DKIM-verified, legitimate-looking mail.&lt;/p&gt;
&lt;h2 id=&quot;squarespace-2&quot;&gt;Squarespace!!!&lt;/h2&gt;
&lt;p&gt;Annoyingly, &lt;strong&gt;Squarespace seems to &lt;em&gt;require&lt;/em&gt; the Mailgun records for any kind of mail forwarding&lt;/strong&gt;. I don&amp;#39;t see an option for in-bound-only forwarding (like I had on Google Domains). So... I don&amp;#39;t see a way to avoid this problem other than creating a Mailgun account and claiming your domain there.&lt;/p&gt;
&lt;h1 id=&quot;security-response-or-not&quot;&gt;Security response... or not&lt;/h1&gt;
&lt;p&gt;I documented my understanding of the issue and reported it to Squarespace, via their Hackerone-based security funnel. Either fortunately (because I misunderstood) or unfortunately (because Squarespace misunderstood), &lt;strong&gt;Squarespace closed my report because it was not a &amp;quot;significant&amp;quot; security issue&lt;/strong&gt;. Obviously, I disagree. I received a &amp;quot;valid&amp;quot; (as far as email security is concerned) phishing mail from my own domain! There&amp;#39;s definitely a problem somewhere!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;My requests for clarification on how email domain hijacking is not a &amp;quot;significant&amp;quot; security issue have, to date, received no response (after roughly 5 weeks)&lt;/strong&gt;. To be fair, I did not attempt to replicate the process outlined above (because everyone I know who used Google Domains had already left Squarespace and hijacking some random person&amp;#39;s domain sounds like actual, illegal hacking).&lt;/p&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Disclaimer: I&amp;#39;m not an email security expert (or even any kind of security researcher) and I don&amp;#39;t know how Squarespace and Mailgun are integrated.&lt;/p&gt;
&lt;p&gt;But &lt;strong&gt;I think any Squarespace domain with email forwarding &lt;em&gt;that is not linked to a Mailgun account&lt;/em&gt; could be ripe for phishing&lt;/strong&gt;. I even found that &lt;a href=&quot;https://www.reddit.com/r/gsuite/comments/1fcya1x/google_domains_squarespace_and_email_forwarding/&quot;&gt;someone else came to the same conclusion on Reddit six months ago&lt;/a&gt;. Squarespace assured me there is no problem, but provided no detail.&lt;/p&gt;
&lt;p&gt;Regardless, I moved my domain away from Squarespace (to Porkbun). It&amp;#39;s not like I &lt;em&gt;chose&lt;/em&gt; to use Squarespace in the first place--Google chose for me.&lt;/p&gt;
&lt;h1 id=&quot;corrections&quot;&gt;Corrections?&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;If you &lt;em&gt;are&lt;/em&gt; an email security expert and notice any mistakes in my understanding or logic above, &lt;em&gt;please&lt;/em&gt; email me at &lt;a href=&quot;mailto:log@schemescape.com&quot;&gt;log@schemescape.com&lt;/a&gt;!&lt;/strong&gt; I would love both to be wrong (because then there&amp;#39;s not a problem) and to be corrected (so I can learn).&lt;/p&gt;
</content>
</entry>
<entry>
<title>Farewell to a netbook</title>
<id>https://log.schemescape.com/posts/hardware/farewell-to-a-netbook.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/hardware/farewell-to-a-netbook.html"/>
<updated>2025-03-04T00:00:00.000Z</updated>
<summary type="text">Remembering a forgotten device class that actually aligned with my needs.</summary>
<content type="html">&lt;p&gt;Today, I bid farewell to my &lt;a href=&quot;https://en.wikipedia.org/wiki/Dell_Inspiron_Mini_Series#Dell_Inspiron_Mini_(1018)&quot;&gt;Dell Inspiron Mini 1018&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;netbooks&quot;&gt;Netbooks&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://hackaday.com/2020/06/04/netbooks-the-form-factor-time-forgot/&quot;&gt;Netbooks enjoyed a meteoric rise and fall&lt;/a&gt; in the late 2000s and early 2010s. Basically, they were minimally viable laptops that were maximally affordable. For anyone who wanted a cheapo laptop, they were great! Sure, they were slow, and cramped, and slow. But they were cheap!&lt;/p&gt;
&lt;p&gt;Actually, that&amp;#39;s not fair. Netbooks were slower than their contemporaries, but anything clocked over 1 GHz isn&amp;#39;t &amp;quot;slow&amp;quot;. That still should be enough for most reasonable workloads, if not for bloat. But I digress.&lt;/p&gt;
&lt;h1 id=&quot;personal-history&quot;&gt;Personal history&lt;/h1&gt;
&lt;p&gt;I don&amp;#39;t specifically recall when I picked up my netbook, but it was probably in 2010 or 2011. It came with a 1.66 GHz Intel Atom N455 processor, 1 GB of DDR3 RAM, and a spinning hard drive.&lt;/p&gt;
&lt;p&gt;It came preloaded with Windows 7 Starter, which ran... adequately. I used the netbook on the couch and it was pleasant. Just imagine a clunky tablet with a keyboard and no touchscreen.&lt;/p&gt;
&lt;p&gt;Then at some point, I realized that I didn&amp;#39;t really need a laptop, so I loaned it to someone else for work.&lt;/p&gt;
&lt;h2 id=&quot;end-of-life&quot;&gt;End of life&lt;/h2&gt;
&lt;p&gt;Later, I recovered the device and I updated the operating system to Windows 10. Big mistake. Windows 10 performance on this device was abysmal. It took nearly one full minute to open a web browser. It turns out that a 1 GB of RAM is woefully insufficient for Windows 10. Instead of being pleasant, the device became frustrating. Oh well, I still didn&amp;#39;t &lt;em&gt;really&lt;/em&gt; need a laptop, so I stuck it in a closet and forgot about it.&lt;/p&gt;
&lt;p&gt;That could have been the end.&lt;/p&gt;
&lt;h2 id=&quot;rebirth&quot;&gt;Rebirth&lt;/h2&gt;
&lt;p&gt;Eventually, 2023 rolled around, and &lt;a href=&quot;https://log.schemescape.com/posts/hardware/../programming-languages/minimal-dev-env.html&quot;&gt;I was pining for simpler times&lt;/a&gt;. Why do we keep buying faster computers that mostly perform the same functions as their ancestors? (This was before Windows 11&amp;#39;s TPM 2.0 requirement.) After experimenting with an original Raspberry Pi B (now &lt;em&gt;those&lt;/em&gt; are slow!) I pulled the netbook back out of my closet and &lt;a href=&quot;https://log.schemescape.com/posts/hardware/../programming-languages/minimal-dev-env-4.html&quot;&gt;set it up as a minimal development environment&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Unlike Windows 10, Linux scales down fairly nicely to moderately old hardware. Using Alpine Linux, I was able to setup a comfortable terminal-only development environment for C. Using the w3m browser, I was able to read &lt;a href=&quot;https://gigamonkeys.com/book/&quot;&gt;Practical Common Lisp&lt;/a&gt; so that I could &lt;a href=&quot;https://log.schemescape.com/posts/hardware/../programming-languages/learning-lisp-in-2023.html&quot;&gt;test out REPL-driven programming in Lisp&lt;/a&gt;. Almost all Common Lisp code I&amp;#39;ve ever written was authored in Emacs on this junky old netbook--and it never felt slow!&lt;/p&gt;
&lt;h2 id=&quot;the-net&quot;&gt;The Net&lt;/h2&gt;
&lt;p&gt;Unfortunately, 1 GB of RAM isn&amp;#39;t sufficient for browsing many modern web sites. As much as I enjoy terminal mode browsers, having proportional fonts, colors, and a mouse are convenient. Dillo and NetSurf can help, but many sites require JavaScript, and sandboxing the enormous JavaScript runtime is just no longer possible on a 1 GB device.&lt;/p&gt;
&lt;p&gt;Despite being &lt;em&gt;built&lt;/em&gt; to &amp;quot;surf the net&amp;quot;, most netbooks can&amp;#39;t keep up with the modern web. I&amp;#39;m not happy about this realization, but that doesn&amp;#39;t make it any less true.&lt;/p&gt;
&lt;h2 id=&quot;last-gasp&quot;&gt;Last gasp&lt;/h2&gt;
&lt;p&gt;If there&amp;#39;s one saving grace, it&amp;#39;s that many netbooks were built with commodity parts that could theoretically be upgraded. In fact, my netbook could accept a solid-state drive and probably at least 4 GB of RAM. In my case, the hard drive and (single) RAM slot could be accessed by removing the plastic shell and the keyboard. Unfortunately, I learned that my particular netbook has a fickle memory slot: it will only accept &amp;quot;full power&amp;quot; DDR3 RAM--multiple &amp;quot;low power&amp;quot; RAM sticks I plugged in failed to work.&lt;/p&gt;
&lt;p&gt;Sadly, numerous trial-and-error RAM surgeries appear to have loosened the keyboard&amp;#39;s ribbon connection to the point that it seems unstable. It&amp;#39;s a sad day, but I need to lay this netbook to rest.&lt;/p&gt;
&lt;h1 id=&quot;the-future&quot;&gt;The future&lt;/h1&gt;
&lt;p&gt;Are my netbook days over? Maybe not! At some unknown point in the past, I had acquired a second netbook: an &lt;a href=&quot;https://en.wikipedia.org/wiki/Asus_EeeBook&quot;&gt;Asus EeeBook X205&lt;/a&gt;. It&amp;#39;s not upgradable, but it&amp;#39;s already equipped with 2 GB of RAM. I&amp;#39;m sure the puny 32 GB hard drive will become a problem at some point, but I&amp;#39;m going to throw Linux on and see what happens--it&amp;#39;s not like there&amp;#39;s enough space to install Windows 10 updates anyway!&lt;/p&gt;
&lt;p&gt;So there you go: my personal netbook history.&lt;/p&gt;
</content>
</entry>
<entry>
<title>Minimal IRC server from scratch in Python</title>
<id>https://log.schemescape.com/posts/diy/irc-server-in-python.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/diy/irc-server-in-python.html"/>
<updated>2025-02-17T00:00:00.000Z</updated>
<summary type="text">The obvious alternative to using Discord is to write and host my own IRC server!</summary>
<content type="html">&lt;p&gt;This is the story of me prototyping a &lt;a href=&quot;https://github.com/jaredkrinke/pirc&quot;&gt;minimal IRC server in Python&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The server is currently running (unencrypted/&lt;code&gt;-notls&lt;/code&gt;) on &lt;code&gt;irc.schemescape.com&lt;/code&gt; port 6667 (make sure to &lt;code&gt;/join #general&lt;/code&gt;).&lt;/p&gt;
&lt;h1 id=&quot;discord&quot;&gt;Discord&lt;/h1&gt;
&lt;p&gt;Discord is the Electron of chat:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It has the features people want&lt;/li&gt;
&lt;li&gt;It just works&lt;/li&gt;
&lt;li&gt;(Almost) Everyone uses it&lt;/li&gt;
&lt;li&gt;...and &lt;strong&gt;it&amp;#39;s completely unusable on the &lt;a href=&quot;https://log.schemescape.com/posts/diy/../programming-languages/minimal-dev-env-4.html&quot;&gt;old&lt;/a&gt;, &lt;a href=&quot;https://log.schemescape.com/posts/diy/../programming-languages/minimal-dev-env-3.html&quot;&gt;slow&lt;/a&gt; computers I toy with&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are several open source alternatives to Discord, including &lt;a href=&quot;https://revolt.chat/&quot;&gt;Revolt&lt;/a&gt; and &lt;a href=&quot;https://gitter.im/&quot;&gt;Gitter&lt;/a&gt;. Their flagship clients look heavyweight, but &lt;strong&gt;the beauty of open source is that there&amp;#39;s almost always an alternative terminal client&lt;/strong&gt;. I&amp;#39;ll investigate those in time. There&amp;#39;s also a decentralized option, &lt;a href=&quot;https://matrix.org/&quot;&gt;Matrix&lt;/a&gt;, which apparently has more than 100 million users. Uh, wow. &lt;strong&gt;I should probably try Matrix!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;But I didn&amp;#39;t realize Matrix had so many users at the time, so I decided to instead try a chat protocol that was &lt;em&gt;designed&lt;/em&gt; for old computers.&lt;/p&gt;
&lt;h1 id=&quot;internet-relay-chat&quot;&gt;Internet Relay Chat&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/IRC&quot;&gt;Wikipedia says IRC was created in 1988&lt;/a&gt;. I haven&amp;#39;t used IRC much and, when I have, I found it to be unapproachable.&lt;/p&gt;
&lt;h2 id=&quot;problems-with-irc&quot;&gt;Problems with IRC&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;There are &lt;strong&gt;commands you have to remember&lt;/strong&gt; (and any typo might send your flawed command line straight into the chat window for all to see)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;All IRC servers I&amp;#39;ve used broadcast your hostname when you connect&lt;/strong&gt;, unless you setup an account (&lt;em&gt;this guy uses Comcast!!!&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;With IRC, &lt;strong&gt;you generally only receive messages while online&lt;/strong&gt;, so you have to stay connected (or use a &amp;quot;bouncer&amp;quot;) if you want to actually see responses&lt;/li&gt;
&lt;li&gt;There isn&amp;#39;t a convenient, free iOS app for IRC, so IRC basically doesn&amp;#39;t exist for many people&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I feel like most of these limitations could be easily overcome.&lt;/p&gt;
&lt;h2 id=&quot;solving-ircs-problems&quot;&gt;Solving IRC&amp;#39;s problems&lt;/h2&gt;
&lt;p&gt;Obvious solutions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Have actual UI for commands&lt;/strong&gt;, instead of relying on perfectly-entered text commands&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hide hostnames by default&lt;/strong&gt; (at least from non-operators)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Store past messages&lt;/strong&gt; in a sequential database and allow clients to request old messages -- note: this seems ripe for AI scraper abuse, and it would require opt-in protocol changes&lt;/li&gt;
&lt;li&gt;Build a simple web client, optionally create native phone apps, and, of course, supply a lightweight TUI!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once you throw in account management and privacy controls, this could get out of hand quickly. And &lt;strong&gt;Matrix already exists and has probably solved these problems&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;not-solving-ircs-problems&quot;&gt;&lt;em&gt;Not&lt;/em&gt; solving IRC&amp;#39;s problems&lt;/h2&gt;
&lt;p&gt;My original motivation for investigating chat apps was to see what it would take to setup my own little chat room. I&amp;#39;m still not convinced I &lt;em&gt;need&lt;/em&gt; a chat room, and I&amp;#39;m almost certain it wouldn&amp;#39;t get much use, so let&amp;#39;s cut some corners:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bridging multiple servers? Who cares!&lt;/li&gt;
&lt;li&gt;Encryption and user accounts? Not needed, since it&amp;#39;s just for fun!&lt;/li&gt;
&lt;li&gt;Tracking and querying old messages? Maybe just cache the last 10!&lt;/li&gt;
&lt;li&gt;Instead of building any apps, just reuse existing IRC clients!&lt;/li&gt;
&lt;li&gt;Operators? Probably a good idea, but not implemented&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I don&amp;#39;t know if worse is &lt;em&gt;better&lt;/em&gt;, but it&amp;#39;s certainly &lt;em&gt;easier&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;And thus, &lt;strong&gt;&lt;a href=&quot;https://github.com/jaredkrinke/pirc&quot;&gt;pirc&lt;/a&gt;&lt;/strong&gt; was born.&lt;/p&gt;
&lt;h2 id=&quot;pirc&quot;&gt;pirc&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/jaredkrinke/pirc&quot;&gt;pirc&lt;/a&gt;&lt;/strong&gt; is basically a learning experiment to see how simple an IRC server can be. &lt;strong&gt;The entire server is in a single ~350 line Python file, with no dependencies beyond the Python standard library&lt;/strong&gt;. The code uses a minimum of abstraction (most of the server is one big &lt;code&gt;match&lt;/code&gt; statement). It is almost certainly &lt;em&gt;not&lt;/em&gt; spec-compliant (since I couldn&amp;#39;t actually determine &lt;em&gt;which&lt;/em&gt; IRC spec to work off of--IRC has evolved organically, for better or worse), but it seems to work with &lt;a href=&quot;https://hexchat.github.io/&quot;&gt;HexChat&lt;/a&gt;, &lt;a href=&quot;https://irssi.org/&quot;&gt;Irssi&lt;/a&gt;, and &lt;a href=&quot;https://weechat.org/&quot;&gt;WeeChat&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The code is rough, but should be readable, so I won&amp;#39;t attempt to explain it here. Here are some things I learned along the way:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python&amp;#39;s &lt;code&gt;socketserver&lt;/code&gt; module doesn&amp;#39;t seem to have a simple way to detect when clients disconnect (so I switched to the &lt;code&gt;selectors&lt;/code&gt; module instead)&lt;/li&gt;
&lt;li&gt;In Python, &lt;code&gt;textwrap.wrap(&amp;quot;&amp;quot;)&lt;/code&gt; returns &lt;code&gt;[]&lt;/code&gt; instead of &lt;code&gt;[&amp;quot;&amp;quot;]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;I still think IRC should &lt;em&gt;not&lt;/em&gt; broadcast hostnames by default (at least to non-operators)&lt;/li&gt;
&lt;li&gt;IRC clients send all commands in CAPITAL letters (e.g. &lt;code&gt;JOIN&lt;/code&gt;), &lt;em&gt;except&lt;/em&gt; the &amp;quot;message of the day&amp;quot; command (&lt;code&gt;motd&lt;/code&gt;), which is sent in lowercase (why!?)&lt;/li&gt;
&lt;li&gt;To my surprise, private messages and messages sent to channels are both &lt;code&gt;PRIVMSG&lt;/code&gt; commands (just directed to a channel instead of a nickname)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;test-server&quot;&gt;Test server&lt;/h1&gt;
&lt;p&gt;A test server is currently running (unencrypted/&lt;code&gt;-notls&lt;/code&gt;) on &lt;code&gt;irc.schemescape.com&lt;/code&gt; port 6667 (make sure to &lt;code&gt;/join #general&lt;/code&gt;).&lt;/p&gt;
</content>
</entry>
<entry>
<title>Static site generators vs. build tools</title>
<id>https://log.schemescape.com/posts/static-site-generators/ssg-vs-build-tool.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/static-site-generators/ssg-vs-build-tool.html"/>
<updated>2025-02-15T00:00:00.000Z</updated>
<summary type="text">This is a quick discussion of the differences between static site generators and build tools.</summary>
<content type="html">&lt;p&gt;Static site generators (like &lt;a href=&quot;https://gohugo.io/&quot;&gt;Hugo&lt;/a&gt;, &lt;a href=&quot;https://jaredkrinke.github.io/md2blog/&quot;&gt;md2blog&lt;/a&gt;, or my latest fascination, &lt;a href=&quot;https://www.getblades.org/&quot;&gt;Blades&lt;/a&gt;) read input (often Markdown files) and produce output (HTML). Build tools (like &lt;a href=&quot;https://en.wikipedia.org/wiki/Make_(software)&quot;&gt;Make&lt;/a&gt;) read input and produce output (or run tools that do so).&lt;/p&gt;
&lt;p&gt;Static site generators and build tools sound similar. What makes them different?&lt;/p&gt;
&lt;h1 id=&quot;differences&quot;&gt;Differences&lt;/h1&gt;
&lt;p&gt;Here are some general differences:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Delegation&lt;/th&gt;
&lt;th&gt;Build graph&lt;/th&gt;
&lt;th&gt;Rebuilds&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Static site generators&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Self-contained, no external tools&lt;/td&gt;
&lt;td&gt;Inputs are discovered and dynamic outputs are supported&lt;/td&gt;
&lt;td&gt;Rebuilds restart from scratch&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Build tools&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Delegate compilation to external tools&lt;/td&gt;
&lt;td&gt;Inputs and outputs are prescriptively listed&lt;/td&gt;
&lt;td&gt;Intermediate objects are cached to the file system, enabling fast incremental rebuilds&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;Let&amp;#39;s consider these each in turn.&lt;/p&gt;
&lt;h2 id=&quot;delegation&quot;&gt;Delegation&lt;/h2&gt;
&lt;p&gt;Build tools (like Make) usually delegate processing to external tools (like a C compiler). &lt;strong&gt;This makes build tools more generic&lt;/strong&gt; (they can support multiple languages). Static site generators are less flexible (usually only supporting one or two types of input), so there isn&amp;#39;t much motivation to extract processing into a separate tool.&lt;/p&gt;
&lt;h2 id=&quot;build-graph&quot;&gt;Build graph&lt;/h2&gt;
&lt;p&gt;Build tools are generally used to produce specific artifacts that are known ahead of time. Although it&amp;#39;s possible to do so, I can&amp;#39;t think of very many cases where you&amp;#39;d want a build tool to enumerate arbitrary files and producing unknown (or unexpected) outputs.&lt;/p&gt;
&lt;p&gt;On the other hand, &lt;strong&gt;it&amp;#39;s more convenient to author a few Markdown files and then have a static site generator automatically find them and rebuild the site&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;rebuilds&quot;&gt;Rebuilds&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Because compilers are often slow, it is frequently important for build tools to cache intermediate objects to the file system, to avoid recompiling unchanged items&lt;/strong&gt;. Processing Markdown and generating HTML is generally fast, so there&amp;#39;s less need to cache intermediate data.&lt;/p&gt;
&lt;p&gt;Additionally, incremental rebuilds &lt;em&gt;require&lt;/em&gt; the build graph to be easy to compute ahead of time. Now, I don&amp;#39;t see a reason why static site generators &lt;em&gt;couldn&amp;#39;t&lt;/em&gt; infer (and cache) a build graph to support incremental rebuilds (in fact, I &lt;a href=&quot;https://log.schemescape.com/posts/static-site-generators/lisp-ssg.html&quot;&gt;prototyped a generic static site generator with accurate incremental rebuilds&lt;/a&gt;... &lt;a href=&quot;https://log.schemescape.com/posts/static-site-generators/speeding-up-rebuilds-2.html&quot;&gt;twice&lt;/a&gt;), but it&amp;#39;s not as urgent of a concern for static site generators since building static sites is generally quick (&lt;a href=&quot;https://log.schemescape.com/posts/static-site-generators/speeding-up-rebuilds.html&quot;&gt;unless you&amp;#39;re on slow hardware&lt;/a&gt;).&lt;/p&gt;
&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;
&lt;p&gt;If I had to distill my thoughts into one sentence, I&amp;#39;d say that the build graph is the essential part: &lt;strong&gt;static site generators discover their inputs and produce arbitrary outputs whereas build tools know their outputs ahead of time&lt;/strong&gt;. Oh, and static site generators produce HTML instead of programs, obviously.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m sure there are exceptions, and you could argue that static site generators are a subset of build tools, but I&amp;#39;m going to dogmatically stick to the bolded claim above.&lt;/p&gt;
</content>
</entry>
<entry>
<title>Minimal alerting on Linux for hobby projects</title>
<id>https://log.schemescape.com/posts/linux/minimal-alerting.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/linux/minimal-alerting.html"/>
<updated>2025-02-10T00:00:00.000Z</updated>
<summary type="text">Hacking together the simplest real-time notifications for hobby projects.</summary>
<content type="html">&lt;p&gt;Occasionally, I have a need for real-time notifications for hobby projects. For example, one time I made a multi-player word scramble game for a game jam, and I wanted to be notified when people connected to the game (so that I could ensure there was at least one worthy opponent).&lt;/p&gt;
&lt;p&gt;This post covers a (terrible) minimal scheme for setting up these notifications.&lt;/p&gt;
&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;
&lt;p&gt;At a high level, here are the things that need to be built:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Some way to detect relevant events&lt;/li&gt;
&lt;li&gt;Some way to configure/filter events&lt;/li&gt;
&lt;li&gt;Some way to &amp;quot;debounce&amp;quot; events (so I don&amp;#39;t get a million notifications)&lt;/li&gt;
&lt;li&gt;Some way to deliver the notification&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The simplest approach is to just base everything on text files. Let&amp;#39;s get started!&lt;/p&gt;
&lt;h1 id=&quot;detecting-relevant-events&quot;&gt;Detecting relevant events&lt;/h1&gt;
&lt;p&gt;There&amp;#39;s no shortcut here. Since I&amp;#39;d like everything to be text-based, I need to instrument my project with text logging. For the game example, I needed to log a message when someone connected to the game server.&lt;/p&gt;
&lt;p&gt;For my current (unannounced) project, I&amp;#39;m using Python&amp;#39;s built-in logging library, with an obvious string (&amp;quot;ERROR&amp;quot;).&lt;/p&gt;
&lt;p&gt;Redirecting to a file is sufficient:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;python&lt;/span&gt; app.&lt;span class=&quot;hljs-keyword&quot;&gt;py&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&amp;gt;&amp;amp;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; |tee &lt;span class=&quot;hljs-built_in&quot;&gt;log&lt;/span&gt;.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;2&amp;gt;&amp;amp;1&lt;/code&gt; ensures I get both &amp;quot;standard output&amp;quot; and &amp;quot;standard error&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tee&lt;/code&gt; writes output to a file (&amp;quot;log.txt&amp;quot; in this case) and also displays it (for convenience)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;configuringfiltering-events&quot;&gt;Configuring/filtering events&lt;/h1&gt;
&lt;p&gt;Since everything is text, we can just match the live log file for a specific string using &lt;code&gt;tail -c 0 -f&lt;/code&gt; (&lt;code&gt;-f&lt;/code&gt; to follow the file and &lt;code&gt;-c 0&lt;/code&gt; to only track new additions to the file) and &lt;code&gt;grep&lt;/code&gt; (for string searching). Note that there is one trick: &lt;strong&gt;grep needs to search one line at a time, as input arrives&lt;/strong&gt;, using the &lt;code&gt;--line-buffered&lt;/code&gt; flag:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tail -c &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; -f &lt;span class=&quot;hljs-built_in&quot;&gt;log&lt;/span&gt;.txt |grep --line-buffered -i &lt;span class=&quot;hljs-built_in&quot;&gt;error&lt;/span&gt; &amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;errors&lt;/span&gt;.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that I redirect the matches to &amp;quot;errors.txt&amp;quot;.&lt;/p&gt;
&lt;h1 id=&quot;debouncing-events&quot;&gt;Debouncing events&lt;/h1&gt;
&lt;p&gt;Now comes the secret sauce.&lt;/p&gt;
&lt;p&gt;One issue with alerts is that they often arrive in bursts. Rather than get hit with an avalanche of alerts, it&amp;#39;s helpful to &amp;quot;debounce&amp;quot; alerts by limiting the alerts to, say, at most one every 15 minutes (or probably even less frequent).&lt;/p&gt;
&lt;p&gt;My original solution to this relied on a bunch of custom code, but it turns out that you can build a really simple solution using &lt;code&gt;inotifywait&lt;/code&gt; (from &lt;code&gt;inotify-tools&lt;/code&gt; on Debian) and a trivial shell script. I named the script &amp;quot;ow.sh&amp;quot; (for &amp;quot;on write&amp;quot;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class=&quot;hljs-comment&quot;&gt;# ow.sh (&amp;quot;on write&amp;quot;)&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;# This is a script to &amp;quot;debounce&amp;quot; commands that run when a file/directory is&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;# modified. The command is only run at most every TIMESPAN amount of time&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;# (TIMESPAN format is the same as the sleep command, e.g. 10s, 1m).&lt;/span&gt;

&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; [ &lt;span class=&quot;hljs-variable&quot;&gt;$#&lt;/span&gt; -le 3 ]; &lt;span class=&quot;hljs-keyword&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; USAGE: &lt;span class=&quot;hljs-variable&quot;&gt;$0&lt;/span&gt; TARGET TIMESPAN COMMAND
    &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt;
    &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;Example: &lt;span class=&quot;hljs-variable&quot;&gt;$0&lt;/span&gt; foo.log 15m wall &amp;#x27;Alert!!!&amp;#x27;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;hljs-built_in&quot;&gt;exit&lt;/span&gt; 1
&lt;span class=&quot;hljs-keyword&quot;&gt;fi&lt;/span&gt;

target=&lt;span class=&quot;hljs-variable&quot;&gt;$1&lt;/span&gt;
delay=&lt;span class=&quot;hljs-variable&quot;&gt;$2&lt;/span&gt;
&lt;span class=&quot;hljs-built_in&quot;&gt;shift&lt;/span&gt; 2

&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; inotifywait -qq &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;&lt;span class=&quot;hljs-variable&quot;&gt;$target&lt;/span&gt;&amp;quot;&lt;/span&gt;; &lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;&lt;span class=&quot;hljs-variable&quot;&gt;$@&lt;/span&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;hljs-built_in&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;&lt;span class=&quot;hljs-variable&quot;&gt;$delay&lt;/span&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All this script does is wait for a file or directory to be modified, run the command, and then sleep the specified amount of time.&lt;/p&gt;
&lt;p&gt;Example usage:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;ow.sh errors.txt 1m &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;Oh no! An alert!&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Watch &amp;quot;errors.txt&amp;quot;&lt;/li&gt;
&lt;li&gt;Debounce to at most every 1 minute (&lt;code&gt;1m&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;And run the rest of the command line (&lt;code&gt;echo &amp;quot;Oh no! An alert!&amp;quot;&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;delivering-notifications&quot;&gt;Delivering notifications&lt;/h1&gt;
&lt;p&gt;The last step is to actually deliver notifications. How this is done depends heavily on the environment where the monitoring is happening and where the notifications need to be received.&lt;/p&gt;
&lt;h2 id=&quot;local-desktop&quot;&gt;Local desktop&lt;/h2&gt;
&lt;p&gt;If monitoring is happening locally on a full-blown Linux desktop computer, this could be as simple as using &lt;code&gt;notify-send&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;ow.sh errors.txt 15m notify-send &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;Oh no, an alert!&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;remote-server&quot;&gt;Remote server&lt;/h2&gt;
&lt;p&gt;If monitoring is happening on a remote server, then it&amp;#39;s mostly a matter of pulling in the remote output somehow. This can be done using SSH, &lt;code&gt;netcat&lt;/code&gt;, etc.&lt;/p&gt;
&lt;p&gt;The simplest approach I&amp;#39;ve found is to just tail the remote file locally. So I run the same command &lt;strong&gt;on the server&lt;/strong&gt;, same as above:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;tail&lt;/span&gt; -c 0 -f log.txt |grep --line-buffered -i error &amp;gt; errors.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then &lt;strong&gt;on my local desktop environment&lt;/strong&gt; I tail the remote file using SSH and write to a local file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;ssh server &lt;span class=&quot;hljs-built_in&quot;&gt;tail&lt;/span&gt; -c 0 -f /home/user/errors.txt &amp;gt; remote-errors.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that the &lt;code&gt;tail -c 0 -f /home/user/errors.txt&lt;/code&gt; part runs on the server and the &lt;code&gt;&amp;gt; re.txt&lt;/code&gt; part runs locally. Finally, I can use the debouncing script and &lt;code&gt;notify-send&lt;/code&gt;, as before:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;ow.sh remote-errors.txt 15m notify-send &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;Oh no, an alert!&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;phone-notifications&quot;&gt;Phone notifications&lt;/h2&gt;
&lt;p&gt;Phone notifications are where my knowledge runs out. I don&amp;#39;t know the best way to send notifications to a phone, especially in a self-hosted way. In the past, I&amp;#39;ve relied on free tiers of paid services, but I&amp;#39;m hopeful I can eventually figure out something that is fully self-hosted (except for the app itself and associated notification infrastructure).&lt;/p&gt;
&lt;p&gt;Here are a few ideas:&lt;/p&gt;
&lt;h3 id=&quot;ifttt&quot;&gt;IFTTT&lt;/h3&gt;
&lt;p&gt;(Edit: IFTTT no longer supports phone notifications via webhook on the free plan.)&lt;/p&gt;
&lt;h3 id=&quot;ntfysh&quot;&gt;ntfy.sh&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://ntfy.sh/&quot;&gt;ntfy.sh&lt;/a&gt; is an awesome service that allows sending phone notifications without even signing up for an account. Don&amp;#39;t forget to donate!&lt;/p&gt;
&lt;h3 id=&quot;matrix&quot;&gt;Matrix&lt;/h3&gt;
&lt;p&gt;I strongly suspect there is some way to use &lt;a href=&quot;https://matrix.org/&quot;&gt;Matrix&lt;/a&gt; and an associated phone app for notifications, but I haven&amp;#39;t investigated this option yet.&lt;/p&gt;
&lt;h1 id=&quot;recap&quot;&gt;Recap&lt;/h1&gt;
&lt;p&gt;So there it is, alerting for hobby projects using only:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Output redirection&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tail&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grep&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Bash&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inotifywait&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sleep&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;SSH&lt;/li&gt;
&lt;li&gt;And &lt;code&gt;notify-send&lt;/code&gt; or some phone equivalent&lt;/li&gt;
&lt;/ul&gt;
</content>
</entry>
</feed>
