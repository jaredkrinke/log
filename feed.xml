<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Schemescape</title>
<id>https://log.schemescape.com/</id>
<link rel="self" href="https://log.schemescape.com/feed.xml"/>
<link rel="alternate" href="https://log.schemescape.com/"/>
<author>
<name>Schemescape</name>
</author>
<updated>2023-02-11T23:24:02.513Z</updated>

<entry>
<title>In search of a minimal development environment</title>
<id>https://log.schemescape.com/posts/programming-languages/minimal-dev-env.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/programming-languages/minimal-dev-env.html"/>
<updated>2023-02-11T00:00:00.000Z</updated>
<summary type="text">What would a minimal development environment look like? How small could it be?</summary>
<content type="html">&lt;p&gt;Feel free to &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/#the-plan&quot;&gt;skip over the obligatory whining about today&amp;#39;s bloat&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;back-in-my-day&quot;&gt;Back in my day...&lt;/h1&gt;
&lt;p&gt;I think the first computer I ever used was a &lt;a href=&quot;https://en.wikipedia.org/wiki/Commodore_64&quot;&gt;Commodore 64&lt;/a&gt;. Wikipedia tells me that it had a 1 MHz processor and 64 KB of RAM, all packed into an &amp;quot;obese keyboard&amp;quot; form factor. Despite being 100,000+ times slower (with a similar fraction of memory) compared to a modern computer, it could run a word processor, play games, and print documents.&lt;/p&gt;
&lt;p&gt;Later on, I remember installing Linux on a 1.44 MB floppy disk to turn an aging 486 computer into a network router. Even back then, that was impressive!&lt;/p&gt;
&lt;p&gt;A few years later, I remember working on a simple arcade game which used OpenGL for graphics... developed partly on a computer that was command line-only! I have fond memories of using &lt;a href=&quot;https://www.gnu.org/software/screen/&quot;&gt;GNU Screen&lt;/a&gt; and &lt;a href=&quot;https://www.vim.org/&quot;&gt;Vim&lt;/a&gt;, along with &lt;a href=&quot;https://en.wikipedia.org/wiki/Man_page&quot;&gt;man pages&lt;/a&gt;, to write the code. Aside: I remember using &lt;a href=&quot;https://en.wikipedia.org/wiki/Concurrent_Versions_System&quot;&gt;CVS&lt;/a&gt;, but &lt;em&gt;not&lt;/em&gt; fondly.&lt;/p&gt;
&lt;h1 id=&quot;contrast-with-today&quot;&gt;Contrast with today&lt;/h1&gt;
&lt;p&gt;Fast-forward to 2023, and I&amp;#39;ve been contemplating porting my &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/../game-development/sic-1.html&quot;&gt;single-instruction programming game&lt;/a&gt; to &lt;a href=&quot;https://www.electronjs.org/&quot;&gt;Electron&lt;/a&gt; (possibly the heaviest popular app framework of all time), to support Linux (and ideally macOS) builds on Steam.&lt;/p&gt;
&lt;p&gt;For the record, SIC-1 started out as a trim 25 KB zip file (although it has ballooned to 10 MB, mostly due to &lt;a href=&quot;https://en.wikipedia.org/wiki/Pulse-code_modulation&quot;&gt;PCM&lt;/a&gt; music). Of course, browsers provide a deceptive environment. With a few kilobytes of HTML, CSS, and JavaScript, you can build surprisingly complex (and fast) apps. Of course, the browser itself is hundreds of megabytes, so it&amp;#39;s actually a pretty hefty runtime. How hefty? Ask me after I use Electron.&lt;/p&gt;
&lt;p&gt;Is it any surprise I&amp;#39;m craving a bit of simplicity?&lt;/p&gt;
&lt;h1 id=&quot;the-plan&quot;&gt;The plan&lt;/h1&gt;
&lt;p&gt;So what am I going to do about bloat?&lt;/p&gt;
&lt;p&gt;This is probably a terrible idea, but I&amp;#39;d like to set up a minimal development environment. And I really do mean &amp;quot;minimal&amp;quot;, i.e.:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Command line only&lt;/li&gt;
&lt;li&gt;Runs acceptably on a slow computer (possibly a &lt;a href=&quot;https://en.wikipedia.org/wiki/Raspberry_Pi&quot;&gt;Raspberry Pi&lt;/a&gt; 1)&lt;/li&gt;
&lt;li&gt;Minimal disk footprint&lt;/li&gt;
&lt;li&gt;As full-featured as possible, given the previous constraints&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, &amp;quot;minimal disk footprint&amp;quot; and &amp;quot;as full-featured as possible&amp;quot; are opposing goals, so this plan isn&amp;#39;t well-defined--I&amp;#39;m content to just see where it leads me.&lt;/p&gt;
&lt;h1 id=&quot;the-software&quot;&gt;The software&lt;/h1&gt;
&lt;p&gt;I suspect the following software will play a part:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.alpinelinux.org/&quot;&gt;Alpine Linux&lt;/a&gt; or a minimal &lt;a href=&quot;https://www.debian.org/&quot;&gt;Debian&lt;/a&gt; installation (or &lt;a href=&quot;https://www.freebsd.org/&quot;&gt;FreeBSD&lt;/a&gt;? &lt;a href=&quot;https://minix3.org/&quot;&gt;MINIX 3&lt;/a&gt;? I&amp;#39;m open to suggestions)&lt;/li&gt;
&lt;li&gt;Vim (or &lt;a href=&quot;https://neovim.io/&quot;&gt;NeoVim&lt;/a&gt;?)&lt;/li&gt;
&lt;li&gt;GNU Screen (or &lt;a href=&quot;https://github.com/tmux/tmux&quot;&gt;tmux&lt;/a&gt;?)&lt;/li&gt;
&lt;li&gt;A terminal mode web browser (&lt;a href=&quot;https://lynx.browser.org/&quot;&gt;Lynx&lt;/a&gt;?)&lt;/li&gt;
&lt;li&gt;Maybe a terminal mode &lt;a href=&quot;https://en.wikipedia.org/wiki/RSS&quot;&gt;RSS&lt;/a&gt; reader or &lt;a href=&quot;https://mastodon.social/&quot;&gt;Mastodon&lt;/a&gt; client, just for fun&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;the-programming-language&quot;&gt;The programming language&lt;/h1&gt;
&lt;p&gt;You may note that I didn&amp;#39;t specify any compilers or build tools. That&amp;#39;s because I&amp;#39;d like to use this minimal environment to test out some of my &lt;a href=&quot;https://log.schemescape.com/posts/programming-languages/../programming-languages/future-proof-languages.html&quot;&gt;future-proof programming language candidates&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;#39;ll admit that it&amp;#39;s unreasonable to expect modern programming languages to support development on a Raspberry Pi, but that also means that I&amp;#39;ll be &lt;em&gt;unreasonably impressed&lt;/em&gt; if a programming language is useful in a ridiculously constrained environment like this.&lt;/p&gt;
&lt;h1 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h1&gt;
&lt;p&gt;Feel free to let me know if you have any suggestions or if you&amp;#39;ve attempted anything similar (or want to!). You can email me at any address at the &amp;quot;.com&amp;quot; address in the address bar.&lt;/p&gt;
&lt;p&gt;Wish me luck!&lt;/p&gt;
</content>
</entry>
<entry>
<title>SIC-1: A single-instruction programming game</title>
<id>https://log.schemescape.com/posts/game-development/sic-1.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/game-development/sic-1.html"/>
<updated>2022-12-06T00:00:00.000Z</updated>
<summary type="text">SIC-1 is a single-instruction (subleq) programming game that can be played via Steam or the browser.</summary>
<content type="html">&lt;p&gt;&lt;strong&gt;SIC-1&lt;/strong&gt; is a single-instruction (&lt;a href=&quot;https://esolangs.org/wiki/Subleq&quot;&gt;subleq&lt;/a&gt;) programming game with &amp;quot;zachlike&amp;quot; optimization leaderboards. It can be played here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://store.steampowered.com/app/2124440/SIC1/&quot;&gt;SIC-1 on Steam (Windows)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://jaredkrinke.itch.io/sic-1&quot;&gt;SIC-1 on itch.io (browser)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;background&quot;&gt;Background&lt;/h1&gt;
&lt;p&gt;This game originally started as an experiment to write a subleq assembler that supported labels. After creating the initial assembler, I was inspired by the &lt;a href=&quot;https://www.zachtronics.com/index.html&quot;&gt;Zachtronics&lt;/a&gt; game &lt;a href=&quot;https://www.zachtronics.com/tis-100/&quot;&gt;TIS-100&lt;/a&gt; to create a series of programming puzzles involving subleq.&lt;/p&gt;
&lt;p&gt;I mostly just wanted to learn for myself how to implement variables and functions in a subleq computer.&lt;/p&gt;
&lt;h2 id=&quot;prototype-and-initial-release&quot;&gt;Prototype and initial release&lt;/h2&gt;
&lt;p&gt;After getting thoroughly carried away, I ended up creating a service (initially using &lt;a href=&quot;https://www.sqlite.org/index.html&quot;&gt;SQLite&lt;/a&gt;, then later &lt;a href=&quot;https://firebase.google.com/docs/firestore/&quot;&gt;Firestore&lt;/a&gt; + &lt;a href=&quot;https://functions.netlify.com/&quot;&gt;Netlify Functions&lt;/a&gt;) for storing players&amp;#39; scores so that people could compete against one another to find the most efficient programs.&lt;/p&gt;
&lt;p&gt;I released the game (for free) in late 2019 on &lt;a href=&quot;https://itch.io/&quot;&gt;itch.io&lt;/a&gt; and it eventually took the top free spot on itch.io for the search term &amp;quot;zachlike&amp;quot;. Over the ensuing two years, the game was played thousands of times (although only roughly 1,000 people completed nontrivial puzzles). I was thrilled to hear from people I&amp;#39;d never met before that they loved the game.&lt;/p&gt;
&lt;h2 id=&quot;preparing-for-a-release-on-steam&quot;&gt;Preparing for a release on Steam&lt;/h2&gt;
&lt;p&gt;In the fall of 2022, after putting it off for far too long, I decided to start porting SIC-1 to Steam. I&amp;#39;d always wanted to release a game on Steam, and I thought Steam might provide a new audience for the game.&lt;/p&gt;
&lt;p&gt;Although Steam allows anyone to release a game (after paying the $100 Steam Direct fee), I wanted to improve the quality of the game so that it looked more like a real game instead of a prototype. This plan snowballed into multi-month effort that included learning many new skills and tools to add game features such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Music&lt;/li&gt;
&lt;li&gt;Sound effects&lt;/li&gt;
&lt;li&gt;Achievements&lt;/li&gt;
&lt;li&gt;A new narrative&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Despite being tedious at times, experimenting with things like creating music using the &lt;a href=&quot;https://en.wikipedia.org/wiki/Yamaha_DX7&quot;&gt;Yamaha DX7&lt;/a&gt;-inspired &lt;a href=&quot;https://asb2m10.github.io/dexed/&quot;&gt;dexed synth&lt;/a&gt; turned out to be surprisingly enjoyable. Having a goal in mind and a rough schedule motivated me to produce several tracks of music--something I&amp;#39;d never really done before.&lt;/p&gt;
&lt;p&gt;The most difficult decision I had to make was whether or not to try and charge for the game. In the end, I decided to keep the game free for a couple of reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It seemed unlikely I would sell enough copies to have a meaningful financial impact on my life&lt;/li&gt;
&lt;li&gt;I wanted as many people to play the game as possible, partly to ensure the leaderboards would have enough scores to spur competition&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;steam-release&quot;&gt;Steam release&lt;/h1&gt;
&lt;p&gt;Last Friday, I released SIC-1 on Steam.&lt;/p&gt;
&lt;p&gt;Although marketing is not my strong suit, I created a marketing plan with a list of ideas and a rough schedule. Unfortunately, my most promising marketing idea (sharing the game on a web site where esoteric programming languages are popular) garnered very little attention. In the end, the most impactful marketing for the game has simply been pushing the &amp;quot;release&amp;quot; button on Steam. In other words, my marketing efforts had negligible impact.&lt;/p&gt;
&lt;h1 id=&quot;near-term-goals&quot;&gt;Near-term goals&lt;/h1&gt;
&lt;p&gt;I&amp;#39;ve never been clear on what my goal was with developing this game. It&amp;#39;s morphed over time and included thoughts such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I just want to see if I can make a good game&lt;/li&gt;
&lt;li&gt;I&amp;#39;d like to see if there&amp;#39;s an audience for my work&lt;/li&gt;
&lt;li&gt;I&amp;#39;d like to have the experience of releasing a game, specifically on Steam&lt;/li&gt;
&lt;li&gt;I want people to enjoy something I&amp;#39;ve created&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For now, my only concrete goal is to &lt;strong&gt;get 10 reviews on Steam by the end of 2022&lt;/strong&gt;. I&amp;#39;m not sure if this threshold is used for free games, but I&amp;#39;ve heard that games need 10 reviews on Steam before they&amp;#39;re marked with &amp;quot;positive&amp;quot; (or &amp;quot;mixed&amp;quot; or &amp;quot;negative&amp;quot;) reviews.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: SIC-1 ended the month (and calendar year) with 8 reviews on Steam. That&amp;#39;s within striking distance of my goal of 10 reviews, so I&amp;#39;ll consider this goal to be &lt;em&gt;almost&lt;/em&gt; achieved.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Second Update&lt;/strong&gt;: SIC-1 hit 10 Steam reviews on January 18th! The amount of traffic to the Steam page has increased roughly 10x (the number of people &lt;em&gt;playing&lt;/em&gt; SIC-1 has not increased nearly as dramatically--but that&amp;#39;s ok, given that it&amp;#39;s a niche game).&lt;/p&gt;
&lt;h1 id=&quot;one-last-note&quot;&gt;One last note&lt;/h1&gt;
&lt;p&gt;That&amp;#39;s all for now. Wish me luck! And if you like programming games or are interested in subleq, please give SIC-1 a try on Steam:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://store.steampowered.com/app/2124440/SIC1/&quot;&gt;https://store.steampowered.com/app/2124440/SIC1/&lt;/a&gt;&lt;/p&gt;
</content>
</entry>
<entry>
<title>Porting a browser-based game to Steam (part 3)</title>
<id>https://log.schemescape.com/posts/game-development/browser-based-game-on-steam-3.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/game-development/browser-based-game-on-steam-3.html"/>
<updated>2022-11-17T00:00:00.000Z</updated>
<summary type="text">I ported a browser-based game to Steam using WebView2. This is an overview of what I learned in the process.</summary>
<content type="html">&lt;p&gt;In &lt;a href=&quot;https://log.schemescape.com/posts/game-development/browser-based-game-on-steam-2.html&quot;&gt;part 2&lt;/a&gt;, I decided to try using &lt;a href=&quot;https://developer.microsoft.com/en-us/microsoft-edge/webview2/&quot;&gt;WebView2&lt;/a&gt; to port my browser-based game to Steam (in order to avoid having to ship an entire Chrome/Electron runtime with my game).&lt;/p&gt;
&lt;p&gt;The good news is that it is indeed possible to ship an HTML/CSS/JavaScript-based game on Steam using WebView2. The bad news is that I ended up having to write a lot of integration code. I&amp;#39;ll probably never know how much time using &lt;a href=&quot;https://www.electronjs.org/&quot;&gt;Electron&lt;/a&gt;+&lt;a href=&quot;https://github.com/greenheartgames/greenworks&quot;&gt;Greenworks&lt;/a&gt; would have saved me, but I try not to dwell on sunk costs.&lt;/p&gt;
&lt;h1 id=&quot;finally-some-brief-answers&quot;&gt;Finally, some (brief) answers&lt;/h1&gt;
&lt;p&gt;Below is a categorized overview of the questions I had to answer on my journey to a (hopefully!) final Steam build of my WebView2-based game, along with brief answers.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m planning to write more in-depth answers in the future. For now, if you&amp;#39;re interested in more detail, send an email to any name at this domain.&lt;/p&gt;
&lt;h2 id=&quot;installation-environment&quot;&gt;Installation, environment&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Does WebView2 support Windows 7? What about 32-bit Windows?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Yes to both (use &lt;a href=&quot;https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/&quot;&gt;Win7 VMs&lt;/a&gt; for testing).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Can a Steam &lt;a href=&quot;https://partner.steamgames.com/doc/sdk/installscripts&quot;&gt;InstallScript&lt;/a&gt; install the WebView2 runtime successfully?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Yes: &lt;a href=&quot;https://github.com/jaredkrinke/sic1/blob/master/sic1/client/windows/webview2.vdf&quot;&gt;example&lt;/a&gt; (note: use your own app id!).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How do you disable F12 dev tools, context menus, etc.?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/windows/windows-app-sdk/api/win32/webview2/nf-webview2-icorewebview2settings-put_aredevtoolsenabled&quot;&gt;ICoreWebView2Settings::put_AreDevToolsEnabled&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How do you debug JavaScript code running in the WebView2 app?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Use VS Code&amp;#39;s path mapping option: &lt;a href=&quot;https://github.com/jaredkrinke/sic1/blob/master/.vscode/launch.json&quot;&gt;example&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How do you monitor your game for errors (both JavaScript and native)?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Use &lt;a href=&quot;https://sentry.io/welcome/&quot;&gt;Sentry&lt;/a&gt; or &lt;a href=&quot;https://backtrace.io/&quot;&gt;Backtrace&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;integrating-c-and-javascript&quot;&gt;Integrating C++ and JavaScript&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;What is WebView2&amp;#39;s threading model? What happens if the network connection is slow?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;All host object calls come in on your main thread, so you may want to move slow operations to a background (or thread pool) thread, and use the promise-wrapping technique mentioned below for providing asynchronous results.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How do I integrate native code and JavaScript?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Use &lt;a href=&quot;https://learn.microsoft.com/en-us/microsoft-edge/webview2/how-to/hostobject?tabs=win32cpp&quot;&gt;ICoreWebView2::AddHostObjectToScript&lt;/a&gt;, &lt;a href=&quot;https://github.com/jaredkrinke/sic1/blob/master/sic1/client/windows/dispatchable.h&quot;&gt;implement IDispatch&lt;/a&gt;, and &lt;a href=&quot;https://github.com/jaredkrinke/sic1/blob/master/sic1/client/windows/sic1.rc&quot;&gt;embed your type library&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How can you run save code when the user clicks the close button?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Put code in your WM_CLOSE handler.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How do you return a promise from a host object interface?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Not directly supported, but you can marshal the &lt;code&gt;resolve&lt;/code&gt; and &lt;code&gt;reject&lt;/code&gt; IDispatch interfaces from the &lt;code&gt;Promise&lt;/code&gt; constructor to your native code instead (&lt;a href=&quot;https://devblogs.microsoft.com/oldnewthing/20151021-00/?p=91311&quot;&gt;and even to another thread&lt;/a&gt;): &lt;a href=&quot;https://github.com/jaredkrinke/sic1/blob/master/sic1/client/windows/promisehandler.cpp&quot;&gt;example&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How do you marshal complex types between JavaScript and native code (e.g. for Steam Leaderboards)?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Pack them into flat arrays of values that are represented in native code as &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/win32/api/oaidl/ns-oaidl-safearray&quot;&gt;SAFEARRAY&lt;/a&gt; of &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/win32/winauto/variant-structure&quot;&gt;VARIANT&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;steam-integration&quot;&gt;Steam integration&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Is it trivial to take advantage of Steam&amp;#39;s support for cloud saves/syncing?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Nope. I periodically write localStorage to a file that Steam auto-cloud synchronizes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How do I test Steam Cloud saves?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Just delete the local save and let Steam restore it on launch.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How do you integrate Steam&amp;#39;s Callback and CallResult APIs with JavaScript?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;I did this using very careful multi-threaded code and the promise-wrapping idea from the previous bullet. I hope there&amp;#39;s a better way that I just haven&amp;#39;t found yet!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How do you deal with Steam API rate-limiting?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;With a &lt;a href=&quot;https://github.com/jaredkrinke/crs_queue&quot;&gt;coalescing, rate-limited, serializable/deserializable task queue&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Does the Steam Overlay work for WebView2-based games?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;No.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;miscellaneous&quot;&gt;Miscellaneous&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;How should fullscreen support work?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Must be handled by native code (otherwise &amp;quot;Esc&amp;quot; will always exit fullscreen).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How do you ensure your game can immediately start playing music, even before the user interacts with any HTML elements?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/windows/windows-app-sdk/api/win32/webview2/nf-webview2-icorewebview2environmentoptions-put_additionalbrowserarguments&quot;&gt;ICoreWebView2EnvironmentOptions::put_AdditionalBrowserArguments&lt;/a&gt; with &lt;code&gt;L&amp;quot;--autoplay-policy=no-user-gesture-required&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Do you need to explicitly move focus to the web view on launch?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Yes: &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/windows-app-sdk/api/win32/webview2/nf-webview2-icorewebview2controller-movefocus&quot;&gt;ICoreWebView2Controller::MoveFocus&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How do you ensure your game is not blurry on high DPI screens?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Project properties -&amp;gt; Configuration Properties -&amp;gt; Manifest Tool -&amp;gt; Input and Output -&amp;gt; DPI Awareness -&amp;gt; Per Monitor High DPI Aware.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
</entry>
<entry>
<title>Porting a browser-based game to Steam (part 2)</title>
<id>https://log.schemescape.com/posts/game-development/browser-based-game-on-steam-2.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/game-development/browser-based-game-on-steam-2.html"/>
<updated>2022-08-29T00:00:00.000Z</updated>
<summary type="text">I&apos;m continuing my research on porting a browser-based game to Steam. My plan is to directly use WebView2 on Windows.</summary>
<content type="html">&lt;p&gt;In &lt;a href=&quot;https://log.schemescape.com/posts/game-development/browser-based-game-on-steam.html&quot;&gt;part 1&lt;/a&gt;, I did some initial research into Steam&amp;#39;s support for hosting games that were originally browser-based. Now, I&amp;#39;m diving into the next level of detail.&lt;/p&gt;
&lt;h1 id=&quot;choosing-a-framework&quot;&gt;Choosing a framework&lt;/h1&gt;
&lt;p&gt;First, I needed to choose a framework for hosting my HTML and JavaScript. My criteria for choosing (roughly in priority order) were as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Supports Windows (because that is my initial target platform)&lt;/li&gt;
&lt;li&gt;Can interface with C++ APIs (namely the Steamworks API)&lt;/li&gt;
&lt;li&gt;Ships without a runtime &lt;em&gt;or&lt;/em&gt; the runtime is easy to install (via Steam)&lt;/li&gt;
&lt;li&gt;Lightweight (the web version is under 30 KB, compressed)&lt;/li&gt;
&lt;li&gt;As few dependencies as possible&lt;/li&gt;
&lt;li&gt;Uses a programming language I&amp;#39;m familiar with (or want to learn)&lt;/li&gt;
&lt;li&gt;Requires as few changes to the web app as possible&lt;/li&gt;
&lt;li&gt;Supports 32-bit Windows (my laptop--which I occasionally use--doesn&amp;#39;t support 64-bit Windows)&lt;/li&gt;
&lt;li&gt;Supports Linux and/or macOS (in case I decide to port the game to those platforms in the future)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are the frameworks I evaluated, along with some notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.electronjs.org/&quot;&gt;Electron&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;✔ Broadly used and supported&lt;/li&gt;
&lt;li&gt;✔ No runtime required&lt;/li&gt;
&lt;li&gt;✖ Bloated&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tauri.app/&quot;&gt;Tauri&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;✔ Lightweight&lt;/li&gt;
&lt;li&gt;✖ No out-of-the-box C++ support&lt;/li&gt;
&lt;li&gt;✖ Many, many dependencies, &lt;a href=&quot;https://tauri.app/about/architecture/#license&quot;&gt;with no official copyright notice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;✖ Requires WebView2 runtime on Windows&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://neutralino.js.org/&quot;&gt;Neutralinojs&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;✔ Lightweight&lt;/li&gt;
&lt;li&gt;✖ No out-of-the-box C++ support (I think)&lt;/li&gt;
&lt;li&gt;✖ Requires WebView2 runtime on Windows&lt;/li&gt;
&lt;li&gt;✖ Doesn&amp;#39;t appear to support e.g. &lt;code&gt;localStorage&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;✖ &lt;a href=&quot;https://neutralino.js.org/docs/distribution/overview&quot;&gt;No support for 32-bit Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.microsoft.com/en-us/microsoft-edge/webview2/&quot;&gt;WebView2&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;✔ Natively supports C++&lt;/li&gt;
&lt;li&gt;✔ Lightweight&lt;/li&gt;
&lt;li&gt;✔ No other dependencies&lt;/li&gt;
&lt;li&gt;✔ Supports 32-bit Windows&lt;/li&gt;
&lt;li&gt;✖ Requires WebView2 runtime&lt;/li&gt;
&lt;li&gt;✖ Only supports Windows&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After my initial research, I decided that I&amp;#39;d like to avoid Electron, if possible, due to its large disk and memory footprint. All the remaining options use WebView2 on Windows, and a cursory glance made me think the WebView2 runtime could be installed via Steam without too much difficulty.&lt;/p&gt;
&lt;h2 id=&quot;tauri-it-is-right&quot;&gt;Tauri it is... right?&lt;/h2&gt;
&lt;p&gt;Given its impressive list of features (and supported platforms) and light weight, I decided to use Tauri... until I saw that &lt;a href=&quot;https://app.fossa.com/projects/git%2Bgithub.com%2Ftauri-apps%2Ftauri/refs/branch/dev/0668dd42204b163f11aaf31f45106c8551f15942/preview&quot;&gt;Tauri had over 1,200 dependencies&lt;/a&gt;. If Tauri provided a &amp;quot;third party copyright notice&amp;quot; file I could just paste into my app, I might have continued on, but the &lt;a href=&quot;https://tauri.app/about/architecture/#license&quot;&gt;Tauri license page&lt;/a&gt; only has this unhelpful notice: &amp;quot;it is your responsibility to verify that you are complying with all upstream licenses.&amp;quot; I feel like I&amp;#39;m becoming more disillusioned with open source ecosystems by the day, but if I can&amp;#39;t even enumerate the correct licenses for a library (let alone audit any of the code!), I probably shouldn&amp;#39;t be using it (especially if I want to keep the door open to selling my game in the future).&lt;/p&gt;
&lt;h2 id=&quot;webview2-it-is-hopefully&quot;&gt;WebView2 it is... hopefully&lt;/h2&gt;
&lt;p&gt;After dismissing Electron and Tauri, I decided to just go with the simplest solution for Windows, which is to just use WebView2 directly.&lt;/p&gt;
&lt;p&gt;The biggest downside of this approach is that I likely won&amp;#39;t be able to port the game to Linux or macOS. This isn&amp;#39;t a justification for only supporting Windows, but I don&amp;#39;t have a Linux machine handy to see if Wine or Proton can handle WebView2 (unlikely, but who knows), and the last Mac I owned was a Macintosh Plus, so I&amp;#39;ve never actually done any development on macOS. At least players on those platforms can just play the browser-based version of the game!&lt;/p&gt;
&lt;h1 id=&quot;answering-some-questions&quot;&gt;Answering some questions&lt;/h1&gt;
&lt;p&gt;I enumerated some &lt;a href=&quot;https://log.schemescape.com/posts/game-development/browser-based-game-on-steam.html#open-questions&quot;&gt;open questions in the last post&lt;/a&gt;, and I can start answering some of them now:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Which browser-to-native framework should I use (Electron, Tauri, WebView2, etc.)?&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Answer&lt;/strong&gt;: WebView2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Does Steam have built-in support for browser-based titles? Are any of the above frameworks in the Steamworks Common Redistributables package?&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Answer&lt;/strong&gt;: There is no built-in support for WebView2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Which platforms should I support?&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Answer&lt;/strong&gt;: Just Windows for now, ideally 32-bit and 64-bit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What&amp;#39;s required to take advantage of Steam&amp;#39;s support for cloud saves/syncing?&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Educated guess&lt;/strong&gt;: &lt;a href=&quot;https://partner.steamgames.com/doc/features/cloud#steam_auto-cloud&quot;&gt;Steam auto-cloud&lt;/a&gt; along with a &lt;a href=&quot;https://docs.microsoft.com/en-us/microsoft-edge/webview2/concepts/user-data-folder?tabs=win32&quot;&gt;custom WebView2 user data folder&lt;/a&gt; look promising&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How do I test Steam Cloud saves?&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Educated guess&lt;/strong&gt;: Steamworks provides &lt;a href=&quot;https://partner.steamgames.com/doc/features/cloud&quot;&gt;pre-release testing guidance for Steam Cloud&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are also some new questions to add to the list:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Can a Steam &lt;a href=&quot;https://partner.steamgames.com/doc/sdk/installscripts&quot;&gt;InstallScript&lt;/a&gt; install the WebView2 runtime successfully?&lt;/li&gt;
&lt;li&gt;How should fullscreen support work?&lt;/li&gt;
&lt;li&gt;How can Steam and browser-based leaderboards be shared/merged?&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;next-steps&quot;&gt;Next steps&lt;/h1&gt;
&lt;p&gt;I have a working proof-of-concept app based on WebView2, but my biggest concern is whether or not Steam&amp;#39;s &lt;a href=&quot;https://partner.steamgames.com/doc/sdk/installscripts&quot;&gt;InstallScript&lt;/a&gt; functionality can successfully install the WebView2 runtime. I don&amp;#39;t see any obvious reason this shouldn&amp;#39;t work, but given that deployment and configuration files have bitten me many times in the past, I&amp;#39;m eager to prototype this as soon as possible. If there&amp;#39;s a roadblock to using WebView2, I&amp;#39;d rather find it sooner than later.&lt;/p&gt;
</content>
</entry>
<entry>
<title>Testing out Zig... for C/C++ code... on Windows</title>
<id>https://log.schemescape.com/posts/programming-languages/compiling-cpp-for-windows-using-zig.html</id>
<link rel="alternate" href="https://log.schemescape.com/posts/programming-languages/compiling-cpp-for-windows-using-zig.html"/>
<updated>2022-08-13T00:00:00.000Z</updated>
<summary type="text">Can Zig save me from downloading multi-gigabyte SDKs just to build Windows programs?</summary>
<content type="html">&lt;p&gt;I briefly played around with Zig&amp;#39;s C/C++ compiler in the past. It&amp;#39;s a tidy ~60 MB download that can magically even cross-compile. I haven&amp;#39;t worked up the nerve to investigate the Zig &lt;em&gt;programming language&lt;/em&gt;, but its built-in C/C++ compiler impressed me.&lt;/p&gt;
&lt;p&gt;Now how far can I push it?&lt;/p&gt;
&lt;h2 id=&quot;aside-toolchain-bloat&quot;&gt;Aside: toolchain bloat&lt;/h2&gt;
&lt;p&gt;A good way to discourage me from testing out your software is to require a gigabyte (or more) download (and no, providing an installer that obscures the massive download is not a solution).&lt;/p&gt;
&lt;p&gt;The chief offender of inexplicably enormous downloads is, unfortunately, anything related to compiling software for Windows. Want to use the free edition of Microsoft Visual C? That will be at least 3 GB. How about a more modern language like C#? That&amp;#39;s 5 GB. Even non-Visual Studio C/C++ compilers tend to be hundreds of megabytes.&lt;/p&gt;
&lt;h1 id=&quot;hello-zig-c&quot;&gt;Hello, &lt;del&gt;Zig&lt;/del&gt; C!&lt;/h1&gt;
&lt;p&gt;First, here&amp;#39;s a trivial &amp;quot;hello world&amp;quot; program:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;hljs-type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;char&lt;/span&gt;** argv)&lt;/span&gt; {
    &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;Hello, C!&amp;quot;&lt;/span&gt;);
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&amp;#39;s the result:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;&amp;gt; zig cc hello-c.c -o hello-c.exe

&amp;gt; hello-c.exe
Hello, C!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Success!&lt;/p&gt;
&lt;h2 id=&quot;making-the-binary-more-portable&quot;&gt;Making the binary more portable&lt;/h2&gt;
&lt;p&gt;According to ziglearn.org, &lt;a href=&quot;https://ziglearn.org/chapter-3/#cross-compilation&quot;&gt;Zig targets the host&amp;#39;s specific CPU by default&lt;/a&gt;. If you plan to distribute programs built with Zig, you&amp;#39;ll probably want to choose a more generic architecture, e.g. &lt;code&gt;i386&lt;/code&gt; or &lt;code&gt;x86_64&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;&amp;gt; zig cc -target i386-windows-gnu hello-c.c -o hello-c.exe 
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;hello-win32&quot;&gt;Hello, Win32!&lt;/h1&gt;
&lt;p&gt;That last exercise was somewhat trivial, although I&amp;#39;m still impressed at how easy it was to get started with Zig&amp;#39;s compiler (just unzip--no installation or SDK required).&lt;/p&gt;
&lt;p&gt;But I want to be able to call Win32 APIs from my programs. Is Zig up to that task?&lt;/p&gt;
&lt;p&gt;Here&amp;#39;s a trivial program to pop up a message box:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;windows.h&amp;gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; {
    MessageBox(&lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;Hello there!&amp;quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;From Zig land!&amp;quot;&lt;/span&gt;, MB_OK);
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Build command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;&amp;gt; zig cc -target i386-windows-gnu hello-win32.c -o hello-win32.exe 

&amp;gt; hello-win32.exe
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sure enough, a message box appeared!&lt;/p&gt;
&lt;p&gt;At this point, I&amp;#39;m impressed, but it remains to be seen if Zig&amp;#39;s magic will work beyond trivial examples like this.&lt;/p&gt;
&lt;h1 id=&quot;hello-c-and-winmain&quot;&gt;Hello, C++ and WinMain!&lt;/h1&gt;
&lt;p&gt;Time to throw in some C++ and create an actual Window:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;windows.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;lt;tchar.h&amp;gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; TCHAR szWindowClass[] = _T(&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;DesktopApp&amp;quot;&lt;/span&gt;);
&lt;span class=&quot;hljs-type&quot;&gt;static&lt;/span&gt; TCHAR szTitle[] = _T(&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;Hello, Windows!&amp;quot;&lt;/span&gt;);

&lt;span class=&quot;hljs-function&quot;&gt;LRESULT CALLBACK &lt;span class=&quot;hljs-title&quot;&gt;WndProc&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(HWND, UINT, WPARAM, LPARAM)&lt;/span&gt;&lt;/span&gt;;

&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; CALLBACK &lt;span class=&quot;hljs-title&quot;&gt;WinMain&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; nCmdShow)&lt;/span&gt; &lt;/span&gt;{
    WNDCLASSEX wcex;

    wcex.cbSize = &lt;span class=&quot;hljs-built_in&quot;&gt;sizeof&lt;/span&gt;(WNDCLASSEX);
    wcex.style = CS_HREDRAW | CS_VREDRAW;
    wcex.lpfnWndProc = WndProc;
    wcex.cbClsExtra = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;
    wcex.cbWndExtra = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;
    wcex.hInstance = hInstance;
    wcex.hIcon = &lt;span class=&quot;hljs-built_in&quot;&gt;LoadIcon&lt;/span&gt;(hInstance, IDI_APPLICATION);
    wcex.hCursor = &lt;span class=&quot;hljs-built_in&quot;&gt;LoadCursor&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;, IDC_ARROW);
    wcex.hbrBackground = (HBRUSH)(COLOR_WINDOW + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);
    wcex.lpszMenuName = &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;;
    wcex.lpszClassName = szWindowClass;
    wcex.hIconSm = &lt;span class=&quot;hljs-built_in&quot;&gt;LoadIcon&lt;/span&gt;(wcex.hInstance, IDI_APPLICATION);

    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;hljs-built_in&quot;&gt;RegisterClassEx&lt;/span&gt;(&amp;amp;wcex)) {
        &lt;span class=&quot;hljs-built_in&quot;&gt;MessageBox&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;, _T(&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;Call to RegisterClassEx failed!&amp;quot;&lt;/span&gt;), _T(&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;Test app&amp;quot;&lt;/span&gt;), &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;);
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;
    }

    HWND hWnd = &lt;span class=&quot;hljs-built_in&quot;&gt;CreateWindow&lt;/span&gt;(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT, &lt;span class=&quot;hljs-number&quot;&gt;1200&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;900&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;, hInstance, &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;);
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (!hWnd) {
        &lt;span class=&quot;hljs-built_in&quot;&gt;MessageBox&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;,
            _T(&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;Call to CreateWindow failed!&amp;quot;&lt;/span&gt;),
            _T(&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;Test app&amp;quot;&lt;/span&gt;),
            &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;);

        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;
    }

    &lt;span class=&quot;hljs-built_in&quot;&gt;ShowWindow&lt;/span&gt;(hWnd, nCmdShow);
    &lt;span class=&quot;hljs-built_in&quot;&gt;UpdateWindow&lt;/span&gt;(hWnd);

    MSG msg;
    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;hljs-built_in&quot;&gt;GetMessage&lt;/span&gt;(&amp;amp;msg, &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)) {
        &lt;span class=&quot;hljs-built_in&quot;&gt;TranslateMessage&lt;/span&gt;(&amp;amp;msg);
        &lt;span class=&quot;hljs-built_in&quot;&gt;DispatchMessage&lt;/span&gt;(&amp;amp;msg);
    }

    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt;)msg.wParam;
}

&lt;span class=&quot;hljs-function&quot;&gt;LRESULT CALLBACK &lt;span class=&quot;hljs-title&quot;&gt;WndProc&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (message) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; WM_DESTROY:
        &lt;span class=&quot;hljs-built_in&quot;&gt;PostQuitMessage&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;);
        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;

    &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;:
        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;DefWindowProc&lt;/span&gt;(hWnd, message, wParam, lParam);
        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;
    }

    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now to build and test:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;&amp;gt; zig c++ -target i386-windows-gnu hello-window.cpp -o hello-window.exe

&amp;gt; hello-window.exe
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This popped up a window that I could close.&lt;/p&gt;
&lt;p&gt;Based on functionality, this is a fairly trivial example, but based on the number of lines of code in the included header files, I actually wasn&amp;#39;t expecting this to work on the first try.&lt;/p&gt;
&lt;p&gt;It&amp;#39;s not yet clear to me how much of the Windows SDK Zig ships with, but it&amp;#39;s at least enough to create a real window.&lt;/p&gt;
&lt;h1 id=&quot;hello-webview2&quot;&gt;Hello, WebView2?&lt;/h1&gt;
&lt;p&gt;Given that &lt;a href=&quot;https://docs.microsoft.com/en-us/microsoft-edge/webview2/&quot;&gt;WebView2&lt;/a&gt; isn&amp;#39;t a part of the standard Windows SDK, I&amp;#39;m almost certain that this won&amp;#39;t work out of the box, but I&amp;#39;m going to give it a try anyway.&lt;/p&gt;
&lt;p&gt;I&amp;#39;m going to work off of the &lt;a href=&quot;https://docs.microsoft.com/en-us/microsoft-edge/webview2/get-started/win32&quot;&gt;WebView2 for Win32 tutorial&lt;/a&gt;. The code is fairly lengthy, so I&amp;#39;m not going to duplicate it here.&lt;/p&gt;
&lt;p&gt;After trying to compile the sample, I finally managed to stump Zig:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;&amp;gt; zig c++ -target i386-windows-gnu hello-webview2.cpp -o hello-webview2.exe
hello-webview2.cpp:5:10: fatal error: &amp;#x27;wil/com.h&amp;#x27; file not found
#include &amp;lt;wil/com.h&amp;gt;
         ^~~~~~~~~~~
1 error generated.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The sample code uses &lt;a href=&quot;https://github.com/microsoft/wil&quot;&gt;WIL&lt;/a&gt;, and regardless of whether that&amp;#39;s part of the Windows SDK, Zig doesn&amp;#39;t ship with it. I&amp;#39;ll try cloning the repository, but you could also download the NuGet package and unzip it (&lt;code&gt;.nupkg&lt;/code&gt; files are just Zip files).&lt;/p&gt;
&lt;p&gt;Second attempt, this time with WIL:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;&amp;gt; zig c++ -target i386-windows-gnu hello-webview2.cpp -I..\wil\include -o hello-webview2.exe
In file included from hello-webview2.cpp:5:
..\wil\include\wil/com.h:14:10: fatal error: &amp;#x27;WeakReference.h&amp;#x27; file not found
#include &amp;lt;WeakReference.h&amp;gt;
         ^~~~~~~~~~~~~~~~~
1 error generated.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alright, &lt;code&gt;WeakReference.h&lt;/code&gt; is part of &lt;a href=&quot;https://docs.microsoft.com/en-us/cpp/cppcx/wrl/windows-runtime-cpp-template-library-wrl?view=msvc-170&quot;&gt;WRL&lt;/a&gt;, which is actually part of the Windows SDK. Zig doesn&amp;#39;t appear to ship with WRL (and I&amp;#39;m not even sure that it &lt;em&gt;should&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;I suspect I don&amp;#39;t actually &lt;em&gt;need&lt;/em&gt; WIL or WRL, but proceeding without them might not be the best use of time, because instantiating WebView2 appears to be an COM-based asynchronous operation, and I don&amp;#39;t want to reimplement a large chunk of WIL, WRL, or even COM just to avoid using the Windows SDK and Visual Studio.&lt;/p&gt;
&lt;p&gt;Ok, fine, Visual Studio Installer. You win this round.&lt;/p&gt;
</content>
</entry>
</feed>
